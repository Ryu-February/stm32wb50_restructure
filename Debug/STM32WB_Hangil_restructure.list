
STM32WB_Hangil_restructure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009640  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08009780  08009780  0000a780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009eb4  08009eb4  0000aeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ebc  08009ebc  0000aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ec0  08009ec0  0000aec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000284  20000008  08009ec4  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000052c  20000290  0800a148  0000b290  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200007bc  0800a148  0000b7bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d5f5  00000000  00000000  0000b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044c0  00000000  00000000  000288b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ce0  00000000  00000000  0002cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001633  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002365a  00000000  00000000  0003008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023a5b  00000000  00000000  000536e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d0438  00000000  00000000  00077140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00147578  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008980  00000000  00000000  001475bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0014ff3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000290 	.word	0x20000290
 800015c:	00000000 	.word	0x00000000
 8000160:	0800975c 	.word	0x0800975c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000294 	.word	0x20000294
 800017c:	0800975c 	.word	0x0800975c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <ap_init>:
static void ap_task_color_calibration(void);
static void ap_task_color_detection(void);


void ap_init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	i2c_init();
 8000b5c:	f005 fdda 	bl	8006714 <i2c_init>
	uart_init();
 8000b60:	f005 fee0 	bl	8006924 <uart_init>

	led_init();
 8000b64:	f000 fcdc 	bl	8001520 <led_init>
	rgb_init();
 8000b68:	f000 fd06 	bl	8001578 <rgb_init>
	color_init();
 8000b6c:	f000 f9c5 	bl	8000efa <color_init>
//	step_motor_init();

	HAL_TIM_Base_Start_IT(&htim16);
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <ap_init+0x30>)
 8000b72:	f004 fe73 	bl	800585c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <ap_init+0x34>)
 8000b78:	f004 fe70 	bl	800585c <HAL_TIM_Base_Start_IT>

	load_color_reference_table();
 8000b7c:	f000 fb4e 	bl	800121c <load_color_reference_table>
	debug_print_color_reference_table();
 8000b80:	f000 fb80 	bl	8001284 <debug_print_color_reference_table>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000524 	.word	0x20000524
 8000b8c:	20000570 	.word	0x20000570

08000b90 <ap_main>:



void ap_main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	while(1)
	{
		if(!color_calibration && input_is_long_pressed(INPUT_MODE))
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <ap_main+0x78>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d011      	beq.n	8000bc8 <ap_main+0x38>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fc7f 	bl	80014a8 <input_is_long_pressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00b      	beq.n	8000bc8 <ap_main+0x38>
		{
			color_calibration = true;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <ap_main+0x78>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
			color_seq = 0;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <ap_main+0x7c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
			init_printed = false;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <ap_main+0x80>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
			uart_printf("[INFO] Entering color calibration mode...\r\n");
 8000bc2:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <ap_main+0x84>)
 8000bc4:	f005 feb8 	bl	8006938 <uart_printf>
		}

		if (color_calibration)
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <ap_main+0x78>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <ap_main+0x48>
		{
			ap_task_color_calibration();
 8000bd2:	f000 f825 	bl	8000c20 <ap_task_color_calibration>
 8000bd6:	e001      	b.n	8000bdc <ap_main+0x4c>
		}
		else
		{
			ap_task_color_detection();
 8000bd8:	f000 f8c0 	bl	8000d5c <ap_task_color_detection>
		}


		if(ir_is_black())
 8000bdc:	f000 fc94 	bl	8001508 <ir_is_black>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <ap_main+0x5e>
		{
			uart_printf("cur_color: black\r\n");
 8000be6:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <ap_main+0x88>)
 8000be8:	f005 fea6 	bl	8006938 <uart_printf>
 8000bec:	e006      	b.n	8000bfc <ap_main+0x6c>
		}
		else
		{
			uart_printf("cur_ir_adc: %d\r\n",ir_read_adc());
 8000bee:	f000 fc71 	bl	80014d4 <ir_read_adc>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <ap_main+0x8c>)
 8000bf8:	f005 fe9e 	bl	8006938 <uart_printf>
		}
		delay_ms(500);
 8000bfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c00:	f000 fbcd 	bl	800139e <delay_ms>
		if(!color_calibration && input_is_long_pressed(INPUT_MODE))
 8000c04:	e7c6      	b.n	8000b94 <ap_main+0x4>
 8000c06:	bf00      	nop
 8000c08:	200002ac 	.word	0x200002ac
 8000c0c:	200002ae 	.word	0x200002ae
 8000c10:	200002ad 	.word	0x200002ad
 8000c14:	08009780 	.word	0x08009780
 8000c18:	080097ac 	.word	0x080097ac
 8000c1c:	080097c0 	.word	0x080097c0

08000c20 <ap_task_color_calibration>:
}



static void ap_task_color_calibration(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
	if(!check_color) return;
 8000c26:	4b43      	ldr	r3, [pc, #268]	@ (8000d34 <ap_task_color_calibration+0x114>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d17a      	bne.n	8000d2c <ap_task_color_calibration+0x10c>

	if (!init_printed)
 8000c36:	4b40      	ldr	r3, [pc, #256]	@ (8000d38 <ap_task_color_calibration+0x118>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00b      	beq.n	8000c5c <ap_task_color_calibration+0x3c>
	{
		uart_printf("-------------COLOR SETTING-------------\r\n");
 8000c44:	483d      	ldr	r0, [pc, #244]	@ (8000d3c <ap_task_color_calibration+0x11c>)
 8000c46:	f005 fe77 	bl	8006938 <uart_printf>
		init_printed = true;
 8000c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d38 <ap_task_color_calibration+0x118>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
		flash_erase_color_table(BH1745_ADDR_LEFT);
 8000c50:	2038      	movs	r0, #56	@ 0x38
 8000c52:	f005 ff03 	bl	8006a5c <flash_erase_color_table>
		flash_erase_color_table(BH1745_ADDR_RIGHT);
 8000c56:	2039      	movs	r0, #57	@ 0x39
 8000c58:	f005 ff00 	bl	8006a5c <flash_erase_color_table>
	}

	if (input_is_short_pressed(INPUT_MODE))
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 fc0d 	bl	800147c <input_is_short_pressed>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d062      	beq.n	8000d2e <ap_task_color_calibration+0x10e>
	{
		uart_printf("color set: [%s]\r\n", color_to_string(color_seq));
 8000c68:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fabd 	bl	80011ec <color_to_string>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4619      	mov	r1, r3
 8000c76:	4833      	ldr	r0, [pc, #204]	@ (8000d44 <ap_task_color_calibration+0x124>)
 8000c78:	f005 fe5e 	bl	8006938 <uart_printf>

		bh1745_color_data_t left  = bh1745_read_rgbc(BH1745_ADDR_LEFT);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	2138      	movs	r1, #56	@ 0x38
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f96a 	bl	8000f5c <bh1745_read_rgbc>
		bh1745_color_data_t right = bh1745_read_rgbc(BH1745_ADDR_RIGHT);
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2139      	movs	r1, #57	@ 0x39
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f965 	bl	8000f5c <bh1745_read_rgbc>

		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
					left.red, left.green, left.blue, left.clear);
 8000c92:	893b      	ldrh	r3, [r7, #8]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c94:	4619      	mov	r1, r3
					left.red, left.green, left.blue, left.clear);
 8000c96:	897b      	ldrh	r3, [r7, #10]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c98:	461a      	mov	r2, r3
					left.red, left.green, left.blue, left.clear);
 8000c9a:	89bb      	ldrh	r3, [r7, #12]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c9c:	4618      	mov	r0, r3
					left.red, left.green, left.blue, left.clear);
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4828      	ldr	r0, [pc, #160]	@ (8000d48 <ap_task_color_calibration+0x128>)
 8000ca6:	f005 fe47 	bl	8006938 <uart_printf>

		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
					right.red, right.green, right.blue, right.clear);
 8000caa:	883b      	ldrh	r3, [r7, #0]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000cac:	4619      	mov	r1, r3
					right.red, right.green, right.blue, right.clear);
 8000cae:	887b      	ldrh	r3, [r7, #2]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000cb0:	461a      	mov	r2, r3
					right.red, right.green, right.blue, right.clear);
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000cb4:	4618      	mov	r0, r3
					right.red, right.green, right.blue, right.clear);
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4823      	ldr	r0, [pc, #140]	@ (8000d4c <ap_task_color_calibration+0x12c>)
 8000cbe:	f005 fe3b 	bl	8006938 <uart_printf>

		save_color_reference(BH1745_ADDR_LEFT,  color_seq, left.red, left.green, left.blue);
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000cc4:	7819      	ldrb	r1, [r3, #0]
 8000cc6:	893a      	ldrh	r2, [r7, #8]
 8000cc8:	8978      	ldrh	r0, [r7, #10]
 8000cca:	89bb      	ldrh	r3, [r7, #12]
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2038      	movs	r0, #56	@ 0x38
 8000cd2:	f000 f971 	bl	8000fb8 <save_color_reference>
		save_color_reference(BH1745_ADDR_RIGHT, color_seq, right.red, right.green, right.blue);
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000cd8:	7819      	ldrb	r1, [r3, #0]
 8000cda:	883a      	ldrh	r2, [r7, #0]
 8000cdc:	8878      	ldrh	r0, [r7, #2]
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2039      	movs	r0, #57	@ 0x39
 8000ce6:	f000 f967 	bl	8000fb8 <save_color_reference>

		uart_printf("--------------------------------\r\n");
 8000cea:	4819      	ldr	r0, [pc, #100]	@ (8000d50 <ap_task_color_calibration+0x130>)
 8000cec:	f005 fe24 	bl	8006938 <uart_printf>

		if (++color_seq > COLOR_GRAY)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b0b      	cmp	r3, #11
 8000d02:	d914      	bls.n	8000d2e <ap_task_color_calibration+0x10e>
		{
			color_calibration = false;
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <ap_task_color_calibration+0x134>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
			init_printed = false;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <ap_task_color_calibration+0x118>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
			color_seq = 0;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <ap_task_color_calibration+0x120>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
			uart_printf("-------color set finished-------\r\n");
 8000d16:	4810      	ldr	r0, [pc, #64]	@ (8000d58 <ap_task_color_calibration+0x138>)
 8000d18:	f005 fe0e 	bl	8006938 <uart_printf>
			uart_printf("--------------------------------\r\n");
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <ap_task_color_calibration+0x130>)
 8000d1e:	f005 fe0b 	bl	8006938 <uart_printf>
			load_color_reference_table();
 8000d22:	f000 fa7b 	bl	800121c <load_color_reference_table>
			debug_print_color_reference_table();
 8000d26:	f000 faad 	bl	8001284 <debug_print_color_reference_table>
 8000d2a:	e000      	b.n	8000d2e <ap_task_color_calibration+0x10e>
	if(!check_color) return;
 8000d2c:	bf00      	nop
		}
	}
}
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200002b4 	.word	0x200002b4
 8000d38:	200002ad 	.word	0x200002ad
 8000d3c:	080097d4 	.word	0x080097d4
 8000d40:	200002ae 	.word	0x200002ae
 8000d44:	08009800 	.word	0x08009800
 8000d48:	08009814 	.word	0x08009814
 8000d4c:	08009834 	.word	0x08009834
 8000d50:	08009854 	.word	0x08009854
 8000d54:	200002ac 	.word	0x200002ac
 8000d58:	08009878 	.word	0x08009878

08000d5c <ap_task_color_detection>:


// -------------------- 일반 색상 인식 루틴 --------------------
static void ap_task_color_detection(void)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
	if (!check_color) return;
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <ap_task_color_detection+0x88>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d133      	bne.n	8000dda <ap_task_color_detection+0x7e>

	uint8_t left  = classify_color_side(BH1745_ADDR_LEFT);
 8000d72:	2038      	movs	r0, #56	@ 0x38
 8000d74:	f000 fa1a 	bl	80011ac <classify_color_side>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
	uint8_t right = classify_color_side(BH1745_ADDR_RIGHT);
 8000d7c:	2039      	movs	r0, #57	@ 0x39
 8000d7e:	f000 fa15 	bl	80011ac <classify_color_side>
 8000d82:	4603      	mov	r3, r0
 8000d84:	71bb      	strb	r3, [r7, #6]

	if (left == right)
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d10c      	bne.n	8000da8 <ap_task_color_detection+0x4c>
	{
		detected_color = left;
 8000d8e:	4a16      	ldr	r2, [pc, #88]	@ (8000de8 <ap_task_color_detection+0x8c>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	7013      	strb	r3, [r2, #0]
		uart_printf("cur_detected color: %s\r\n", color_to_string(left));
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fa28 	bl	80011ec <color_to_string>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4812      	ldr	r0, [pc, #72]	@ (8000dec <ap_task_color_detection+0x90>)
 8000da2:	f005 fdc9 	bl	8006938 <uart_printf>
 8000da6:	e014      	b.n	8000dd2 <ap_task_color_detection+0x76>
	}
	else
	{
		detected_color = COLOR_BLACK;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <ap_task_color_detection+0x8c>)
 8000daa:	2209      	movs	r2, #9
 8000dac:	701a      	strb	r2, [r3, #0]
		uart_printf("The colors on both sides do not match!!\r\n");
 8000dae:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <ap_task_color_detection+0x94>)
 8000db0:	f005 fdc2 	bl	8006938 <uart_printf>
		uart_printf("[LEFT]: %s | [RIGHT]: %s\r\n", color_to_string(left), color_to_string(right));
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fa18 	bl	80011ec <color_to_string>
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	79bb      	ldrb	r3, [r7, #6]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fa13 	bl	80011ec <color_to_string>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4621      	mov	r1, r4
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <ap_task_color_detection+0x98>)
 8000dce:	f005 fdb3 	bl	8006938 <uart_printf>
	}

	check_color = false;
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <ap_task_color_detection+0x88>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e000      	b.n	8000ddc <ap_task_color_detection+0x80>
	if (!check_color) return;
 8000dda:	bf00      	nop
}
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200002b4 	.word	0x200002b4
 8000de8:	20000008 	.word	0x20000008
 8000dec:	0800989c 	.word	0x0800989c
 8000df0:	080098b8 	.word	0x080098b8
 8000df4:	080098e4 	.word	0x080098e4

08000df8 <HAL_GPIO_EXTI_Callback>:

extern volatile uint8_t detected_color;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d102      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x16>
	{
		case GPIO_PIN_0:
			ap_exti0_callback();
 8000e08:	f000 f806 	bl	8000e18 <ap_exti0_callback>
			break;
 8000e0c:	bf00      	nop
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <ap_exti0_callback>:

void ap_exti0_callback(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	bool level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);  // Pull-up 기준
 8000e1e:	2101      	movs	r1, #1
 8000e20:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <ap_exti0_callback+0x38>)
 8000e22:	f003 f81d 	bl	8003e60 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf0c      	ite	eq
 8000e2c:	2301      	moveq	r3, #1
 8000e2e:	2300      	movne	r3, #0
 8000e30:	71fb      	strb	r3, [r7, #7]
	input_exti_triggered(INPUT_MODE, level);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 fabc 	bl	80013b4 <input_exti_triggered>

	if(level)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <ap_exti0_callback+0x30>
		check_color = true;
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <ap_exti0_callback+0x3c>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	48000400 	.word	0x48000400
 8000e54:	200002b4 	.word	0x200002b4

08000e58 <ap_tim16_callback>:
{

}

void ap_tim16_callback(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	rgb_set_color(detected_color);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <ap_tim16_callback+0x14>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fb92 	bl	800158c <rgb_set_color>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000008 	.word	0x20000008

08000e70 <ap_tim17_callback>:

void ap_tim17_callback(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	timer17_ms++;
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <ap_tim17_callback+0x18>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a03      	ldr	r2, [pc, #12]	@ (8000e88 <ap_tim17_callback+0x18>)
 8000e7c:	6013      	str	r3, [r2, #0]

	input_update();
 8000e7e:	f000 faad 	bl	80013dc <input_update>


}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200002b0 	.word	0x200002b0

08000e8c <bh1745_write_reg>:
uint8_t insert_index = 0;



void bh1745_write_reg(uint8_t dev_addr, uint8_t reg, uint8_t data)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	460b      	mov	r3, r1
 8000e98:	71bb      	strb	r3, [r7, #6]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	717b      	strb	r3, [r7, #5]
    i2c_write(dev_addr, reg, data);
 8000e9e:	797a      	ldrb	r2, [r7, #5]
 8000ea0:	79b9      	ldrb	r1, [r7, #6]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fc91 	bl	80067cc <i2c_write>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <bh1745_init>:

void bh1745_init(uint8_t dev_addr)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
    // 1. SW Reset
    bh1745_write_reg(dev_addr, 0x40, 0x80);  // SYSTEM_CONTROL: Software Reset
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	2140      	movs	r1, #64	@ 0x40
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffe2 	bl	8000e8c <bh1745_write_reg>
    HAL_Delay(10);
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f001 f975 	bl	80021b8 <HAL_Delay>

    // 2. Measurement Time 설정 (MODE_CONTROL1)
    bh1745_write_reg(dev_addr, 0x41, 0x00);  // 160ms
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2141      	movs	r1, #65	@ 0x41
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffd9 	bl	8000e8c <bh1745_write_reg>

    // 3. Gain 설정 + RGBC Enable (MODE_CONTROL2)
    bh1745_write_reg(dev_addr, 0x42, 0x12);  // GAIN = 1x, Bit4(RGBC_EN) = 1
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2212      	movs	r2, #18
 8000ede:	2142      	movs	r1, #66	@ 0x42
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ffd3 	bl	8000e8c <bh1745_write_reg>

    // 4. RGB 측정 트리거 (MODE_CONTROL3)
    bh1745_write_reg(dev_addr, 0x44, 0x02);  // RGB measurement start
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	2144      	movs	r1, #68	@ 0x44
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ffcd 	bl	8000e8c <bh1745_write_reg>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <color_init>:

void color_init(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
	bh1745_init(BH1745_ADDR_LEFT);
 8000efe:	2038      	movs	r0, #56	@ 0x38
 8000f00:	f7ff ffd7 	bl	8000eb2 <bh1745_init>
	bh1745_init(BH1745_ADDR_RIGHT);
 8000f04:	2039      	movs	r0, #57	@ 0x39
 8000f06:	f7ff ffd4 	bl	8000eb2 <bh1745_init>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <bh1745_read_u16>:

uint16_t bh1745_read_u16(uint8_t dev_addr, uint8_t lsb_reg)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	460a      	mov	r2, r1
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	71bb      	strb	r3, [r7, #6]
    uint8_t lsb = i2c_read(dev_addr, lsb_reg);
 8000f1e:	79ba      	ldrb	r2, [r7, #6]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fc99 	bl	800685c <i2c_read>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
    uint8_t msb = i2c_read(dev_addr, lsb_reg + 1);
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fc8f 	bl	800685c <i2c_read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73bb      	strb	r3, [r7, #14]
    return (msb << 8) | lsb;
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b29b      	uxth	r3, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <bh1745_read_rgbc>:

bh1745_color_data_t bh1745_read_rgbc(uint8_t dev_addr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
    bh1745_color_data_t color;

    color.red   = bh1745_read_u16(dev_addr, 0x50);
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	2150      	movs	r1, #80	@ 0x50
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ffce 	bl	8000f0e <bh1745_read_u16>
 8000f72:	4603      	mov	r3, r0
 8000f74:	813b      	strh	r3, [r7, #8]
    color.green = bh1745_read_u16(dev_addr, 0x52);
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2152      	movs	r1, #82	@ 0x52
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffc7 	bl	8000f0e <bh1745_read_u16>
 8000f80:	4603      	mov	r3, r0
 8000f82:	817b      	strh	r3, [r7, #10]
    color.blue  = bh1745_read_u16(dev_addr, 0x54);
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2154      	movs	r1, #84	@ 0x54
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ffc0 	bl	8000f0e <bh1745_read_u16>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	81bb      	strh	r3, [r7, #12]
    color.clear = bh1745_read_u16(dev_addr, 0x56);
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	2156      	movs	r1, #86	@ 0x56
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffb9 	bl	8000f0e <bh1745_read_u16>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	81fb      	strh	r3, [r7, #14]

    return color;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	cb03      	ldmia	r3!, {r0, r1}
 8000faa:	6010      	str	r0, [r2, #0]
 8000fac:	6051      	str	r1, [r2, #4]
}
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <save_color_reference>:


void save_color_reference(uint8_t sensor_side, color_t color, uint16_t r, uint16_t g, uint16_t b)
{
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b08d      	sub	sp, #52	@ 0x34
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4606      	mov	r6, r0
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4633      	mov	r3, r6
 8000fc8:	71fb      	strb	r3, [r7, #7]
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71bb      	strb	r3, [r7, #6]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	807b      	strh	r3, [r7, #2]
	rgb_raw_t	raw		= {.red_raw = r, .green_raw = g, .blue_raw = b};
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	833b      	strh	r3, [r7, #24]
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	837b      	strh	r3, [r7, #26]
 8000fde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000fe2:	83bb      	strh	r3, [r7, #28]
    uint64_t 	offset	= calculate_brightness(r, g, b);
 8000fe4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000fe8:	8879      	ldrh	r1, [r7, #2]
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9b7 	bl	8001360 <calculate_brightness>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	4615      	mov	r5, r2
 8000ffa:	e9c7 4508 	strd	r4, r5, [r7, #32]

    reference_entry_t entry = { .raw = raw, .color = color, .offset = offset };
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	f107 0218 	add.w	r2, r7, #24
 8001014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001018:	6018      	str	r0, [r3, #0]
 800101a:	3304      	adds	r3, #4
 800101c:	8019      	strh	r1, [r3, #0]
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	73bb      	strb	r3, [r7, #14]
 8001022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001026:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (sensor_side == BH1745_ADDR_LEFT)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b38      	cmp	r3, #56	@ 0x38
 800102e:	d10a      	bne.n	8001046 <save_color_reference+0x8e>
    {
        color_reference_tbl_left[color] = entry;
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <save_color_reference+0xcc>)
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	461c      	mov	r4, r3
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001044:	e009      	b.n	800105a <save_color_reference+0xa2>
    }
    else
    {
        color_reference_tbl_right[color] = entry;
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <save_color_reference+0xd0>)
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	461c      	mov	r4, r3
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // Flash에 저장!
    flash_write_color_reference(sensor_side, color, entry);
 800105a:	79bd      	ldrb	r5, [r7, #6]
 800105c:	79fc      	ldrb	r4, [r7, #7]
 800105e:	466a      	mov	r2, sp
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001068:	e882 0003 	stmia.w	r2, {r0, r1}
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	cb0c      	ldmia	r3, {r2, r3}
 8001072:	4629      	mov	r1, r5
 8001074:	4620      	mov	r0, r4
 8001076:	f005 fc85 	bl	8006984 <flash_write_color_reference>
}
 800107a:	bf00      	nop
 800107c:	372c      	adds	r7, #44	@ 0x2c
 800107e:	46bd      	mov	sp, r7
 8001080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001082:	bf00      	nop
 8001084:	200002b8 	.word	0x200002b8
 8001088:	20000378 	.word	0x20000378

0800108c <classify_color>:


color_t classify_color(uint8_t left_right, uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 800108c:	b490      	push	{r4, r7}
 800108e:	b08c      	sub	sp, #48	@ 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	4604      	mov	r4, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4623      	mov	r3, r4
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4603      	mov	r3, r0
 80010a0:	80bb      	strh	r3, [r7, #4]
 80010a2:	460b      	mov	r3, r1
 80010a4:	807b      	strh	r3, [r7, #2]
 80010a6:	4613      	mov	r3, r2
 80010a8:	803b      	strh	r3, [r7, #0]
	float min_dist = 1e9;
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <classify_color+0x114>)
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	color_t best_match = COLOR_GRAY;
 80010ae:	230b      	movs	r3, #11
 80010b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    const reference_entry_t* table;
    int table_size = COLOR_COUNT;
 80010b4:	230c      	movs	r3, #12
 80010b6:	61fb      	str	r3, [r7, #28]

    if (left_right == BH1745_ADDR_LEFT)  // LEFT
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b38      	cmp	r3, #56	@ 0x38
 80010bc:	d102      	bne.n	80010c4 <classify_color+0x38>
    {
        table = color_reference_tbl_left;
 80010be:	4b39      	ldr	r3, [pc, #228]	@ (80011a4 <classify_color+0x118>)
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c2:	e001      	b.n	80010c8 <classify_color+0x3c>
    }
    else // RIGHT
    {
        table = color_reference_tbl_right;
 80010c4:	4b38      	ldr	r3, [pc, #224]	@ (80011a8 <classify_color+0x11c>)
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    for (int i = 0; i < table_size; i++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
 80010cc:	e05c      	b.n	8001188 <classify_color+0xfc>
    {
    	float dr = (float)r - table[i].raw.red_raw;
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010de:	4413      	add	r3, r2
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	edc7 7a06 	vstr	s15, [r7, #24]
		float dg = (float)g - table[i].raw.green_raw;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001102:	4413      	add	r3, r2
 8001104:	885b      	ldrh	r3, [r3, #2]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001112:	edc7 7a05 	vstr	s15, [r7, #20]
		float db = (float)b - table[i].raw.blue_raw;
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001126:	4413      	add	r3, r2
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001136:	edc7 7a04 	vstr	s15, [r7, #16]

        float dist = dr * dr + dg * dg + db * db;
 800113a:	edd7 7a06 	vldr	s15, [r7, #24]
 800113e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001142:	edd7 7a05 	vldr	s15, [r7, #20]
 8001146:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800114a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001152:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800115a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (dist < min_dist)
 800115e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001162:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d508      	bpl.n	8001182 <classify_color+0xf6>
        {
            min_dist = dist;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
            best_match = table[i].color;
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117a:	4413      	add	r3, r2
 800117c:	799b      	ldrb	r3, [r3, #6]
 800117e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    for (int i = 0; i < table_size; i++)
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	3301      	adds	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	6a3a      	ldr	r2, [r7, #32]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	db9e      	blt.n	80010ce <classify_color+0x42>
        }
    }

	return best_match;
 8001190:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001194:	4618      	mov	r0, r3
 8001196:	3730      	adds	r7, #48	@ 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bc90      	pop	{r4, r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	4e6e6b28 	.word	0x4e6e6b28
 80011a4:	200002b8 	.word	0x200002b8
 80011a8:	20000378 	.word	0x20000378

080011ac <classify_color_side>:

uint8_t classify_color_side(uint8_t color_side)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	@ 0x24
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = color_side;
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	75fb      	strb	r3, [r7, #23]

	bh1745_color_data_t color_rgbc;
	color_t detected = COLOR_BLACK;
 80011ba:	2309      	movs	r3, #9
 80011bc:	75bb      	strb	r3, [r7, #22]

	color_rgbc 	= bh1745_read_rgbc(addr);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	7dfa      	ldrb	r2, [r7, #23]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fec8 	bl	8000f5c <bh1745_read_rgbc>

	detected =
			classify_color(addr, color_rgbc.red, color_rgbc.green, color_rgbc.blue, color_rgbc.clear);
 80011cc:	89b9      	ldrh	r1, [r7, #12]
 80011ce:	89fa      	ldrh	r2, [r7, #14]
 80011d0:	8a3c      	ldrh	r4, [r7, #16]
 80011d2:	8a7b      	ldrh	r3, [r7, #18]
 80011d4:	7df8      	ldrb	r0, [r7, #23]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4623      	mov	r3, r4
 80011da:	f7ff ff57 	bl	800108c <classify_color>
 80011de:	4603      	mov	r3, r0
 80011e0:	75bb      	strb	r3, [r7, #22]

	return (uint8_t) detected;
 80011e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd90      	pop	{r4, r7, pc}

080011ec <color_to_string>:

const char* color_to_string(color_t color)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
        "BLACK",
        "WHITE",
        "GRAY"
    };

    if (color < 0 || color >= COLOR_COUNT)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b0b      	cmp	r3, #11
 80011fa:	d901      	bls.n	8001200 <color_to_string+0x14>
        return "UNKNOWN";
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <color_to_string+0x28>)
 80011fe:	e003      	b.n	8001208 <color_to_string+0x1c>

    return color_names[color];
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a05      	ldr	r2, [pc, #20]	@ (8001218 <color_to_string+0x2c>)
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	08009900 	.word	0x08009900
 8001218:	2000000c 	.word	0x2000000c

0800121c <load_color_reference_table>:

void load_color_reference_table(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
    for (int i = 0; i < COLOR_COUNT; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	e020      	b.n	800126a <load_color_reference_table+0x4e>
    {
        color_reference_tbl_left[i] = flash_read_color_reference(BH1745_ADDR_LEFT, i);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4913      	ldr	r1, [pc, #76]	@ (800127c <load_color_reference_table+0x60>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	18cc      	adds	r4, r1, r3
 8001234:	463b      	mov	r3, r7
 8001236:	2138      	movs	r1, #56	@ 0x38
 8001238:	4618      	mov	r0, r3
 800123a:	f005 fbe5 	bl	8006a08 <flash_read_color_reference>
 800123e:	463b      	mov	r3, r7
 8001240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        color_reference_tbl_right[i] = flash_read_color_reference(BH1745_ADDR_RIGHT, i);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	490d      	ldr	r1, [pc, #52]	@ (8001280 <load_color_reference_table+0x64>)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	18cc      	adds	r4, r1, r3
 8001252:	463b      	mov	r3, r7
 8001254:	2139      	movs	r1, #57	@ 0x39
 8001256:	4618      	mov	r0, r3
 8001258:	f005 fbd6 	bl	8006a08 <flash_read_color_reference>
 800125c:	463b      	mov	r3, r7
 800125e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < COLOR_COUNT; i++)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b0b      	cmp	r3, #11
 800126e:	dddb      	ble.n	8001228 <load_color_reference_table+0xc>
    }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	200002b8 	.word	0x200002b8
 8001280:	20000378 	.word	0x20000378

08001284 <debug_print_color_reference_table>:

void debug_print_color_reference_table(void)
{
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b08e      	sub	sp, #56	@ 0x38
 8001288:	af04      	add	r7, sp, #16
    uart_printf("=== LEFT COLOR REFERENCE TABLE ===\r\n");
 800128a:	482f      	ldr	r0, [pc, #188]	@ (8001348 <debug_print_color_reference_table+0xc4>)
 800128c:	f005 fb54 	bl	8006938 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
 8001294:	e022      	b.n	80012dc <debug_print_color_reference_table+0x58>
    {
        reference_entry_t e = color_reference_tbl_left[i];
 8001296:	4a2d      	ldr	r2, [pc, #180]	@ (800134c <debug_print_color_reference_table+0xc8>)
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4413      	add	r3, r2
 800129e:	f107 0410 	add.w	r4, r7, #16
 80012a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012a8:	7dbb      	ldrb	r3, [r7, #22]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff9e 	bl	80011ec <color_to_string>
 80012b0:	4601      	mov	r1, r0
                    i, color_to_string(e.color),
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012b2:	8a3b      	ldrh	r3, [r7, #16]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012b4:	461d      	mov	r5, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012b6:	8a7b      	ldrh	r3, [r7, #18]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012b8:	4618      	mov	r0, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012ba:	8abb      	ldrh	r3, [r7, #20]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012bc:	461c      	mov	r4, r3
 80012be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012c6:	9401      	str	r4, [sp, #4]
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	462b      	mov	r3, r5
 80012cc:	460a      	mov	r2, r1
 80012ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <debug_print_color_reference_table+0xcc>)
 80012d2:	f005 fb31 	bl	8006938 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	3301      	adds	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
 80012dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012de:	2b0b      	cmp	r3, #11
 80012e0:	ddd9      	ble.n	8001296 <debug_print_color_reference_table+0x12>
    }

    uart_printf("=== RIGHT COLOR REFERENCE TABLE ===\r\n");
 80012e2:	481c      	ldr	r0, [pc, #112]	@ (8001354 <debug_print_color_reference_table+0xd0>)
 80012e4:	f005 fb28 	bl	8006938 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
 80012ec:	e021      	b.n	8001332 <debug_print_color_reference_table+0xae>
    {
        reference_entry_t e = color_reference_tbl_right[i];
 80012ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001358 <debug_print_color_reference_table+0xd4>)
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	463c      	mov	r4, r7
 80012f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff73 	bl	80011ec <color_to_string>
 8001306:	4601      	mov	r1, r0
                    i, color_to_string(e.color),
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 8001308:	883b      	ldrh	r3, [r7, #0]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 800130a:	461d      	mov	r5, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 800130c:	887b      	ldrh	r3, [r7, #2]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 800130e:	4618      	mov	r0, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 8001310:	88bb      	ldrh	r3, [r7, #4]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 8001312:	461c      	mov	r4, r3
 8001314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800131c:	9401      	str	r4, [sp, #4]
 800131e:	9000      	str	r0, [sp, #0]
 8001320:	462b      	mov	r3, r5
 8001322:	460a      	mov	r2, r1
 8001324:	6a39      	ldr	r1, [r7, #32]
 8001326:	480a      	ldr	r0, [pc, #40]	@ (8001350 <debug_print_color_reference_table+0xcc>)
 8001328:	f005 fb06 	bl	8006938 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	3301      	adds	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2b0b      	cmp	r3, #11
 8001336:	ddda      	ble.n	80012ee <debug_print_color_reference_table+0x6a>
    }
    uart_printf("=== BRIGHTNESS OFFSET TABLE ===\r\n");
 8001338:	4808      	ldr	r0, [pc, #32]	@ (800135c <debug_print_color_reference_table+0xd8>)
 800133a:	f005 fafd 	bl	8006938 <uart_printf>
//    uart_printf("offset_black: %d | offset_white: %d\r\n", offset_black, offset_white);
//	uart_printf("offset_aver: %d\r\n", offset_average);
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bdb0      	pop	{r4, r5, r7, pc}
 8001346:	bf00      	nop
 8001348:	08009908 	.word	0x08009908
 800134c:	200002b8 	.word	0x200002b8
 8001350:	08009930 	.word	0x08009930
 8001354:	08009968 	.word	0x08009968
 8001358:	20000378 	.word	0x20000378
 800135c:	08009990 	.word	0x08009990

08001360 <calculate_brightness>:

uint32_t calculate_brightness(uint16_t r, uint16_t g, uint16_t b)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
 800136a:	460b      	mov	r3, r1
 800136c:	80bb      	strh	r3, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	807b      	strh	r3, [r7, #2]
//    return 0.2126f * r + 0.7152f * g + 0.0722f * b;

    return (218 * r + 732 * g + 74 * b) >> 10;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	22da      	movs	r2, #218	@ 0xda
 8001376:	fb03 f202 	mul.w	r2, r3, r2
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	441a      	add	r2, r3
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	214a      	movs	r1, #74	@ 0x4a
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	4413      	add	r3, r2
 8001390:	129b      	asrs	r3, r3, #10
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <delay_ms>:




void delay_ms(uint32_t ms)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 ff06 	bl	80021b8 <HAL_Delay>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <input_exti_triggered>:




void input_exti_triggered(input_id_t id, bool level)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
	is_pressed[id] = level;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4904      	ldr	r1, [pc, #16]	@ (80013d8 <input_exti_triggered+0x24>)
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	54ca      	strb	r2, [r1, r3]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000438 	.word	0x20000438

080013dc <input_update>:

void input_update(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_INPUTS; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e037      	b.n	8001458 <input_update+0x7c>
	{
		if(is_pressed[i])
 80013e8:	4a20      	ldr	r2, [pc, #128]	@ (800146c <input_update+0x90>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d016      	beq.n	8001422 <input_update+0x46>
		{
			press_time[i]++;
 80013f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001470 <input_update+0x94>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	491c      	ldr	r1, [pc, #112]	@ (8001470 <input_update+0x94>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(press_time[i] == 3000)
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <input_update+0x94>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001412:	4293      	cmp	r3, r2
 8001414:	d11d      	bne.n	8001452 <input_update+0x76>
			{
				long_press_flag[i] = true;
 8001416:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <input_update+0x98>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e017      	b.n	8001452 <input_update+0x76>
			}
		}
		else
		{
			if(press_time[i] > 0 && press_time[i] < 3000)
 8001422:	4a13      	ldr	r2, [pc, #76]	@ (8001470 <input_update+0x94>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <input_update+0x6c>
 800142e:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <input_update+0x94>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800143a:	4293      	cmp	r3, r2
 800143c:	d804      	bhi.n	8001448 <input_update+0x6c>
			{
				short_press_flag[i] = true;
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <input_update+0x9c>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
			}
			press_time[i] = 0;
 8001448:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <input_update+0x94>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2100      	movs	r1, #0
 800144e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_INPUTS; i++)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3301      	adds	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	ddc4      	ble.n	80013e8 <input_update+0xc>
		}
	}
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20000438 	.word	0x20000438
 8001470:	20000440 	.word	0x20000440
 8001474:	20000464 	.word	0x20000464
 8001478:	2000045c 	.word	0x2000045c

0800147c <input_is_short_pressed>:

bool input_is_short_pressed(input_id_t id)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	bool ret = short_press_flag[id];
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <input_is_short_pressed+0x28>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	73fb      	strb	r3, [r7, #15]
	short_press_flag[id] = false;
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <input_is_short_pressed+0x28>)
 8001492:	2100      	movs	r1, #0
 8001494:	54d1      	strb	r1, [r2, r3]
	return ret;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	2000045c 	.word	0x2000045c

080014a8 <input_is_long_pressed>:

bool input_is_long_pressed(input_id_t id)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	bool ret = long_press_flag[id];
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <input_is_long_pressed+0x28>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	73fb      	strb	r3, [r7, #15]
	long_press_flag[id] = false;
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <input_is_long_pressed+0x28>)
 80014be:	2100      	movs	r1, #0
 80014c0:	54d1      	strb	r1, [r2, r3]
	return ret;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	20000464 	.word	0x20000464

080014d4 <ir_read_adc>:

extern ADC_HandleTypeDef hadc1;


uint16_t ir_read_adc(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80014da:	480a      	ldr	r0, [pc, #40]	@ (8001504 <ir_read_adc+0x30>)
 80014dc:	f001 f9f2 	bl	80028c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	4807      	ldr	r0, [pc, #28]	@ (8001504 <ir_read_adc+0x30>)
 80014e6:	f001 fa74 	bl	80029d2 <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue(&hadc1);
 80014ea:	4806      	ldr	r0, [pc, #24]	@ (8001504 <ir_read_adc+0x30>)
 80014ec:	f001 fafe 	bl	8002aec <HAL_ADC_GetValue>
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80014f4:	4803      	ldr	r0, [pc, #12]	@ (8001504 <ir_read_adc+0x30>)
 80014f6:	f001 fa39 	bl	800296c <HAL_ADC_Stop>
	return val; // 0~4095
 80014fa:	88fb      	ldrh	r3, [r7, #6]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000046c 	.word	0x2000046c

08001508 <ir_is_black>:

uint8_t ir_is_black(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    return (ir_read_adc() <= IR_THRESHOLD) ? 1 : 0;
 800150c:	f7ff ffe2 	bl	80014d4 <ir_read_adc>
 8001510:	4603      	mov	r3, r0
 8001512:	2b1e      	cmp	r3, #30
 8001514:	bf94      	ite	ls
 8001516:	2301      	movls	r3, #1
 8001518:	2300      	movhi	r3, #0
 800151a:	b2db      	uxtb	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}

08001520 <led_init>:
};



void led_init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	led_on(_DEF_CH_1);
 8001524:	2000      	movs	r0, #0
 8001526:	f000 f803 	bl	8001530 <led_on>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <led_on>:

void led_on(uint8_t ch)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d814      	bhi.n	800156a <led_on+0x3a>
		return;

	switch (ch)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d112      	bne.n	800156c <led_on+0x3c>
	{
		case _DEF_CH_1:
			HAL_GPIO_WritePin(led[ch].port, led[ch].pin, led[ch].on_state);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <led_on+0x44>)
 800154a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <led_on+0x44>)
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	8899      	ldrh	r1, [r3, #4]
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <led_on+0x44>)
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	799b      	ldrb	r3, [r3, #6]
 8001562:	461a      	mov	r2, r3
 8001564:	f002 fc94 	bl	8003e90 <HAL_GPIO_WritePin>
			break;
 8001568:	e000      	b.n	800156c <led_on+0x3c>
		return;
 800156a:	bf00      	nop
	}
}
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08009a38 	.word	0x08009a38

08001578 <rgb_init>:
		[COLOR_GRAY]        = { 128, 128, 128 }
};


void rgb_init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RGB_CH1_R | RGB_CH1_G | RGB_CH1_B, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2170      	movs	r1, #112	@ 0x70
 8001580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001584:	f002 fc84 	bl	8003e90 <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <rgb_set_color>:

void rgb_set_color(color_t color)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
	if(color >= COLOR_COUNT)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	d81a      	bhi.n	80015d2 <rgb_set_color+0x46>
		return;

	rgb_set_pwm(led_map[color].r, led_map[color].g, led_map[color].b);
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	490f      	ldr	r1, [pc, #60]	@ (80015dc <rgb_set_color+0x50>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	7818      	ldrb	r0, [r3, #0]
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	490b      	ldr	r1, [pc, #44]	@ (80015dc <rgb_set_color+0x50>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	3301      	adds	r3, #1
 80015b8:	7819      	ldrb	r1, [r3, #0]
 80015ba:	79fa      	ldrb	r2, [r7, #7]
 80015bc:	4c07      	ldr	r4, [pc, #28]	@ (80015dc <rgb_set_color+0x50>)
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	4423      	add	r3, r4
 80015c6:	3302      	adds	r3, #2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f000 f808 	bl	80015e0 <rgb_set_pwm>
 80015d0:	e000      	b.n	80015d4 <rgb_set_color+0x48>
		return;
 80015d2:	bf00      	nop
}
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	bf00      	nop
 80015dc:	08009a50 	.word	0x08009a50

080015e0 <rgb_set_pwm>:

void rgb_set_pwm(uint8_t r, uint8_t g, uint8_t b)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	460b      	mov	r3, r1
 80015ec:	71bb      	strb	r3, [r7, #6]
 80015ee:	4613      	mov	r3, r2
 80015f0:	717b      	strb	r3, [r7, #5]
	static uint8_t pwm_period = 0;

	if(++pwm_period > 255)
 80015f2:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <rgb_set_pwm+0xa4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <rgb_set_pwm+0xa4>)
 80015fc:	701a      	strb	r2, [r3, #0]
		pwm_period = 0;

	if(pwm_period > 255 - r)
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <rgb_set_pwm+0xa4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800160a:	429a      	cmp	r2, r3
 800160c:	dd06      	ble.n	800161c <rgb_set_pwm+0x3c>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_R, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2120      	movs	r1, #32
 8001612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001616:	f002 fc3b 	bl	8003e90 <HAL_GPIO_WritePin>
 800161a:	e005      	b.n	8001628 <rgb_set_pwm+0x48>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_R, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2120      	movs	r1, #32
 8001620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001624:	f002 fc34 	bl	8003e90 <HAL_GPIO_WritePin>
	}

	if(pwm_period > 255 - g)
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <rgb_set_pwm+0xa4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	79bb      	ldrb	r3, [r7, #6]
 8001630:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001634:	429a      	cmp	r2, r3
 8001636:	dd06      	ble.n	8001646 <rgb_set_pwm+0x66>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_G, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001640:	f002 fc26 	bl	8003e90 <HAL_GPIO_WritePin>
 8001644:	e005      	b.n	8001652 <rgb_set_pwm+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_G, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164e:	f002 fc1f 	bl	8003e90 <HAL_GPIO_WritePin>
	}

	if(pwm_period > 255 - b)
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <rgb_set_pwm+0xa4>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800165e:	429a      	cmp	r2, r3
 8001660:	dd06      	ble.n	8001670 <rgb_set_pwm+0x90>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2110      	movs	r1, #16
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f002 fc11 	bl	8003e90 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_SET);
	}
}
 800166e:	e005      	b.n	800167c <rgb_set_pwm+0x9c>
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2110      	movs	r1, #16
 8001674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001678:	f002 fc0a 	bl	8003e90 <HAL_GPIO_WritePin>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000046b 	.word	0x2000046b

08001688 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001694:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4313      	orrs	r3, r2
 800169e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ac:	68fb      	ldr	r3, [r7, #12]
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f000 fcf5 	bl	80020ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 f812 	bl	80016ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 f9a1 	bl	8001a0c <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ca:	f000 f8c7 	bl	800185c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016ce:	f000 f951 	bl	8001974 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80016d2:	f000 f903 	bl	80018dc <MX_TIM16_Init>
  MX_TIM17_Init();
 80016d6:	f000 f927 	bl	8001928 <MX_TIM17_Init>
  MX_ADC1_Init();
 80016da:	f000 f85b 	bl	8001794 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 80016de:	f7ff fa3b 	bl	8000b58 <ap_init>
  ap_main();
 80016e2:	f7ff fa55 	bl	8000b90 <ap_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016e6:	bf00      	nop
 80016e8:	e7fd      	b.n	80016e6 <main+0x2c>

080016ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b09a      	sub	sp, #104	@ 0x68
 80016ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	2248      	movs	r2, #72	@ 0x48
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 ff61 	bl	80075c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001710:	2303      	movs	r3, #3
 8001712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001720:	2340      	movs	r3, #64	@ 0x40
 8001722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001724:	2302      	movs	r3, #2
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001728:	2303      	movs	r3, #3
 800172a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800172c:	2310      	movs	r3, #16
 800172e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001730:	2308      	movs	r3, #8
 8001732:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001738:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800173e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001744:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	4618      	mov	r0, r3
 800174c:	f003 f87c 	bl	8004848 <HAL_RCC_OscConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001756:	f000 f9af 	bl	8001ab8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800175a:	236f      	movs	r3, #111	@ 0x6f
 800175c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175e:	2303      	movs	r3, #3
 8001760:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2103      	movs	r1, #3
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fbce 	bl	8004f1c <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001786:	f000 f997 	bl	8001ab8 <Error_Handler>
  }
}
 800178a:	bf00      	nop
 800178c:	3768      	adds	r7, #104	@ 0x68
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179a:	463b      	mov	r3, r7
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017aa:	4b29      	ldr	r3, [pc, #164]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017ac:	4a29      	ldr	r2, [pc, #164]	@ (8001854 <MX_ADC1_Init+0xc0>)
 80017ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017c2:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017ca:	2204      	movs	r2, #4
 80017cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017dc:	2201      	movs	r2, #1
 80017de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e8:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_ADC1_Init+0xbc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_ADC1_Init+0xbc>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800180a:	4811      	ldr	r0, [pc, #68]	@ (8001850 <MX_ADC1_Init+0xbc>)
 800180c:	f000 ff0e 	bl	800262c <HAL_ADC_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001816:	f000 f94f 	bl	8001ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800181a:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <MX_ADC1_Init+0xc4>)
 800181c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800181e:	2306      	movs	r3, #6
 8001820:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001822:	2305      	movs	r3, #5
 8001824:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001826:	237f      	movs	r3, #127	@ 0x7f
 8001828:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800182a:	2304      	movs	r3, #4
 800182c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	@ (8001850 <MX_ADC1_Init+0xbc>)
 8001838:	f001 f966 	bl	8002b08 <HAL_ADC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001842:	f000 f939 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000046c 	.word	0x2000046c
 8001854:	50040000 	.word	0x50040000
 8001858:	32601000 	.word	0x32601000

0800185c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001862:	4a1c      	ldr	r2, [pc, #112]	@ (80018d4 <MX_I2C1_Init+0x78>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001868:	4a1b      	ldr	r2, [pc, #108]	@ (80018d8 <MX_I2C1_Init+0x7c>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <MX_I2C1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001874:	2201      	movs	r2, #1
 8001876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <MX_I2C1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MX_I2C1_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001896:	480e      	ldr	r0, [pc, #56]	@ (80018d0 <MX_I2C1_Init+0x74>)
 8001898:	f002 fb2a 	bl	8003ef0 <HAL_I2C_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018a2:	f000 f909 	bl	8001ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4809      	ldr	r0, [pc, #36]	@ (80018d0 <MX_I2C1_Init+0x74>)
 80018aa:	f002 fbbc 	bl	8004026 <HAL_I2CEx_ConfigAnalogFilter>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018b4:	f000 f900 	bl	8001ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <MX_I2C1_Init+0x74>)
 80018bc:	f002 fbfe 	bl	80040bc <HAL_I2CEx_ConfigDigitalFilter>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018c6:	f000 f8f7 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200004d0 	.word	0x200004d0
 80018d4:	40005400 	.word	0x40005400
 80018d8:	10b17db5 	.word	0x10b17db5

080018dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_TIM16_Init+0x44>)
 80018e2:	4a10      	ldr	r2, [pc, #64]	@ (8001924 <MX_TIM16_Init+0x48>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_TIM16_Init+0x44>)
 80018e8:	223f      	movs	r2, #63	@ 0x3f
 80018ea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <MX_TIM16_Init+0x44>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <MX_TIM16_Init+0x44>)
 80018f4:	2209      	movs	r2, #9
 80018f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <MX_TIM16_Init+0x44>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <MX_TIM16_Init+0x44>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <MX_TIM16_Init+0x44>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_TIM16_Init+0x44>)
 800190c:	f003 ff4f 	bl	80057ae <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001916:	f000 f8cf 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000524 	.word	0x20000524
 8001924:	40014400 	.word	0x40014400

08001928 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <MX_TIM17_Init+0x44>)
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <MX_TIM17_Init+0x48>)
 8001930:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <MX_TIM17_Init+0x44>)
 8001934:	223f      	movs	r2, #63	@ 0x3f
 8001936:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <MX_TIM17_Init+0x44>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <MX_TIM17_Init+0x44>)
 8001940:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001944:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <MX_TIM17_Init+0x44>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800194c:	4b07      	ldr	r3, [pc, #28]	@ (800196c <MX_TIM17_Init+0x44>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <MX_TIM17_Init+0x44>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	@ (800196c <MX_TIM17_Init+0x44>)
 800195a:	f003 ff28 	bl	80057ae <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001964:	f000 f8a8 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000570 	.word	0x20000570
 8001970:	40014800 	.word	0x40014800

08001974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001978:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 800197a:	4a23      	ldr	r2, [pc, #140]	@ (8001a08 <MX_USART1_UART_Init+0x94>)
 800197c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800197e:	4b21      	ldr	r3, [pc, #132]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b17      	ldr	r3, [pc, #92]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019aa:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019bc:	4811      	ldr	r0, [pc, #68]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019be:	f004 f96d 	bl	8005c9c <HAL_UART_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019c8:	f000 f876 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019cc:	2100      	movs	r1, #0
 80019ce:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019d0:	f004 fdd6 	bl	8006580 <HAL_UARTEx_SetTxFifoThreshold>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019da:	f000 f86d 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019de:	2100      	movs	r1, #0
 80019e0:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019e2:	f004 fe0b 	bl	80065fc <HAL_UARTEx_SetRxFifoThreshold>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019ec:	f000 f864 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	@ (8001a04 <MX_USART1_UART_Init+0x90>)
 80019f2:	f004 fd8c 	bl	800650e <HAL_UARTEx_DisableFifoMode>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019fc:	f000 f85c 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200005bc 	.word	0x200005bc
 8001a08:	40013800 	.word	0x40013800

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	2002      	movs	r0, #2
 8001a22:	f7ff fe31 	bl	8001688 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fe2e 	bl	8001688 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	217f      	movs	r1, #127	@ 0x7f
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f002 fa2c 	bl	8003e90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2106      	movs	r1, #6
 8001a3c:	481d      	ldr	r0, [pc, #116]	@ (8001ab4 <MX_GPIO_Init+0xa8>)
 8001a3e:	f002 fa27 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	21f0      	movs	r1, #240	@ 0xf0
 8001a46:	481b      	ldr	r0, [pc, #108]	@ (8001ab4 <MX_GPIO_Init+0xa8>)
 8001a48:	f002 fa22 	bl	8003e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a4c:	237f      	movs	r3, #127	@ 0x7f
 8001a4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a64:	f002 f894 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001a68:	23f6      	movs	r3, #246	@ 0xf6
 8001a6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <MX_GPIO_Init+0xa8>)
 8001a7e:	f002 f887 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a82:	2301      	movs	r3, #1
 8001a84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a86:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001a8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <MX_GPIO_Init+0xa8>)
 8001a96:	f002 f87b 	bl	8003b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2006      	movs	r0, #6
 8001aa0:	f001 fe69 	bl	8003776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aa4:	2006      	movs	r0, #6
 8001aa6:	f001 fe80 	bl	80037aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	48000400 	.word	0x48000400

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <Error_Handler+0x8>

08001ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b085      	sub	sp, #20
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4013      	ands	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b090      	sub	sp, #64	@ 0x40
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2224      	movs	r2, #36	@ 0x24
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f005 fd19 	bl	80075c0 <memset>
  if(hadc->Instance==ADC1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <HAL_ADC_MspInit+0x80>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d123      	bne.n	8001be0 <HAL_ADC_MspInit+0x78>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001b9e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001ba2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fd25 	bl	80055f8 <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001bb4:	f7ff ff80 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bbc:	f7ff ff82 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff ff7f 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bc6:	2380      	movs	r3, #128	@ 0x80
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bdc:	f001 ffd8 	bl	8003b90 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001be0:	bf00      	nop
 8001be2:	3740      	adds	r7, #64	@ 0x40
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	50040000 	.word	0x50040000

08001bec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b090      	sub	sp, #64	@ 0x40
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	2224      	movs	r2, #36	@ 0x24
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 fcd7 	bl	80075c0 <memset>
  if(hi2c->Instance==I2C1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a17      	ldr	r2, [pc, #92]	@ (8001c74 <HAL_I2C_MspInit+0x88>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d126      	bne.n	8001c6a <HAL_I2C_MspInit+0x7e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c20:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001c24:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fce4 	bl	80055f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c36:	f7ff ff3f 	bl	8001ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7ff ff42 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c40:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c46:	2312      	movs	r3, #18
 8001c48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c52:	2304      	movs	r3, #4
 8001c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <HAL_I2C_MspInit+0x8c>)
 8001c5e:	f001 ff97 	bl	8003b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c62:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001c66:	f7ff ff46 	bl	8001af6 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3740      	adds	r7, #64	@ 0x40
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40005400 	.word	0x40005400
 8001c78:	48000400 	.word	0x48000400

08001c7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_TIM_Base_MspInit+0x58>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c8e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c92:	f7ff ff49 	bl	8001b28 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2019      	movs	r0, #25
 8001c9c:	f001 fd6b 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ca0:	2019      	movs	r0, #25
 8001ca2:	f001 fd82 	bl	80037aa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001ca6:	e010      	b.n	8001cca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10b      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cb2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001cb6:	f7ff ff37 	bl	8001b28 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201a      	movs	r0, #26
 8001cc0:	f001 fd59 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cc4:	201a      	movs	r0, #26
 8001cc6:	f001 fd70 	bl	80037aa <HAL_NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40014400 	.word	0x40014400
 8001cd8:	40014800 	.word	0x40014800

08001cdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b090      	sub	sp, #64	@ 0x40
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	2224      	movs	r2, #36	@ 0x24
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f005 fc5f 	bl	80075c0 <memset>
  if(huart->Instance==USART1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_UART_MspInit+0x88>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d126      	bne.n	8001d5a <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fc6d 	bl	80055f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d24:	f7ff fec8 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d28:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d2c:	f7ff fefc 	bl	8001b28 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff fec7 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d56:	f001 ff1b 	bl	8003b90 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3740      	adds	r7, #64	@ 0x40
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40013800 	.word	0x40013800

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 f9cf 	bl	8002160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f002 f878 	bl	8003ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001dd8:	4803      	ldr	r0, [pc, #12]	@ (8001de8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001dda:	f003 fd8d 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  ap_tim16_callback();
 8001dde:	f7ff f83b 	bl	8000e58 <ap_tim16_callback>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000524 	.word	0x20000524

08001dec <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001df0:	4803      	ldr	r0, [pc, #12]	@ (8001e00 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001df2:	f003 fd81 	bl	80058f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  ap_tim17_callback();
 8001df6:	f7ff f83b 	bl	8000e70 <ap_tim17_callback>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000570 	.word	0x20000570

08001e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_kill>:

int _kill(int pid, int sig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1e:	f005 fc21 	bl	8007664 <__errno>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2216      	movs	r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
  return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_exit>:

void _exit (int status)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffe7 	bl	8001e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e46:	bf00      	nop
 8001e48:	e7fd      	b.n	8001e46 <_exit+0x12>

08001e4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	e00a      	b.n	8001e72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5c:	f3af 8000 	nop.w
 8001e60:	4601      	mov	r1, r0
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	60ba      	str	r2, [r7, #8]
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	dbf0      	blt.n	8001e5c <_read+0x12>
  }

  return len;
 8001e7a:	687b      	ldr	r3, [r7, #4]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e009      	b.n	8001eaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	dbf1      	blt.n	8001e96 <_write+0x12>
  }
  return len;
 8001eb2:	687b      	ldr	r3, [r7, #4]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_close>:

int _close(int file)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_isatty>:

int _isatty(int file)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	@ (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f005 fb86 	bl	8007664 <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20010000 	.word	0x20010000
 8001f84:	00000400 	.word	0x00000400
 8001f88:	20000650 	.word	0x20000650
 8001f8c:	200007c0 	.word	0x200007c0

08001f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001f94:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <SystemInit+0x90>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <SystemInit+0x90>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001fbc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <SystemInit+0x94>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fda:	f023 0305 	bic.w	r3, r3, #5
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8002028 <SystemInit+0x98>)
 8001ffc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	faf6fefb 	.word	0xfaf6fefb
 8002028:	22041000 	.word	0x22041000

0800202c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800202c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002030:	3304      	adds	r3, #4

08002032 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002032:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002034:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002036:	d3f9      	bcc.n	800202c <CopyDataInit>
  bx lr
 8002038:	4770      	bx	lr

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800203a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800203c:	3004      	adds	r0, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800203e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>
  bx lr
 8002042:	4770      	bx	lr

08002044 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002044:	480f      	ldr	r0, [pc, #60]	@ (8002084 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002046:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002048:	f7ff ffa2 	bl	8001f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800204c:	480e      	ldr	r0, [pc, #56]	@ (8002088 <LoopForever+0x8>)
 800204e:	490f      	ldr	r1, [pc, #60]	@ (800208c <LoopForever+0xc>)
 8002050:	4a0f      	ldr	r2, [pc, #60]	@ (8002090 <LoopForever+0x10>)
 8002052:	2300      	movs	r3, #0
 8002054:	f7ff ffed 	bl	8002032 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002058:	480e      	ldr	r0, [pc, #56]	@ (8002094 <LoopForever+0x14>)
 800205a:	490f      	ldr	r1, [pc, #60]	@ (8002098 <LoopForever+0x18>)
 800205c:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <LoopForever+0x1c>)
 800205e:	2300      	movs	r3, #0
 8002060:	f7ff ffe7 	bl	8002032 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002064:	480e      	ldr	r0, [pc, #56]	@ (80020a0 <LoopForever+0x20>)
 8002066:	490f      	ldr	r1, [pc, #60]	@ (80020a4 <LoopForever+0x24>)
 8002068:	2300      	movs	r3, #0
 800206a:	f7ff ffe8 	bl	800203e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800206e:	4809      	ldr	r0, [pc, #36]	@ (8002094 <LoopForever+0x14>)
 8002070:	4909      	ldr	r1, [pc, #36]	@ (8002098 <LoopForever+0x18>)
 8002072:	2300      	movs	r3, #0
 8002074:	f7ff ffe3 	bl	800203e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002078:	f005 fafa 	bl	8007670 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800207c:	f7ff fb1d 	bl	80016ba <main>

08002080 <LoopForever>:

LoopForever:
  b LoopForever
 8002080:	e7fe      	b.n	8002080 <LoopForever>
 8002082:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002084:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8002088:	20000008 	.word	0x20000008
 800208c:	2000028c 	.word	0x2000028c
 8002090:	08009ec4 	.word	0x08009ec4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002094:	20030000 	.word	0x20030000
 8002098:	20030000 	.word	0x20030000
 800209c:	0800a148 	.word	0x0800a148
  INIT_BSS _sbss, _ebss
 80020a0:	20000290 	.word	0x20000290
 80020a4:	200007bc 	.word	0x200007bc

080020a8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC1_IRQHandler>
	...

080020ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_Init+0x3c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_Init+0x3c>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c2:	2003      	movs	r0, #3
 80020c4:	f001 fb4c 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c8:	200f      	movs	r0, #15
 80020ca:	f000 f80f 	bl	80020ec <HAL_InitTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	e001      	b.n	80020de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020da:	f7ff fd3e 	bl	8001b5a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020de:	79fb      	ldrb	r3, [r7, #7]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	58004000 	.word	0x58004000

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <HAL_InitTick+0x6c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d024      	beq.n	800214a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002100:	f003 f8b8 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <HAL_InitTick+0x6c>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002110:	fbb3 f3f1 	udiv	r3, r3, r1
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	4618      	mov	r0, r3
 800211a:	f001 fb54 	bl	80037c6 <HAL_SYSTICK_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	d809      	bhi.n	800213e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212a:	2200      	movs	r2, #0
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	f04f 30ff 	mov.w	r0, #4294967295
 8002132:	f001 fb20 	bl	8003776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_InitTick+0x70>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e007      	b.n	800214e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e004      	b.n	800214e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000044 	.word	0x20000044
 800215c:	20000040 	.word	0x20000040

08002160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_IncTick+0x20>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_IncTick+0x24>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_IncTick+0x24>)
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000044 	.word	0x20000044
 8002184:	20000654 	.word	0x20000654

08002188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_GetTick+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000654 	.word	0x20000654

080021a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTickPrio+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000040 	.word	0x20000040

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffe2 	bl	8002188 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffd2 	bl	8002188 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000044 	.word	0x20000044

08002200 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3360      	adds	r3, #96	@ 0x60
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <LL_ADC_SetOffset+0x44>)
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	4313      	orrs	r3, r2
 8002298:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	03fff000 	.word	0x03fff000

080022b0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3360      	adds	r3, #96	@ 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3360      	adds	r3, #96	@ 0x60
 80022ec:	461a      	mov	r2, r3
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	431a      	orrs	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800232a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3330      	adds	r3, #48	@ 0x30
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	4413      	add	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	211f      	movs	r1, #31
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 011f 	and.w	r1, r3, #31
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	431a      	orrs	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3314      	adds	r3, #20
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0e5b      	lsrs	r3, r3, #25
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0d1b      	lsrs	r3, r3, #20
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	2107      	movs	r1, #7
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0d1b      	lsrs	r3, r3, #20
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	431a      	orrs	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80023da:	bf00      	nop
 80023dc:	371c      	adds	r7, #28
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0318 	and.w	r3, r3, #24
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <LL_ADC_SetChannelSingleDiff+0x44>)
 800240c:	40d9      	lsrs	r1, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	400b      	ands	r3, r1
 8002412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	0007ffff 	.word	0x0007ffff

08002430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6093      	str	r3, [r2, #8]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002468:	d101      	bne.n	800246e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800248c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002490:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024b8:	d101      	bne.n	80024be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002504:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002508:	f043 0202 	orr.w	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <LL_ADC_IsEnabled+0x18>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <LL_ADC_IsEnabled+0x1a>
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d101      	bne.n	800255a <LL_ADC_IsDisableOngoing+0x18>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_IsDisableOngoing+0x1a>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a4:	f043 0210 	orr.w	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d101      	bne.n	80025d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b08      	cmp	r3, #8
 8002618:	d101      	bne.n	800261e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800263c:	2300      	movs	r3, #0
 800263e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e12e      	b.n	80028a8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fa85 	bl	8001b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff feef 	bl	8002454 <LL_ADC_IsDeepPowerDownEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fed5 	bl	8002430 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff0a 	bl	80024a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff feee 	bl	800247c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a0:	4b83      	ldr	r3, [pc, #524]	@ (80028b0 <HAL_ADC_Init+0x284>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	4a83      	ldr	r2, [pc, #524]	@ (80028b4 <HAL_ADC_Init+0x288>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026b4:	e002      	b.n	80026bc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f9      	bne.n	80026b6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff feec 	bl	80024a4 <LL_ADC_IsInternalRegulatorEnabled>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff60 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80026f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80c7 	bne.w	8002896 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 80c3 	bne.w	8002896 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002718:	f043 0202 	orr.w	r2, r3, #2
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fef9 	bl	800251c <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10b      	bne.n	8002748 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002730:	4861      	ldr	r0, [pc, #388]	@ (80028b8 <HAL_ADC_Init+0x28c>)
 8002732:	f7ff fef3 	bl	800251c <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4619      	mov	r1, r3
 8002742:	485e      	ldr	r0, [pc, #376]	@ (80028bc <HAL_ADC_Init+0x290>)
 8002744:	f7ff fd5c 	bl	8002200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7e5b      	ldrb	r3, [r3, #25]
 800274c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002752:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002758:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800275e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002766:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002768:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d106      	bne.n	8002788 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	3b01      	subs	r3, #1
 8002780:	045b      	lsls	r3, r3, #17
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d009      	beq.n	80027a4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b45      	ldr	r3, [pc, #276]	@ (80028c0 <HAL_ADC_Init+0x294>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fefb 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80027c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff1c 	bl	8002606 <LL_ADC_INJ_IsConversionOngoing>
 80027ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d13d      	bne.n	8002852 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d13a      	bne.n	8002852 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027f8:	f023 0302 	bic.w	r3, r3, #2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	69b9      	ldr	r1, [r7, #24]
 8002802:	430b      	orrs	r3, r1
 8002804:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800280c:	2b01      	cmp	r3, #1
 800280e:	d118      	bne.n	8002842 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002832:	430a      	orrs	r2, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	611a      	str	r2, [r3, #16]
 8002840:	e007      	b.n	8002852 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d10c      	bne.n	8002874 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	f023 010f 	bic.w	r1, r3, #15
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	1e5a      	subs	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	631a      	str	r2, [r3, #48]	@ 0x30
 8002872:	e007      	b.n	8002884 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020f 	bic.w	r2, r2, #15
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f023 0303 	bic.w	r3, r3, #3
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
 8002894:	e007      	b.n	80028a6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000003c 	.word	0x2000003c
 80028b4:	053e2d63 	.word	0x053e2d63
 80028b8:	50040000 	.word	0x50040000
 80028bc:	50040300 	.word	0x50040300
 80028c0:	fff0c007 	.word	0xfff0c007

080028c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fe71 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d140      	bne.n	800295e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Start+0x26>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e03c      	b.n	8002964 <HAL_ADC_Start+0xa0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fd8a 	bl	800340c <ADC_Enable>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d128      	bne.n	8002954 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002906:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002922:	d106      	bne.n	8002932 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f023 0206 	bic.w	r2, r3, #6
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002930:	e002      	b.n	8002938 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	221c      	movs	r2, #28
 800293e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fe0b 	bl	8002568 <LL_ADC_REG_StartConversion>
 8002952:	e006      	b.n	8002962 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800295c:	e001      	b.n	8002962 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800295e:	2302      	movs	r3, #2
 8002960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_ADC_Stop+0x16>
 800297e:	2302      	movs	r3, #2
 8002980:	e023      	b.n	80029ca <HAL_ADC_Stop+0x5e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800298a:	2103      	movs	r1, #3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fc81 	bl	8003294 <ADC_ConversionStop>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fdaf 	bl	8003500 <ADC_Disable>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d102      	bne.n	80029ea <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029e4:	2308      	movs	r3, #8
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e010      	b.n	8002a0c <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	f043 0220 	orr.w	r2, r3, #32
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e06d      	b.n	8002ae4 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002a08:	2304      	movs	r3, #4
 8002a0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a0c:	f7ff fbbc 	bl	8002188 <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a12:	e021      	b.n	8002a58 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d01d      	beq.n	8002a58 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a1c:	f7ff fbb4 	bl	8002188 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <HAL_ADC_PollForConversion+0x60>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d112      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a44:	f043 0204 	orr.w	r2, r3, #4
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e045      	b.n	8002ae4 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0d6      	beq.n	8002a14 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fc4b 	bl	8002312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01c      	beq.n	8002abc <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e5b      	ldrb	r3, [r3, #25]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d111      	bne.n	8002abc <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d104      	bne.n	8002acc <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e00a      	b.n	8002ae2 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	220c      	movs	r2, #12
 8002ae0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x22>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e39f      	b.n	800326a <HAL_ADC_ConfigChannel+0x762>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fd3e 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8384 	bne.w	800324c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f7ff fbf1 	bl	8002338 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fd2c 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8002b60:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fd4c 	bl	8002606 <LL_ADC_INJ_IsConversionOngoing>
 8002b6e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 81a6 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 81a1 	bne.w	8002ec8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f7ff fbfc 	bl	8002390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6919      	ldr	r1, [r3, #16]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bca:	f7ff fb4d 	bl	8002268 <LL_ADC_SetOffset>
 8002bce:	e17b      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fb6a 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10a      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0xf4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fb5f 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	e01e      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x132>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fb54 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x14a>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	e018      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x17c>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e004      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d106      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fb23 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fb07 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x1ba>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fafc 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	e01e      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x1f8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff faf1 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ce0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	e004      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002cf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x210>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	e018      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x242>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e004      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d106      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fac0 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff faa4 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x280>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2102      	movs	r1, #2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fa99 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 021f 	and.w	r2, r3, #31
 8002d86:	e01e      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x2be>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fa8e 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002daa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002dae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e004      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x2d6>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	e016      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x304>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002df0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002df2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002e02:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d106      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fa5f 	bl	80022dc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2103      	movs	r1, #3
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fa43 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10a      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x342>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2103      	movs	r1, #3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fa38 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	e017      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x372>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2103      	movs	r1, #3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fa2d 	bl	80022b0 <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e64:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x38a>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	0e9b      	lsrs	r3, r3, #26
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	e011      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x3ae>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e003      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d106      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2103      	movs	r1, #3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fa0a 	bl	80022dc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fb25 	bl	800251c <LL_ADC_IsEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 81c2 	bne.w	800325e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fa7e 	bl	80023e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a8e      	ldr	r2, [pc, #568]	@ (800312c <HAL_ADC_ConfigChannel+0x624>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	f040 8130 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x418>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	2b09      	cmp	r3, #9
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e019      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x44c>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f30:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002f3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	bf94      	ite	ls
 8002f4e:	2301      	movls	r3, #1
 8002f50:	2300      	movhi	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d079      	beq.n	800304c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d107      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x46c>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f72:	e015      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x498>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	069b      	lsls	r3, r3, #26
 8002f9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x4b8>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	e017      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x4e8>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e003      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	ea42 0103 	orr.w	r1, r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x50e>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	3301      	adds	r3, #1
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	051b      	lsls	r3, r3, #20
 8003014:	e018      	b.n	8003048 <HAL_ADC_ConfigChannel+0x540>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800302e:	2320      	movs	r3, #32
 8003030:	e003      	b.n	800303a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	430b      	orrs	r3, r1
 800304a:	e080      	b.n	800314e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x560>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003066:	e015      	b.n	8003094 <HAL_ADC_ConfigChannel+0x58c>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800307a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e003      	b.n	800308c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3301      	adds	r3, #1
 800308e:	069b      	lsls	r3, r3, #26
 8003090:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x5ac>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2101      	movs	r1, #1
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	e017      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x5dc>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	61fb      	str	r3, [r7, #28]
  return result;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	ea42 0103 	orr.w	r1, r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x608>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	3301      	adds	r3, #1
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	3b1e      	subs	r3, #30
 8003108:	051b      	lsls	r3, r3, #20
 800310a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800310e:	e01d      	b.n	800314c <HAL_ADC_ConfigChannel+0x644>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	613b      	str	r3, [r7, #16]
  return result;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	e005      	b.n	8003138 <HAL_ADC_ConfigChannel+0x630>
 800312c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	3b1e      	subs	r3, #30
 8003146:	051b      	lsls	r3, r3, #20
 8003148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800314c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003152:	4619      	mov	r1, r3
 8003154:	f7ff f91c 	bl	8002390 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b45      	ldr	r3, [pc, #276]	@ (8003274 <HAL_ADC_ConfigChannel+0x76c>)
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d07c      	beq.n	800325e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003164:	4844      	ldr	r0, [pc, #272]	@ (8003278 <HAL_ADC_ConfigChannel+0x770>)
 8003166:	f7ff f871 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 800316a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316e:	4843      	ldr	r0, [pc, #268]	@ (800327c <HAL_ADC_ConfigChannel+0x774>)
 8003170:	f7ff f9d4 	bl	800251c <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d15e      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <HAL_ADC_ConfigChannel+0x778>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d127      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x6cc>
 8003184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d121      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a39      	ldr	r2, [pc, #228]	@ (800327c <HAL_ADC_ConfigChannel+0x774>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d161      	bne.n	800325e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800319a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800319e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031a2:	4619      	mov	r1, r3
 80031a4:	4834      	ldr	r0, [pc, #208]	@ (8003278 <HAL_ADC_ConfigChannel+0x770>)
 80031a6:	f7ff f83e 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031aa:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <HAL_ADC_ConfigChannel+0x77c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	4a35      	ldr	r2, [pc, #212]	@ (8003288 <HAL_ADC_ConfigChannel+0x780>)
 80031b2:	fba2 2303 	umull	r2, r3, r2, r3
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d2:	e044      	b.n	800325e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <HAL_ADC_ConfigChannel+0x784>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d113      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x6fe>
 80031de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a23      	ldr	r2, [pc, #140]	@ (800327c <HAL_ADC_ConfigChannel+0x774>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d134      	bne.n	800325e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031fc:	4619      	mov	r1, r3
 80031fe:	481e      	ldr	r0, [pc, #120]	@ (8003278 <HAL_ADC_ConfigChannel+0x770>)
 8003200:	f7ff f811 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003204:	e02b      	b.n	800325e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	@ (8003290 <HAL_ADC_ConfigChannel+0x788>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d126      	bne.n	800325e <HAL_ADC_ConfigChannel+0x756>
 8003210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d120      	bne.n	800325e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a16      	ldr	r2, [pc, #88]	@ (800327c <HAL_ADC_ConfigChannel+0x774>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d11b      	bne.n	800325e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800322a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800322e:	4619      	mov	r1, r3
 8003230:	4811      	ldr	r0, [pc, #68]	@ (8003278 <HAL_ADC_ConfigChannel+0x770>)
 8003232:	f7fe fff8 	bl	8002226 <LL_ADC_SetCommonPathInternalCh>
 8003236:	e012      	b.n	800325e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800324a:	e008      	b.n	800325e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003266:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800326a:	4618      	mov	r0, r3
 800326c:	37d8      	adds	r7, #216	@ 0xd8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	80080000 	.word	0x80080000
 8003278:	50040300 	.word	0x50040300
 800327c:	50040000 	.word	0x50040000
 8003280:	c7520000 	.word	0xc7520000
 8003284:	2000003c 	.word	0x2000003c
 8003288:	053e2d63 	.word	0x053e2d63
 800328c:	cb840000 	.word	0xcb840000
 8003290:	80000001 	.word	0x80000001

08003294 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff f984 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 80032b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f9a5 	bl	8002606 <LL_ADC_INJ_IsConversionOngoing>
 80032bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8098 	beq.w	80033fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d02a      	beq.n	8003330 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7e5b      	ldrb	r3, [r3, #25]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d126      	bne.n	8003330 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7e1b      	ldrb	r3, [r3, #24]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d122      	bne.n	8003330 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80032ee:	e014      	b.n	800331a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4a45      	ldr	r2, [pc, #276]	@ (8003408 <ADC_ConversionStop+0x174>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d90d      	bls.n	8003314 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f043 0210 	orr.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e074      	b.n	80033fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003324:	2b40      	cmp	r3, #64	@ 0x40
 8003326:	d1e3      	bne.n	80032f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2240      	movs	r2, #64	@ 0x40
 800332e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d014      	beq.n	8003360 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f93c 	bl	80025b8 <LL_ADC_REG_IsConversionOngoing>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f8f9 	bl	8002542 <LL_ADC_IsDisableOngoing>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f918 	bl	8002590 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d014      	beq.n	8003390 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff f94b 	bl	8002606 <LL_ADC_INJ_IsConversionOngoing>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00c      	beq.n	8003390 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff f8e1 	bl	8002542 <LL_ADC_IsDisableOngoing>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff f927 	bl	80025de <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d005      	beq.n	80033a2 <ADC_ConversionStop+0x10e>
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d105      	bne.n	80033a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800339c:	230c      	movs	r3, #12
 800339e:	617b      	str	r3, [r7, #20]
        break;
 80033a0:	e005      	b.n	80033ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80033a2:	2308      	movs	r3, #8
 80033a4:	617b      	str	r3, [r7, #20]
        break;
 80033a6:	e002      	b.n	80033ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80033a8:	2304      	movs	r3, #4
 80033aa:	617b      	str	r3, [r7, #20]
        break;
 80033ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80033ae:	f7fe feeb 	bl	8002188 <HAL_GetTick>
 80033b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033b4:	e01b      	b.n	80033ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80033b6:	f7fe fee7 	bl	8002188 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d914      	bls.n	80033ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d6:	f043 0210 	orr.w	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1dc      	bne.n	80033b6 <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	a33fffff 	.word	0xa33fffff

0800340c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003414:	2300      	movs	r3, #0
 8003416:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff f87d 	bl	800251c <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d15e      	bne.n	80034e6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <ADC_Enable+0xe4>)
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	f043 0210 	orr.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e04a      	b.n	80034e8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f838 	bl	80024cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800345c:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <ADC_Enable+0xe8>)
 800345e:	f7fe fef5 	bl	800224c <LL_ADC_GetCommonPathInternalCh>
 8003462:	4603      	mov	r3, r0
 8003464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00f      	beq.n	800348c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800346c:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <ADC_Enable+0xec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	4a22      	ldr	r2, [pc, #136]	@ (80034fc <ADC_Enable+0xf0>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800347e:	e002      	b.n	8003486 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800348c:	f7fe fe7c 	bl	8002188 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003492:	e021      	b.n	80034d8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f83f 	bl	800251c <LL_ADC_IsEnabled>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f80f 	bl	80024cc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034ae:	f7fe fe6b 	bl	8002188 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d90d      	bls.n	80034d8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e007      	b.n	80034e8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d1d6      	bne.n	8003494 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	8000003f 	.word	0x8000003f
 80034f4:	50040300 	.word	0x50040300
 80034f8:	2000003c 	.word	0x2000003c
 80034fc:	053e2d63 	.word	0x053e2d63

08003500 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff f818 	bl	8002542 <LL_ADC_IsDisableOngoing>
 8003512:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe ffff 	bl	800251c <LL_ADC_IsEnabled>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d047      	beq.n	80035b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d144      	bne.n	80035b4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030d 	and.w	r3, r3, #13
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10c      	bne.n	8003552 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ffd9 	bl	80024f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2203      	movs	r2, #3
 8003548:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800354a:	f7fe fe1d 	bl	8002188 <HAL_GetTick>
 800354e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003550:	e029      	b.n	80035a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e023      	b.n	80035b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800356e:	f7fe fe0b 	bl	8002188 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d914      	bls.n	80035a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	f043 0210 	orr.w	r2, r3, #16
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	f043 0201 	orr.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1dc      	bne.n	800356e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035dc:	4013      	ands	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f2:	4a04      	ldr	r2, [pc, #16]	@ (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60d3      	str	r3, [r2, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <__NVIC_GetPriorityGrouping+0x18>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0307 	and.w	r3, r3, #7
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db0b      	blt.n	800364e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4907      	ldr	r1, [pc, #28]	@ (800365c <__NVIC_EnableIRQ+0x38>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2001      	movs	r0, #1
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e100 	.word	0xe000e100

08003660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	@ (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	@ (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	@ 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
         );
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	@ 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800372c:	d301      	bcc.n	8003732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <SysTick_Config+0x40>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373a:	210f      	movs	r1, #15
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f7ff ff8e 	bl	8003660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <SysTick_Config+0x40>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b04      	ldr	r3, [pc, #16]	@ (800375c <SysTick_Config+0x40>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff29 	bl	80035c0 <__NVIC_SetPriorityGrouping>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003784:	f7ff ff40 	bl	8003608 <__NVIC_GetPriorityGrouping>
 8003788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ff90 	bl	80036b4 <NVIC_EncodePriority>
 8003794:	4602      	mov	r2, r0
 8003796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff5f 	bl	8003660 <__NVIC_SetPriority>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff33 	bl	8003624 <__NVIC_EnableIRQ>
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ffa4 	bl	800371c <SysTick_Config>
 80037d4:	4603      	mov	r3, r0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003860 <HAL_FLASH_Program+0x80>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_FLASH_Program+0x1a>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e02d      	b.n	8003856 <HAL_FLASH_Program+0x76>
 80037fa:	4b19      	ldr	r3, [pc, #100]	@ (8003860 <HAL_FLASH_Program+0x80>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003800:	4b17      	ldr	r3, [pc, #92]	@ (8003860 <HAL_FLASH_Program+0x80>)
 8003802:	2200      	movs	r2, #0
 8003804:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800380a:	f000 f869 	bl	80038e0 <FLASH_WaitForLastOperation>
 800380e:	4603      	mov	r3, r0
 8003810:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11a      	bne.n	800384e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d105      	bne.n	800382a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800381e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003822:	68b8      	ldr	r0, [r7, #8]
 8003824:	f000 f8ca 	bl	80039bc <FLASH_Program_DoubleWord>
 8003828:	e004      	b.n	8003834 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	68b8      	ldr	r0, [r7, #8]
 8003830:	f005 ffa2 	bl	8009778 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003834:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003838:	f000 f852 	bl	80038e0 <FLASH_WaitForLastOperation>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_FLASH_Program+0x84>)
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	4906      	ldr	r1, [pc, #24]	@ (8003864 <HAL_FLASH_Program+0x84>)
 800384a:	4013      	ands	r3, r2
 800384c:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800384e:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <HAL_FLASH_Program+0x80>)
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000658 	.word	0x20000658
 8003864:	58004000 	.word	0x58004000

08003868 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003872:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_FLASH_Unlock+0x38>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	da0b      	bge.n	8003892 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_FLASH_Unlock+0x38>)
 800387c:	4a09      	ldr	r2, [pc, #36]	@ (80038a4 <HAL_FLASH_Unlock+0x3c>)
 800387e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <HAL_FLASH_Unlock+0x38>)
 8003882:	4a09      	ldr	r2, [pc, #36]	@ (80038a8 <HAL_FLASH_Unlock+0x40>)
 8003884:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_FLASH_Unlock+0x38>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da01      	bge.n	8003892 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003892:	79fb      	ldrb	r3, [r7, #7]
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	58004000 	.word	0x58004000
 80038a4:	45670123 	.word	0x45670123
 80038a8:	cdef89ab 	.word	0xcdef89ab

080038ac <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038b6:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_FLASH_Lock+0x30>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4a08      	ldr	r2, [pc, #32]	@ (80038dc <HAL_FLASH_Lock+0x30>)
 80038bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038c0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_FLASH_Lock+0x30>)
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	db01      	blt.n	80038ce <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	58004000 	.word	0x58004000

080038e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7fe fc4e 	bl	8002188 <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80038ee:	e009      	b.n	8003904 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80038f0:	f7fe fc4a 	bl	8002188 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d801      	bhi.n	8003904 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e053      	b.n	80039ac <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003904:	4b2b      	ldr	r3, [pc, #172]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003910:	d0ee      	beq.n	80038f0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8003912:	4b28      	ldr	r3, [pc, #160]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003922:	4b24      	ldr	r3, [pc, #144]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003924:	2201      	movs	r2, #1
 8003926:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003932:	4b20      	ldr	r3, [pc, #128]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003934:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003938:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003940:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003952:	d307      	bcc.n	8003964 <FLASH_WaitForLastOperation+0x84>
 8003954:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800395e:	4915      	ldr	r1, [pc, #84]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	618b      	str	r3, [r1, #24]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <FLASH_WaitForLastOperation+0x98>
 800396e:	4a11      	ldr	r2, [pc, #68]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003976:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800397e:	4a0e      	ldr	r2, [pc, #56]	@ (80039b8 <FLASH_WaitForLastOperation+0xd8>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e011      	b.n	80039ac <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003988:	f7fe fbfe 	bl	8002188 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d801      	bhi.n	800399c <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e007      	b.n	80039ac <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <FLASH_WaitForLastOperation+0xd4>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039a8:	d0ee      	beq.n	8003988 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	58004000 	.word	0x58004000
 80039b8:	20000658 	.word	0x20000658

080039bc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <FLASH_Program_DoubleWord+0x48>)
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003a04 <FLASH_Program_DoubleWord+0x48>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80039da:	f3bf 8f6f 	isb	sy
}
 80039de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80039e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	000a      	movs	r2, r1
 80039ee:	2300      	movs	r3, #0
 80039f0:	68f9      	ldr	r1, [r7, #12]
 80039f2:	3104      	adds	r1, #4
 80039f4:	4613      	mov	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	58004000 	.word	0x58004000

08003a08 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a12:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_FLASHEx_Erase+0x9c>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_FLASHEx_Erase+0x16>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e03d      	b.n	8003a9a <HAL_FLASHEx_Erase+0x92>
 8003a1e:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <HAL_FLASHEx_Erase+0x9c>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a24:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <HAL_FLASHEx_Erase+0x9c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a2e:	f7ff ff57 	bl	80038e0 <FLASH_WaitForLastOperation>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d12a      	bne.n	8003a92 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d124      	bne.n	8003a8e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	e012      	b.n	8003a7a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8003a54:	68b8      	ldr	r0, [r7, #8]
 8003a56:	f000 f827 	bl	8003aa8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a5e:	f7ff ff3f 	bl	80038e0 <FLASH_WaitForLastOperation>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	601a      	str	r2, [r3, #0]
          break;
 8003a72:	e00a      	b.n	8003a8a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4413      	add	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d3e4      	bcc.n	8003a54 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8003a8a:	f000 f86f 	bl	8003b6c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003a8e:	f000 f825 	bl	8003adc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <HAL_FLASHEx_Erase+0x9c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]

  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000658 	.word	0x20000658

08003aa8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003ab0:	4b09      	ldr	r3, [pc, #36]	@ (8003ad8 <FLASH_PageErase+0x30>)
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4313      	orrs	r3, r2
 8003abe:	4a06      	ldr	r2, [pc, #24]	@ (8003ad8 <FLASH_PageErase+0x30>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6153      	str	r3, [r2, #20]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	58004000 	.word	0x58004000

08003adc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8003ae0:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aec:	d117      	bne.n	8003b1e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003aee:	4b1e      	ldr	r3, [pc, #120]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003af4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af8:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003afa:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1a      	ldr	r2, [pc, #104]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b10:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b12:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b1c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8003b1e:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2a:	d117      	bne.n	8003b5c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b36:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a07      	ldr	r2, [pc, #28]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b4e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a04      	ldr	r2, [pc, #16]	@ (8003b68 <FLASH_FlushCaches+0x8c>)
 8003b56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b5a:	6013      	str	r3, [r2, #0]
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	58004000 	.word	0x58004000

08003b6c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <FLASH_AcknowledgePageErase+0x20>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <FLASH_AcknowledgePageErase+0x20>)
 8003b76:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003b7a:	f023 0302 	bic.w	r3, r3, #2
 8003b7e:	6153      	str	r3, [r2, #20]
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	58004000 	.word	0x58004000

08003b90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b9e:	e146      	b.n	8003e2e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8138 	beq.w	8003e28 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d005      	beq.n	8003bd0 <HAL_GPIO_Init+0x40>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d130      	bne.n	8003c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c06:	2201      	movs	r2, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0201 	and.w	r2, r3, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d017      	beq.n	8003c6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d123      	bne.n	8003cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	08da      	lsrs	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3208      	adds	r2, #8
 8003c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	220f      	movs	r2, #15
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	08da      	lsrs	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3208      	adds	r2, #8
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	2203      	movs	r2, #3
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0203 	and.w	r2, r3, #3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8092 	beq.w	8003e28 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d04:	4a51      	ldr	r2, [pc, #324]	@ (8003e4c <HAL_GPIO_Init+0x2bc>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d2e:	d013      	beq.n	8003d58 <HAL_GPIO_Init+0x1c8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a47      	ldr	r2, [pc, #284]	@ (8003e50 <HAL_GPIO_Init+0x2c0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00d      	beq.n	8003d54 <HAL_GPIO_Init+0x1c4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a46      	ldr	r2, [pc, #280]	@ (8003e54 <HAL_GPIO_Init+0x2c4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <HAL_GPIO_Init+0x1c0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a45      	ldr	r2, [pc, #276]	@ (8003e58 <HAL_GPIO_Init+0x2c8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_GPIO_Init+0x1bc>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	e006      	b.n	8003d5a <HAL_GPIO_Init+0x1ca>
 8003d4c:	2307      	movs	r3, #7
 8003d4e:	e004      	b.n	8003d5a <HAL_GPIO_Init+0x1ca>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e002      	b.n	8003d5a <HAL_GPIO_Init+0x1ca>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <HAL_GPIO_Init+0x1ca>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	f002 0203 	and.w	r2, r2, #3
 8003d60:	0092      	lsls	r2, r2, #2
 8003d62:	4093      	lsls	r3, r2
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d6a:	4938      	ldr	r1, [pc, #224]	@ (8003e4c <HAL_GPIO_Init+0x2bc>)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3302      	adds	r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d78:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d9c:	4a2f      	ldr	r2, [pc, #188]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003da2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dc6:	4a25      	ldr	r2, [pc, #148]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dcc:	4b23      	ldr	r3, [pc, #140]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003df2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003dfa:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e20:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <HAL_GPIO_Init+0x2cc>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f aeb1 	bne.w	8003ba0 <HAL_GPIO_Init+0x10>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	48000400 	.word	0x48000400
 8003e54:	48000800 	.word	0x48000800
 8003e58:	48001000 	.word	0x48001000
 8003e5c:	58000800 	.word	0x58000800

08003e60 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	887b      	ldrh	r3, [r7, #2]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	e001      	b.n	8003e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ea0:	787b      	ldrb	r3, [r7, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eca:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ed6:	4a05      	ldr	r2, [pc, #20]	@ (8003eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc ff8a 	bl	8000df8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58000800 	.word	0x58000800

08003ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e08d      	b.n	800401e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fd fe68 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	@ 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e006      	b.n	8003f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d108      	bne.n	8003f92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	e007      	b.n	8003fa2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69d9      	ldr	r1, [r3, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d138      	bne.n	80040ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004046:	2302      	movs	r3, #2
 8004048:	e032      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2224      	movs	r2, #36	@ 0x24
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004078:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d139      	bne.n	8004146 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040dc:	2302      	movs	r3, #2
 80040de:	e033      	b.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800410e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	58000400 	.word	0x58000400

08004174 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004186:	d101      	bne.n	800418c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e6:	d101      	bne.n	80041ec <LL_RCC_HSE_IsReady+0x18>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <LL_RCC_HSE_IsReady+0x1a>
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004228:	6013      	str	r3, [r2, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d101      	bne.n	800424c <LL_RCC_HSI_IsReady+0x18>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <LL_RCC_HSI_IsReady+0x1a>
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800428e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80042c6:	b480      	push	{r7}
 80042c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80042ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d101      	bne.n	80042de <LL_RCC_HSI48_IsReady+0x18>
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <LL_RCC_HSI48_IsReady+0x1a>
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80042ea:	b480      	push	{r7}
 80042ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800433e:	f043 0304 	orr.w	r3, r3, #4
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d101      	bne.n	800438a <LL_RCC_LSE_IsReady+0x18>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <LL_RCC_LSE_IsReady+0x1a>
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80043d0:	bf00      	nop
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d101      	bne.n	80043f2 <LL_RCC_LSI1_IsReady+0x18>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <LL_RCC_LSI1_IsReady+0x1a>
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80043fe:	b480      	push	{r7}
 8004400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004416:	bf00      	nop
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004430:	f023 0304 	bic.w	r3, r3, #4
 8004434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d101      	bne.n	800445a <LL_RCC_LSI2_IsReady+0x18>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_RCC_LSI2_IsReady+0x1a>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800446e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004472:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004476:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80044b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6013      	str	r3, [r2, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d101      	bne.n	80044e6 <LL_RCC_MSI_IsReady+0x16>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_RCC_MSI_IsReady+0x18>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80044fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004504:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800452a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004530:	d901      	bls.n	8004536 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004532:	23b0      	movs	r3, #176	@ 0xb0
 8004534:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004536:	687b      	ldr	r3, [r7, #4]
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 0203 	bic.w	r2, r3, #3
 8004580:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800460a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800460e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004612:	f023 020f 	bic.w	r2, r3, #15
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004642:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800466a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800468e:	4618      	mov	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80046d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80046ea:	b480      	push	{r7}
 80046ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046fc:	6013      	str	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800471a:	d101      	bne.n	8004720 <LL_RCC_PLL_IsReady+0x18>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <LL_RCC_PLL_IsReady+0x1a>
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0303 	and.w	r3, r3, #3
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d101      	bne.n	80047a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047c6:	d101      	bne.n	80047cc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80047e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ec:	d101      	bne.n	80047f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004810:	d101      	bne.n	8004816 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004822:	b480      	push	{r7}
 8004824:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004834:	d101      	bne.n	800483a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b08d      	sub	sp, #52	@ 0x34
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e35c      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 808d 	beq.w	8004982 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004868:	f7ff fe95 	bl	8004596 <LL_RCC_GetSysClkSource>
 800486c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800486e:	f7ff ff82 	bl	8004776 <LL_RCC_PLL_GetMainSource>
 8004872:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x3e>
 800487a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d147      	bne.n	8004910 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004882:	2b01      	cmp	r3, #1
 8004884:	d144      	bne.n	8004910 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e340      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004896:	f7ff fe40 	bl	800451a <LL_RCC_MSI_GetRange>
 800489a:	4603      	mov	r3, r0
 800489c:	429c      	cmp	r4, r3
 800489e:	d914      	bls.n	80048ca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fd0f 	bl	80052c8 <RCC_SetFlashLatencyFromMSIRange>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e32f      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fe1a 	bl	80044f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fe3e 	bl	8004544 <LL_RCC_MSI_SetCalibTrimming>
 80048c8:	e013      	b.n	80048f2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fe0f 	bl	80044f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fe33 	bl	8004544 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fcf0 	bl	80052c8 <RCC_SetFlashLatencyFromMSIRange>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e310      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048f2:	f000 fcbf 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4aa4      	ldr	r2, [pc, #656]	@ (8004b8c <HAL_RCC_OscConfig+0x344>)
 80048fa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048fc:	4ba4      	ldr	r3, [pc, #656]	@ (8004b90 <HAL_RCC_OscConfig+0x348>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fd fbf3 	bl	80020ec <HAL_InitTick>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d039      	beq.n	8004980 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e301      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01e      	beq.n	8004956 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004918:	f7ff fdbc 	bl	8004494 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800491c:	f7fd fc34 	bl	8002188 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004924:	f7fd fc30 	bl	8002188 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e2ee      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004936:	f7ff fdcb 	bl	80044d0 <LL_RCC_MSI_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f1      	beq.n	8004924 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fdd4 	bl	80044f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fdf8 	bl	8004544 <LL_RCC_MSI_SetCalibTrimming>
 8004954:	e015      	b.n	8004982 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004956:	f7ff fdac 	bl	80044b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800495a:	f7fd fc15 	bl	8002188 <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004962:	f7fd fc11 	bl	8002188 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e2cf      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004974:	f7ff fdac 	bl	80044d0 <LL_RCC_MSI_IsReady>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f1      	bne.n	8004962 <HAL_RCC_OscConfig+0x11a>
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004980:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d047      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498e:	f7ff fe02 	bl	8004596 <LL_RCC_GetSysClkSource>
 8004992:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004994:	f7ff feef 	bl	8004776 <LL_RCC_PLL_GetMainSource>
 8004998:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d005      	beq.n	80049ac <HAL_RCC_OscConfig+0x164>
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d108      	bne.n	80049b8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d105      	bne.n	80049b8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d134      	bne.n	8004a1e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e2ad      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c0:	d102      	bne.n	80049c8 <HAL_RCC_OscConfig+0x180>
 80049c2:	f7ff fbe9 	bl	8004198 <LL_RCC_HSE_Enable>
 80049c6:	e001      	b.n	80049cc <HAL_RCC_OscConfig+0x184>
 80049c8:	f7ff fbf5 	bl	80041b6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd fbd8 	bl	8002188 <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7fd fbd4 	bl	8002188 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	@ 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e292      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 80049ee:	f7ff fbf1 	bl	80041d4 <LL_RCC_HSE_IsReady>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f1      	beq.n	80049dc <HAL_RCC_OscConfig+0x194>
 80049f8:	e011      	b.n	8004a1e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fd fbc5 	bl	8002188 <HAL_GetTick>
 80049fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a02:	f7fd fbc1 	bl	8002188 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	@ 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e27f      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a14:	f7ff fbde 	bl	80041d4 <LL_RCC_HSE_IsReady>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f1      	bne.n	8004a02 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d04c      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2a:	f7ff fdb4 	bl	8004596 <LL_RCC_GetSysClkSource>
 8004a2e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	f7ff fea1 	bl	8004776 <LL_RCC_PLL_GetMainSource>
 8004a34:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x200>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d10e      	bne.n	8004a60 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d10b      	bne.n	8004a60 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e25f      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fbfd 	bl	8004258 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a5e:	e031      	b.n	8004ac4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d019      	beq.n	8004a9c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a68:	f7ff fbc6 	bl	80041f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fb8c 	bl	8002188 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fd fb88 	bl	8002188 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e246      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a86:	f7ff fbd5 	bl	8004234 <LL_RCC_HSI_IsReady>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f1      	beq.n	8004a74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fbdf 	bl	8004258 <LL_RCC_HSI_SetCalibTrimming>
 8004a9a:	e013      	b.n	8004ac4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9c:	f7ff fbbb 	bl	8004216 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fd fb72 	bl	8002188 <HAL_GetTick>
 8004aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fd fb6e 	bl	8002188 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e22c      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004aba:	f7ff fbbb 	bl	8004234 <LL_RCC_HSI_IsReady>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f1      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a3 	beq.w	8004c24 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d076      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d046      	beq.n	8004b80 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004af2:	f7ff fc72 	bl	80043da <LL_RCC_LSI1_IsReady>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d113      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004afc:	f7ff fc4b 	bl	8004396 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b00:	f7fd fb42 	bl	8002188 <HAL_GetTick>
 8004b04:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b08:	f7fd fb3e 	bl	8002188 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1fc      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004b1a:	f7ff fc5e 	bl	80043da <LL_RCC_LSI1_IsReady>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f1      	beq.n	8004b08 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004b24:	f7ff fc6b 	bl	80043fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fd fb2e 	bl	8002188 <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b30:	f7fd fb2a 	bl	8002188 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e1e8      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b42:	f7ff fc7e 	bl	8004442 <LL_RCC_LSI2_IsReady>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f1      	beq.n	8004b30 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fc88 	bl	8004466 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004b56:	f7ff fc2f 	bl	80043b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fd fb15 	bl	8002188 <HAL_GetTick>
 8004b5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b62:	f7fd fb11 	bl	8002188 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1cf      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b74:	f7ff fc31 	bl	80043da <LL_RCC_LSI1_IsReady>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f1      	bne.n	8004b62 <HAL_RCC_OscConfig+0x31a>
 8004b7e:	e051      	b.n	8004c24 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004b80:	f7ff fc09 	bl	8004396 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7fd fb00 	bl	8002188 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b8a:	e00c      	b.n	8004ba6 <HAL_RCC_OscConfig+0x35e>
 8004b8c:	2000003c 	.word	0x2000003c
 8004b90:	20000040 	.word	0x20000040
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b94:	f7fd faf8 	bl	8002188 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1b6      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ba6:	f7ff fc18 	bl	80043da <LL_RCC_LSI1_IsReady>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f1      	beq.n	8004b94 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004bb0:	f7ff fc36 	bl	8004420 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bb6:	f7fd fae7 	bl	8002188 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1a5      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004bc8:	f7ff fc3b 	bl	8004442 <LL_RCC_LSI2_IsReady>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f1      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x36e>
 8004bd2:	e027      	b.n	8004c24 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004bd4:	f7ff fc24 	bl	8004420 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fad6 	bl	8002188 <HAL_GetTick>
 8004bdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004be0:	f7fd fad2 	bl	8002188 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e190      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bf2:	f7ff fc26 	bl	8004442 <LL_RCC_LSI2_IsReady>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f1      	bne.n	8004be0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004bfc:	f7ff fbdc 	bl	80043b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fd fac2 	bl	8002188 <HAL_GetTick>
 8004c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c08:	f7fd fabe 	bl	8002188 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e17c      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004c1a:	f7ff fbde 	bl	80043da <LL_RCC_LSI1_IsReady>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f1      	bne.n	8004c08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05b      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c30:	4ba7      	ldr	r3, [pc, #668]	@ (8004ed0 <HAL_RCC_OscConfig+0x688>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d114      	bne.n	8004c66 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c3c:	f7ff fa8a 	bl	8004154 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c40:	f7fd faa2 	bl	8002188 <HAL_GetTick>
 8004c44:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c48:	f7fd fa9e 	bl	8002188 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e15c      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5a:	4b9d      	ldr	r3, [pc, #628]	@ (8004ed0 <HAL_RCC_OscConfig+0x688>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d102      	bne.n	8004c74 <HAL_RCC_OscConfig+0x42c>
 8004c6e:	f7ff fb3c 	bl	80042ea <LL_RCC_LSE_Enable>
 8004c72:	e00c      	b.n	8004c8e <HAL_RCC_OscConfig+0x446>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d104      	bne.n	8004c86 <HAL_RCC_OscConfig+0x43e>
 8004c7c:	f7ff fb57 	bl	800432e <LL_RCC_LSE_EnableBypass>
 8004c80:	f7ff fb33 	bl	80042ea <LL_RCC_LSE_Enable>
 8004c84:	e003      	b.n	8004c8e <HAL_RCC_OscConfig+0x446>
 8004c86:	f7ff fb41 	bl	800430c <LL_RCC_LSE_Disable>
 8004c8a:	f7ff fb61 	bl	8004350 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d014      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fd fa77 	bl	8002188 <HAL_GetTick>
 8004c9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fd fa73 	bl	8002188 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e12f      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004cb4:	f7ff fb5d 	bl	8004372 <LL_RCC_LSE_IsReady>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ef      	beq.n	8004c9e <HAL_RCC_OscConfig+0x456>
 8004cbe:	e013      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fa62 	bl	8002188 <HAL_GetTick>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fa5e 	bl	8002188 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e11a      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cde:	f7ff fb48 	bl	8004372 <LL_RCC_LSE_IsReady>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d014      	beq.n	8004d26 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cfc:	f7ff fac1 	bl	8004282 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fd fa42 	bl	8002188 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d08:	f7fd fa3e 	bl	8002188 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0fc      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004d1a:	f7ff fad4 	bl	80042c6 <LL_RCC_HSI48_IsReady>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f1      	beq.n	8004d08 <HAL_RCC_OscConfig+0x4c0>
 8004d24:	e013      	b.n	8004d4e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d26:	f7ff fabd 	bl	80042a4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fd fa2d 	bl	8002188 <HAL_GetTick>
 8004d2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d32:	f7fd fa29 	bl	8002188 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0e7      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d44:	f7ff fabf 	bl	80042c6 <LL_RCC_HSI48_IsReady>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f1      	bne.n	8004d32 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80dd 	beq.w	8004f12 <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d58:	f7ff fc1d 	bl	8004596 <LL_RCC_GetSysClkSource>
 8004d5c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	f040 80a6 	bne.w	8004ebc <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d123      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d11c      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d114      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d10d      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d106      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d054      	beq.n	8004e70 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d04f      	beq.n	8004e6c <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dcc:	f7ff fc8d 	bl	80046ea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd0:	f7fd f9da 	bl	8002188 <HAL_GetTick>
 8004dd4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fd f9d6 	bl	8002188 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e094      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ef      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <HAL_RCC_OscConfig+0x68c>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e10:	0212      	lsls	r2, r2, #8
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004e24:	430a      	orrs	r2, r1
 8004e26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e2e:	f7ff fc4d 	bl	80046cc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e42:	f7fd f9a1 	bl	8002188 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fd f99d 	bl	8002188 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e05b      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0ef      	beq.n	8004e4a <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e6a:	e052      	b.n	8004f12 <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e051      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d149      	bne.n	8004f12 <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e7e:	f7ff fc25 	bl	80046cc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e92:	f7fd f979 	bl	8002188 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fd f975 	bl	8002188 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e033      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ef      	beq.n	8004e9a <HAL_RCC_OscConfig+0x652>
 8004eba:	e02a      	b.n	8004f12 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d025      	beq.n	8004f0e <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec2:	f7ff fc12 	bl	80046ea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fd f95f 	bl	8002188 <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ecc:	e00d      	b.n	8004eea <HAL_RCC_OscConfig+0x6a2>
 8004ece:	bf00      	nop
 8004ed0:	58000400 	.word	0x58000400
 8004ed4:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fd f956 	bl	8002188 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e014      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ef      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	f023 0303 	bic.w	r3, r3, #3
 8004f0a:	60d3      	str	r3, [r2, #12]
 8004f0c:	e001      	b.n	8004f12 <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3734      	adds	r7, #52	@ 0x34
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd90      	pop	{r4, r7, pc}

08004f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e12d      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f30:	4b98      	ldr	r3, [pc, #608]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d91b      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b95      	ldr	r3, [pc, #596]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 0207 	bic.w	r2, r3, #7
 8004f46:	4993      	ldr	r1, [pc, #588]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4e:	f7fd f91b 	bl	8002188 <HAL_GetTick>
 8004f52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f56:	f7fd f917 	bl	8002188 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e111      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f68:	4b8a      	ldr	r3, [pc, #552]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d1ef      	bne.n	8004f56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff fb11 	bl	80045ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f8c:	f7fd f8fc 	bl	8002188 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f94:	f7fd f8f8 	bl	8002188 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0f2      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004fa6:	f7ff fbf2 	bl	800478e <LL_RCC_IsActiveFlag_HPRE>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f1      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fb08 	bl	80045d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fc6:	f7fd f8df 	bl	8002188 <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fce:	f7fd f8db 	bl	8002188 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0d5      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fe0:	f7ff fbe7 	bl	80047b2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f1      	beq.n	8004fce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fb01 	bl	8004602 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005000:	f7fd f8c2 	bl	8002188 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005008:	f7fd f8be 	bl	8002188 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0b8      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800501a:	f7ff fbdd 	bl	80047d8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f1      	beq.n	8005008 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d016      	beq.n	800505e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fafb 	bl	8004630 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800503a:	f7fd f8a5 	bl	8002188 <HAL_GetTick>
 800503e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005042:	f7fd f8a1 	bl	8002188 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e09b      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005054:	f7ff fbd3 	bl	80047fe <LL_RCC_IsActiveFlag_PPRE1>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f1      	beq.n	8005042 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff faf1 	bl	8004658 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005076:	f7fd f887 	bl	8002188 <HAL_GetTick>
 800507a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800507c:	e008      	b.n	8005090 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800507e:	f7fd f883 	bl	8002188 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e07d      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005090:	f7ff fbc7 	bl	8004822 <LL_RCC_IsActiveFlag_PPRE2>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f1      	beq.n	800507e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d043      	beq.n	800512e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d106      	bne.n	80050bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80050ae:	f7ff f891 	bl	80041d4 <LL_RCC_HSE_IsReady>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d11e      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e067      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80050c4:	f7ff fb20 	bl	8004708 <LL_RCC_PLL_IsReady>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d113      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e05c      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80050da:	f7ff f9f9 	bl	80044d0 <LL_RCC_MSI_IsReady>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e051      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80050e8:	f7ff f8a4 	bl	8004234 <LL_RCC_HSI_IsReady>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e04a      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fa37 	bl	800456e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fd f842 	bl	8002188 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7fd f83e 	bl	8002188 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e036      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	f7ff fa3a 	bl	8004596 <LL_RCC_GetSysClkSource>
 8005122:	4602      	mov	r2, r0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	429a      	cmp	r2, r3
 800512c:	d1ec      	bne.n	8005108 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800512e:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d21b      	bcs.n	8005174 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513c:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 0207 	bic.w	r2, r3, #7
 8005144:	4913      	ldr	r1, [pc, #76]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fd f81c 	bl	8002188 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	e008      	b.n	8005166 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005154:	f7fd f818 	bl	8002188 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e012      	b.n	800518c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005166:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <HAL_RCC_ClockConfig+0x278>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d1ef      	bne.n	8005154 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005174:	f000 f87e 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 8005178:	4603      	mov	r3, r0
 800517a:	4a07      	ldr	r2, [pc, #28]	@ (8005198 <HAL_RCC_ClockConfig+0x27c>)
 800517c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800517e:	f7fd f80f 	bl	80021a0 <HAL_GetTickPrio>
 8005182:	4603      	mov	r3, r0
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc ffb1 	bl	80020ec <HAL_InitTick>
 800518a:	4603      	mov	r3, r0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	58004000 	.word	0x58004000
 8005198:	2000003c 	.word	0x2000003c

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a2:	f7ff f9f8 	bl	8004596 <LL_RCC_GetSysClkSource>
 80051a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80051ae:	f7ff f9b4 	bl	800451a <LL_RCC_MSI_GetRange>
 80051b2:	4603      	mov	r3, r0
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	e04b      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d102      	bne.n	80051d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ca:	4b28      	ldr	r3, [pc, #160]	@ (800526c <HAL_RCC_GetSysClockFreq+0xd0>)
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e045      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d10a      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051d6:	f7fe ffcd 	bl	8004174 <LL_RCC_HSE_IsEnabledDiv2>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d102      	bne.n	80051e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80051e0:	4b22      	ldr	r3, [pc, #136]	@ (800526c <HAL_RCC_GetSysClockFreq+0xd0>)
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e03a      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80051e6:	4b22      	ldr	r3, [pc, #136]	@ (8005270 <HAL_RCC_GetSysClockFreq+0xd4>)
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e037      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80051ec:	f7ff fac3 	bl	8004776 <LL_RCC_PLL_GetMainSource>
 80051f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d003      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x64>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d003      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x6a>
 80051fe:	e00d      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005200:	4b1a      	ldr	r3, [pc, #104]	@ (800526c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005202:	60bb      	str	r3, [r7, #8]
        break;
 8005204:	e015      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005206:	f7fe ffb5 	bl	8004174 <LL_RCC_HSE_IsEnabledDiv2>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d102      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005210:	4b16      	ldr	r3, [pc, #88]	@ (800526c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005212:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005214:	e00d      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005216:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005218:	60bb      	str	r3, [r7, #8]
        break;
 800521a:	e00a      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800521c:	f7ff f97d 	bl	800451a <LL_RCC_MSI_GetRange>
 8005220:	4603      	mov	r3, r0
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	4a0f      	ldr	r2, [pc, #60]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xcc>)
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	60bb      	str	r3, [r7, #8]
        break;
 8005230:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005232:	f7ff fa7b 	bl	800472c <LL_RCC_PLL_GetN>
 8005236:	4602      	mov	r2, r0
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	fb03 f402 	mul.w	r4, r3, r2
 800523e:	f7ff fa8e 	bl	800475e <LL_RCC_PLL_GetDivider>
 8005242:	4603      	mov	r3, r0
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	3301      	adds	r3, #1
 8005248:	fbb4 f4f3 	udiv	r4, r4, r3
 800524c:	f7ff fa7b 	bl	8004746 <LL_RCC_PLL_GetR>
 8005250:	4603      	mov	r3, r0
 8005252:	0f5b      	lsrs	r3, r3, #29
 8005254:	3301      	adds	r3, #1
 8005256:	fbb4 f3f3 	udiv	r3, r4, r3
 800525a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	08009ad4 	.word	0x08009ad4
 800526c:	00f42400 	.word	0x00f42400
 8005270:	01e84800 	.word	0x01e84800

08005274 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005274:	b598      	push	{r3, r4, r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005278:	f7ff ff90 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800527c:	4604      	mov	r4, r0
 800527e:	f7ff f9ff 	bl	8004680 <LL_RCC_GetAHBPrescaler>
 8005282:	4603      	mov	r3, r0
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	4a03      	ldr	r2, [pc, #12]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x24>)
 800528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005290:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd98      	pop	{r3, r4, r7, pc}
 8005298:	08009a74 	.word	0x08009a74

0800529c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800529c:	b598      	push	{r3, r4, r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80052a0:	f7ff ffe8 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 80052a4:	4604      	mov	r4, r0
 80052a6:	f7ff fa05 	bl	80046b4 <LL_RCC_GetAPB2Prescaler>
 80052aa:	4603      	mov	r3, r0
 80052ac:	0adb      	lsrs	r3, r3, #11
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	4a04      	ldr	r2, [pc, #16]	@ (80052c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd98      	pop	{r3, r4, r7, pc}
 80052c4:	08009ab4 	.word	0x08009ab4

080052c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2bb0      	cmp	r3, #176	@ 0xb0
 80052d4:	d903      	bls.n	80052de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80052d6:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e007      	b.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80052ee:	f7ff f9d3 	bl	8004698 <LL_RCC_GetAHB4Prescaler>
 80052f2:	4603      	mov	r3, r0
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a0c      	ldr	r2, [pc, #48]	@ (800532c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a09      	ldr	r2, [pc, #36]	@ (8005330 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f80c 	bl	8005334 <RCC_SetFlashLatency>
 800531c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	08009ad4 	.word	0x08009ad4
 800532c:	08009a74 	.word	0x08009a74
 8005330:	431bde83 	.word	0x431bde83

08005334 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005334:	b590      	push	{r4, r7, lr}
 8005336:	b08f      	sub	sp, #60	@ 0x3c
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800533e:	4b24      	ldr	r3, [pc, #144]	@ (80053d0 <RCC_SetFlashLatency+0x9c>)
 8005340:	f107 041c 	add.w	r4, r7, #28
 8005344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800534a:	4b22      	ldr	r3, [pc, #136]	@ (80053d4 <RCC_SetFlashLatency+0xa0>)
 800534c:	f107 040c 	add.w	r4, r7, #12
 8005350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005356:	2300      	movs	r3, #0
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800535a:	2300      	movs	r3, #0
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
 800535e:	e013      	b.n	8005388 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	3338      	adds	r3, #56	@ 0x38
 8005366:	443b      	add	r3, r7
 8005368:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	429a      	cmp	r2, r3
 8005370:	d807      	bhi.n	8005382 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3338      	adds	r3, #56	@ 0x38
 8005378:	443b      	add	r3, r7
 800537a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800537e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8005380:	e005      	b.n	800538e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	3301      	adds	r3, #1
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	2b03      	cmp	r3, #3
 800538c:	d9e8      	bls.n	8005360 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800538e:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <RCC_SetFlashLatency+0xa4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f023 0207 	bic.w	r2, r3, #7
 8005396:	4910      	ldr	r1, [pc, #64]	@ (80053d8 <RCC_SetFlashLatency+0xa4>)
 8005398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800539e:	f7fc fef3 	bl	8002188 <HAL_GetTick>
 80053a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053a4:	e008      	b.n	80053b8 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053a6:	f7fc feef 	bl	8002188 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e007      	b.n	80053c8 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053b8:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <RCC_SetFlashLatency+0xa4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d1ef      	bne.n	80053a6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	373c      	adds	r7, #60	@ 0x3c
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd90      	pop	{r4, r7, pc}
 80053d0:	08009a18 	.word	0x08009a18
 80053d4:	08009a28 	.word	0x08009a28
 80053d8:	58004000 	.word	0x58004000

080053dc <LL_RCC_LSE_IsEnabled>:
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <LL_RCC_LSE_IsEnabled+0x18>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <LL_RCC_LSE_IsEnabled+0x1a>
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_RCC_LSE_IsReady>:
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d101      	bne.n	8005418 <LL_RCC_LSE_IsReady+0x18>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <LL_RCC_LSE_IsReady+0x1a>
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_RCC_SetRFWKPClockSource>:
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005434:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <LL_RCC_SetUSARTClockSource>:
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_RCC_SetI2CClockSource>:
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005488:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80054a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <LL_RCC_SetLPTIMClockSource>:
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	43db      	mvns	r3, r3
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_RCC_SetRNGClockSource>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_RCC_SetCLK48ClockSource>:
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800552a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_SetADCClockSource>:
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_RCC_SetRTCClockSource>:
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_RCC_GetRTCClockSource>:
{
 800559a:	b480      	push	{r7}
 800559c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800559e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_ForceBackupDomainReset>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80055cc:	bf00      	nop
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005600:	2300      	movs	r3, #0
 8005602:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005604:	2300      	movs	r3, #0
 8005606:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005610:	2b00      	cmp	r3, #0
 8005612:	d046      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005614:	f7ff ffc1 	bl	800559a <LL_RCC_GetRTCClockSource>
 8005618:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d03c      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005624:	f7fe fd96 	bl	8004154 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff9b 	bl	800556e <LL_RCC_SetRTCClockSource>
 8005638:	e02e      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005642:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005644:	f7ff ffb6 	bl	80055b4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005648:	f7ff ffc5 	bl	80055d6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800565a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005664:	f7ff feba 	bl	80053dc <LL_RCC_LSE_IsEnabled>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d114      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800566e:	f7fc fd8b 	bl	8002188 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005674:	e00b      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fc fd87 	bl	8002188 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005684:	4293      	cmp	r3, r2
 8005686:	d902      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	77fb      	strb	r3, [r7, #31]
              break;
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800568e:	f7ff feb7 	bl	8005400 <LL_RCC_LSE_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d1ee      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005698:	7ffb      	ldrb	r3, [r7, #31]
 800569a:	77bb      	strb	r3, [r7, #30]
 800569c:	e001      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fecc 	bl	8005450 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fef4 	bl	80054b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fee9 	bl	80054b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fec1 	bl	800547c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02b      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570e:	d008      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005718:	d003      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d105      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fedf 	bl	80054ea <LL_RCC_SetRNGClockSource>
 800572c:	e00a      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	2000      	movs	r0, #0
 800573a:	f7ff fed6 	bl	80054ea <LL_RCC_SetRNGClockSource>
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff fee9 	bl	8005516 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005758:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800575c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005766:	2b00      	cmp	r3, #0
 8005768:	d011      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fee7 	bl	8005542 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800577c:	d107      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fe40 	bl	8005424 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80057a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e049      	b.n	8005854 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d106      	bne.n	80057da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fc fa51 	bl	8001c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 f9bd 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d001      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e036      	b.n	80058e2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a17      	ldr	r2, [pc, #92]	@ (80058f0 <HAL_TIM_Base_Start_IT+0x94>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x44>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589e:	d115      	bne.n	80058cc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	4b13      	ldr	r3, [pc, #76]	@ (80058f4 <HAL_TIM_Base_Start_IT+0x98>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d015      	beq.n	80058de <HAL_TIM_Base_Start_IT+0x82>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b8:	d011      	beq.n	80058de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	e008      	b.n	80058de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	00010007 	.word	0x00010007

080058f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0202 	mvn.w	r2, #2
 800592c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f8f3 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f8e5 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f8f6 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0204 	mvn.w	r2, #4
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f8cd 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f8bf 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8d0 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d020      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0208 	mvn.w	r2, #8
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8a7 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f899 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8aa 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d020      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01b      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f881 	bl	8005b2e <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f873 	bl	8005b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f884 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0201 	mvn.w	r2, #1
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f851 	bl	8005b06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8e1 	bl	8005c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f8d9 	bl	8005c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00c      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f83e 	bl	8005b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f06f 0220 	mvn.w	r2, #32
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8a1 	bl	8005c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8005c34 <TIM_Base_SetConfig+0xc8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0x20>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b8a:	d108      	bne.n	8005b9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a24      	ldr	r2, [pc, #144]	@ (8005c34 <TIM_Base_SetConfig+0xc8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_Base_SetConfig+0x52>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bac:	d007      	beq.n	8005bbe <TIM_Base_SetConfig+0x52>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a21      	ldr	r2, [pc, #132]	@ (8005c38 <TIM_Base_SetConfig+0xcc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_Base_SetConfig+0x52>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a20      	ldr	r2, [pc, #128]	@ (8005c3c <TIM_Base_SetConfig+0xd0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d108      	bne.n	8005bd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a10      	ldr	r2, [pc, #64]	@ (8005c34 <TIM_Base_SetConfig+0xc8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8005c38 <TIM_Base_SetConfig+0xcc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a0e      	ldr	r2, [pc, #56]	@ (8005c3c <TIM_Base_SetConfig+0xd0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d103      	bne.n	8005c0e <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f043 0204 	orr.w	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800

08005c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <LL_RCC_GetUSARTClockSource>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4013      	ands	r3, r2
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e042      	b.n	8005d34 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fc f80b 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	@ 0x24
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9f2 	bl	80060d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8b3 	bl	8005e58 <UART_SetConfig>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e01b      	b.n	8005d34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fa71 	bl	8006214 <UART_CheckIdleState>
 8005d32:	4603      	mov	r3, r0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	@ 0x28
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d17b      	bne.n	8005e4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_UART_Transmit+0x26>
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e074      	b.n	8005e50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2221      	movs	r2, #33	@ 0x21
 8005d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d76:	f7fc fa07 	bl	8002188 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d94:	d108      	bne.n	8005da8 <HAL_UART_Transmit+0x6c>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	e003      	b.n	8005db0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005db0:	e030      	b.n	8005e14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fad3 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e03d      	b.n	8005e50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10b      	bne.n	8005df2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	3302      	adds	r3, #2
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e007      	b.n	8005e02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1c8      	bne.n	8005db2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2200      	movs	r2, #0
 8005e28:	2140      	movs	r1, #64	@ 0x40
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fa9c 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e006      	b.n	8005e50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e000      	b.n	8005e50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005e4e:	2302      	movs	r3, #2
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b8f      	ldr	r3, [pc, #572]	@ (80060c0 <UART_SetConfig+0x268>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	6979      	ldr	r1, [r7, #20]
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005ec0:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	6979      	ldr	r1, [r7, #20]
 8005eca:	430b      	orrs	r3, r1
 8005ecc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	f023 010f 	bic.w	r1, r3, #15
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a76      	ldr	r2, [pc, #472]	@ (80060c4 <UART_SetConfig+0x26c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d11f      	bne.n	8005f2e <UART_SetConfig+0xd6>
 8005eee:	2003      	movs	r0, #3
 8005ef0:	f7ff fec4 	bl	8005c7c <LL_RCC_GetUSARTClockSource>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d816      	bhi.n	8005f28 <UART_SetConfig+0xd0>
 8005efa:	a201      	add	r2, pc, #4	@ (adr r2, 8005f00 <UART_SetConfig+0xa8>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f11 	.word	0x08005f11
 8005f04:	08005f1d 	.word	0x08005f1d
 8005f08:	08005f17 	.word	0x08005f17
 8005f0c:	08005f23 	.word	0x08005f23
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e00d      	b.n	8005f32 <UART_SetConfig+0xda>
 8005f16:	2302      	movs	r3, #2
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e00a      	b.n	8005f32 <UART_SetConfig+0xda>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e007      	b.n	8005f32 <UART_SetConfig+0xda>
 8005f22:	2308      	movs	r3, #8
 8005f24:	77fb      	strb	r3, [r7, #31]
 8005f26:	e004      	b.n	8005f32 <UART_SetConfig+0xda>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e001      	b.n	8005f32 <UART_SetConfig+0xda>
 8005f2e:	2310      	movs	r3, #16
 8005f30:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f3a:	d15e      	bne.n	8005ffa <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005f3c:	7ffb      	ldrb	r3, [r7, #31]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	2b07      	cmp	r3, #7
 8005f42:	d822      	bhi.n	8005f8a <UART_SetConfig+0x132>
 8005f44:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0xf4>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005f7b 	.word	0x08005f7b
 8005f5c:	08005f8b 	.word	0x08005f8b
 8005f60:	08005f8b 	.word	0x08005f8b
 8005f64:	08005f8b 	.word	0x08005f8b
 8005f68:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7ff f996 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 8005f70:	61b8      	str	r0, [r7, #24]
        break;
 8005f72:	e00f      	b.n	8005f94 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f74:	4b54      	ldr	r3, [pc, #336]	@ (80060c8 <UART_SetConfig+0x270>)
 8005f76:	61bb      	str	r3, [r7, #24]
        break;
 8005f78:	e00c      	b.n	8005f94 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7a:	f7ff f90f 	bl	800519c <HAL_RCC_GetSysClockFreq>
 8005f7e:	61b8      	str	r0, [r7, #24]
        break;
 8005f80:	e008      	b.n	8005f94 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f86:	61bb      	str	r3, [r7, #24]
        break;
 8005f88:	e004      	b.n	8005f94 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	77bb      	strb	r3, [r7, #30]
        break;
 8005f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d07e      	beq.n	8006098 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80060cc <UART_SetConfig+0x274>)
 8005fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fac:	005a      	lsls	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	d916      	bls.n	8005ff4 <UART_SetConfig+0x19c>
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fcc:	d212      	bcs.n	8005ff4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f023 030f 	bic.w	r3, r3, #15
 8005fd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	89fb      	ldrh	r3, [r7, #14]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	89fa      	ldrh	r2, [r7, #14]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e051      	b.n	8006098 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	77bb      	strb	r3, [r7, #30]
 8005ff8:	e04e      	b.n	8006098 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ffa:	7ffb      	ldrb	r3, [r7, #31]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	2b07      	cmp	r3, #7
 8006000:	d821      	bhi.n	8006046 <UART_SetConfig+0x1ee>
 8006002:	a201      	add	r2, pc, #4	@ (adr r2, 8006008 <UART_SetConfig+0x1b0>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006029 	.word	0x08006029
 800600c:	08006031 	.word	0x08006031
 8006010:	08006047 	.word	0x08006047
 8006014:	08006037 	.word	0x08006037
 8006018:	08006047 	.word	0x08006047
 800601c:	08006047 	.word	0x08006047
 8006020:	08006047 	.word	0x08006047
 8006024:	0800603f 	.word	0x0800603f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006028:	f7ff f938 	bl	800529c <HAL_RCC_GetPCLK2Freq>
 800602c:	61b8      	str	r0, [r7, #24]
        break;
 800602e:	e00f      	b.n	8006050 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006030:	4b25      	ldr	r3, [pc, #148]	@ (80060c8 <UART_SetConfig+0x270>)
 8006032:	61bb      	str	r3, [r7, #24]
        break;
 8006034:	e00c      	b.n	8006050 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006036:	f7ff f8b1 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800603a:	61b8      	str	r0, [r7, #24]
        break;
 800603c:	e008      	b.n	8006050 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006042:	61bb      	str	r3, [r7, #24]
        break;
 8006044:	e004      	b.n	8006050 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	77bb      	strb	r3, [r7, #30]
        break;
 800604e:	bf00      	nop
    }

    if (pclk != 0U)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d020      	beq.n	8006098 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	4a1c      	ldr	r2, [pc, #112]	@ (80060cc <UART_SetConfig+0x274>)
 800605c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006060:	461a      	mov	r2, r3
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	fbb3 f2f2 	udiv	r2, r3, r2
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	441a      	add	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d909      	bls.n	8006094 <UART_SetConfig+0x23c>
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006086:	d205      	bcs.n	8006094 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	b29a      	uxth	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60da      	str	r2, [r3, #12]
 8006092:	e001      	b.n	8006098 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	cfff69f3 	.word	0xcfff69f3
 80060c4:	40013800 	.word	0x40013800
 80060c8:	00f42400 	.word	0x00f42400
 80060cc:	08009b14 	.word	0x08009b14

080060d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061ce:	d10a      	bne.n	80061e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b098      	sub	sp, #96	@ 0x60
 8006218:	af02      	add	r7, sp, #8
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006224:	f7fb ffb0 	bl	8002188 <HAL_GetTick>
 8006228:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0308 	and.w	r3, r3, #8
 8006234:	2b08      	cmp	r3, #8
 8006236:	d12f      	bne.n	8006298 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006240:	2200      	movs	r2, #0
 8006242:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f88e 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d022      	beq.n	8006298 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006266:	653b      	str	r3, [r7, #80]	@ 0x50
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006270:	647b      	str	r3, [r7, #68]	@ 0x44
 8006272:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800627e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e063      	b.n	8006360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d149      	bne.n	800633a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ae:	2200      	movs	r2, #0
 80062b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f857 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d03c      	beq.n	800633a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	623b      	str	r3, [r7, #32]
   return(result);
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062de:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e6      	bne.n	80062c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60fb      	str	r3, [r7, #12]
   return(result);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	64bb      	str	r3, [r7, #72]	@ 0x48
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006312:	61fa      	str	r2, [r7, #28]
 8006314:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	69b9      	ldr	r1, [r7, #24]
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	617b      	str	r3, [r7, #20]
   return(result);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e012      	b.n	8006360 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3758      	adds	r7, #88	@ 0x58
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006378:	e04f      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d04b      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fb ff01 	bl	8002188 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <UART_WaitOnFlagUntilTimeout+0x30>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e04e      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d037      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b80      	cmp	r3, #128	@ 0x80
 80063ae:	d034      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d031      	beq.n	800641a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d110      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2208      	movs	r2, #8
 80063ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f838 	bl	8006442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2208      	movs	r2, #8
 80063d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e029      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063f4:	d111      	bne.n	800641a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f81e 	bl	8006442 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e00f      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	429a      	cmp	r2, r3
 8006436:	d0a0      	beq.n	800637a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006442:	b480      	push	{r7}
 8006444:	b095      	sub	sp, #84	@ 0x54
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800645e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006468:	643b      	str	r3, [r7, #64]	@ 0x40
 800646a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800646e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e6      	bne.n	800644a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3308      	adds	r3, #8
 8006482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	61fb      	str	r3, [r7, #28]
   return(result);
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e3      	bne.n	800647c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d118      	bne.n	80064ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f023 0310 	bic.w	r3, r3, #16
 80064d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	613b      	str	r3, [r7, #16]
   return(result);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e6      	bne.n	80064bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006502:	bf00      	nop
 8006504:	3754      	adds	r7, #84	@ 0x54
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_UARTEx_DisableFifoMode+0x16>
 8006520:	2302      	movs	r3, #2
 8006522:	e027      	b.n	8006574 <HAL_UARTEx_DisableFifoMode+0x66>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2224      	movs	r2, #36	@ 0x24
 8006530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0201 	bic.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006552:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006594:	2302      	movs	r3, #2
 8006596:	e02d      	b.n	80065f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2224      	movs	r2, #36	@ 0x24
 80065a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f84f 	bl	8006678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006610:	2302      	movs	r3, #2
 8006612:	e02d      	b.n	8006670 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2224      	movs	r2, #36	@ 0x24
 8006620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f811 	bl	8006678 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006684:	2b00      	cmp	r3, #0
 8006686:	d108      	bne.n	800669a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006698:	e031      	b.n	80066fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800669a:	2308      	movs	r3, #8
 800669c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800669e:	2308      	movs	r3, #8
 80066a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	0e5b      	lsrs	r3, r3, #25
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	0f5b      	lsrs	r3, r3, #29
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066c2:	7bbb      	ldrb	r3, [r7, #14]
 80066c4:	7b3a      	ldrb	r2, [r7, #12]
 80066c6:	4911      	ldr	r1, [pc, #68]	@ (800670c <UARTEx_SetNbDataToProcess+0x94>)
 80066c8:	5c8a      	ldrb	r2, [r1, r2]
 80066ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066ce:	7b3a      	ldrb	r2, [r7, #12]
 80066d0:	490f      	ldr	r1, [pc, #60]	@ (8006710 <UARTEx_SetNbDataToProcess+0x98>)
 80066d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	7b7a      	ldrb	r2, [r7, #13]
 80066e4:	4909      	ldr	r1, [pc, #36]	@ (800670c <UARTEx_SetNbDataToProcess+0x94>)
 80066e6:	5c8a      	ldrb	r2, [r1, r2]
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066ec:	7b7a      	ldrb	r2, [r7, #13]
 80066ee:	4908      	ldr	r1, [pc, #32]	@ (8006710 <UARTEx_SetNbDataToProcess+0x98>)
 80066f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	08009b2c 	.word	0x08009b2c
 8006710:	08009b34 	.word	0x08009b34

08006714 <i2c_init>:
#include "i2c.h"



void i2c_init(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
    // 1. I2C1 클럭 Enable
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 8006718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800671c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800671e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006722:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006726:	6593      	str	r3, [r2, #88]	@ 0x58

    // 2. GPIOB 클럭 Enable
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800672c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800672e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006732:	f043 0302 	orr.w	r3, r3, #2
 8006736:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // 3. PB8 (SCL), PB9 (SDA) Alternate Function 설정
    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));      // MODER clear
 8006738:	4b21      	ldr	r3, [pc, #132]	@ (80067c0 <i2c_init+0xac>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a20      	ldr	r2, [pc, #128]	@ (80067c0 <i2c_init+0xac>)
 800673e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8006742:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2 << (8 * 2)) | (2 << (9 * 2)));       // AF mode
 8006744:	4b1e      	ldr	r3, [pc, #120]	@ (80067c0 <i2c_init+0xac>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1d      	ldr	r2, [pc, #116]	@ (80067c0 <i2c_init+0xac>)
 800674a:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800674e:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (1 << 8) | (1 << 9);                    // Open-drain
 8006750:	4b1b      	ldr	r3, [pc, #108]	@ (80067c0 <i2c_init+0xac>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	4a1a      	ldr	r2, [pc, #104]	@ (80067c0 <i2c_init+0xac>)
 8006756:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800675a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (8 * 2)) | (3 << (9 * 2));       // High speed
 800675c:	4b18      	ldr	r3, [pc, #96]	@ (80067c0 <i2c_init+0xac>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a17      	ldr	r2, [pc, #92]	@ (80067c0 <i2c_init+0xac>)
 8006762:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8006766:	6093      	str	r3, [r2, #8]

    GPIOB->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8006768:	4b15      	ldr	r3, [pc, #84]	@ (80067c0 <i2c_init+0xac>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <i2c_init+0xac>)
 800676e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8006772:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1 << (8 * 2)) | (1 << (9 * 2)));       // Pull-up
 8006774:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <i2c_init+0xac>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	4a11      	ldr	r2, [pc, #68]	@ (80067c0 <i2c_init+0xac>)
 800677a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800677e:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
 8006780:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <i2c_init+0xac>)
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	4a0e      	ldr	r2, [pc, #56]	@ (80067c0 <i2c_init+0xac>)
 8006786:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800678a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4)));  // AF4 for I2C1
 800678c:	4b0c      	ldr	r3, [pc, #48]	@ (80067c0 <i2c_init+0xac>)
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	4a0b      	ldr	r2, [pc, #44]	@ (80067c0 <i2c_init+0xac>)
 8006792:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006796:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. I2C1 Disable before config
    I2C1->CR1 &= ~I2C_CR1_PE;
 8006798:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <i2c_init+0xb0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a09      	ldr	r2, [pc, #36]	@ (80067c4 <i2c_init+0xb0>)
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	6013      	str	r3, [r2, #0]

    // 5. TIMINGR: Standard mode 100kHz @ 64MHz
    I2C1->TIMINGR = 0x106133FF;
 80067a4:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <i2c_init+0xb0>)
 80067a6:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <i2c_init+0xb4>)
 80067a8:	611a      	str	r2, [r3, #16]

    // 6. Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 80067aa:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <i2c_init+0xb0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a05      	ldr	r2, [pc, #20]	@ (80067c4 <i2c_init+0xb0>)
 80067b0:	f043 0301 	orr.w	r3, r3, #1
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	48000400 	.word	0x48000400
 80067c4:	40005400 	.word	0x40005400
 80067c8:	106133ff 	.word	0x106133ff

080067cc <i2c_write>:

void i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
 80067d6:	460b      	mov	r3, r1
 80067d8:	71bb      	strb	r3, [r7, #6]
 80067da:	4613      	mov	r3, r2
 80067dc:	717b      	strb	r3, [r7, #5]
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006858 <i2c_write+0x8c>)
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);   // 레지스터 + 데이터 = 2바이트
 80067e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006858 <i2c_write+0x8c>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006858 <i2c_write+0x8c>)
 80067ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f0:	6053      	str	r3, [r2, #4]
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;             // Write
 80067f2:	4b19      	ldr	r3, [pc, #100]	@ (8006858 <i2c_write+0x8c>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <i2c_write+0x8c>)
 80067f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067fc:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START | I2C_CR2_AUTOEND;
 80067fe:	4b16      	ldr	r3, [pc, #88]	@ (8006858 <i2c_write+0x8c>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4a15      	ldr	r2, [pc, #84]	@ (8006858 <i2c_write+0x8c>)
 8006804:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006808:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800680c:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 800680e:	bf00      	nop
 8006810:	4b11      	ldr	r3, [pc, #68]	@ (8006858 <i2c_write+0x8c>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f9      	beq.n	8006810 <i2c_write+0x44>
    I2C1->TXDR = reg_addr;
 800681c:	4a0e      	ldr	r2, [pc, #56]	@ (8006858 <i2c_write+0x8c>)
 800681e:	79bb      	ldrb	r3, [r7, #6]
 8006820:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 8006822:	bf00      	nop
 8006824:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <i2c_write+0x8c>)
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f9      	beq.n	8006824 <i2c_write+0x58>
    I2C1->TXDR = data;
 8006830:	4a09      	ldr	r2, [pc, #36]	@ (8006858 <i2c_write+0x8c>)
 8006832:	797b      	ldrb	r3, [r7, #5]
 8006834:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_STOPF));
 8006836:	bf00      	nop
 8006838:	4b07      	ldr	r3, [pc, #28]	@ (8006858 <i2c_write+0x8c>)
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f9      	beq.n	8006838 <i2c_write+0x6c>
    I2C1->ICR = I2C_ICR_STOPCF;
 8006844:	4b04      	ldr	r3, [pc, #16]	@ (8006858 <i2c_write+0x8c>)
 8006846:	2220      	movs	r2, #32
 8006848:	61da      	str	r2, [r3, #28]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40005400 	.word	0x40005400

0800685c <i2c_read>:

uint8_t i2c_read(uint8_t slave_addr, uint8_t reg_addr)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	460a      	mov	r2, r1
 8006866:	71fb      	strb	r3, [r7, #7]
 8006868:	4613      	mov	r3, r2
 800686a:	71bb      	strb	r3, [r7, #6]
    uint8_t data;

    // Write phase: 레지스터 주소 보내기
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <i2c_read+0xc4>)
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8006874:	4b2a      	ldr	r3, [pc, #168]	@ (8006920 <i2c_read+0xc4>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a29      	ldr	r2, [pc, #164]	@ (8006920 <i2c_read+0xc4>)
 800687a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800687e:	6053      	str	r3, [r2, #4]
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;            // Write
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <i2c_read+0xc4>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	4a26      	ldr	r2, [pc, #152]	@ (8006920 <i2c_read+0xc4>)
 8006886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800688a:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START;
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <i2c_read+0xc4>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4a23      	ldr	r2, [pc, #140]	@ (8006920 <i2c_read+0xc4>)
 8006892:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006896:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 8006898:	bf00      	nop
 800689a:	4b21      	ldr	r3, [pc, #132]	@ (8006920 <i2c_read+0xc4>)
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f9      	beq.n	800689a <i2c_read+0x3e>
    I2C1->TXDR = reg_addr;
 80068a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006920 <i2c_read+0xc4>)
 80068a8:	79bb      	ldrb	r3, [r7, #6]
 80068aa:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_TC));
 80068ac:	bf00      	nop
 80068ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006920 <i2c_read+0xc4>)
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f9      	beq.n	80068ae <i2c_read+0x52>

    // Read phase: 데이터 1바이트 읽기
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <i2c_read+0xc4>)
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 80068c2:	4b17      	ldr	r3, [pc, #92]	@ (8006920 <i2c_read+0xc4>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4a16      	ldr	r2, [pc, #88]	@ (8006920 <i2c_read+0xc4>)
 80068c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068cc:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_RD_WRN;            // Read
 80068ce:	4b14      	ldr	r3, [pc, #80]	@ (8006920 <i2c_read+0xc4>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4a13      	ldr	r2, [pc, #76]	@ (8006920 <i2c_read+0xc4>)
 80068d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068d8:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START | I2C_CR2_AUTOEND;
 80068da:	4b11      	ldr	r3, [pc, #68]	@ (8006920 <i2c_read+0xc4>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4a10      	ldr	r2, [pc, #64]	@ (8006920 <i2c_read+0xc4>)
 80068e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80068e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80068e8:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_RXNE));
 80068ea:	bf00      	nop
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <i2c_read+0xc4>)
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f9      	beq.n	80068ec <i2c_read+0x90>
    data = I2C1->RXDR;
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <i2c_read+0xc4>)
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	73fb      	strb	r3, [r7, #15]

    while (!(I2C1->ISR & I2C_ISR_STOPF));
 80068fe:	bf00      	nop
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <i2c_read+0xc4>)
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f9      	beq.n	8006900 <i2c_read+0xa4>
    I2C1->ICR = I2C_ICR_STOPCF;
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <i2c_read+0xc4>)
 800690e:	2220      	movs	r2, #32
 8006910:	61da      	str	r2, [r3, #28]

    return data;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40005400 	.word	0x40005400

08006924 <uart_init>:
extern UART_HandleTypeDef huart1;



void uart_init(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
	HAL_UART_Init(&huart1);
 8006928:	4802      	ldr	r0, [pc, #8]	@ (8006934 <uart_init+0x10>)
 800692a:	f7ff f9b7 	bl	8005c9c <HAL_UART_Init>
}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200005bc 	.word	0x200005bc

08006938 <uart_printf>:


void uart_printf(const char *fmt, ...)
{
 8006938:	b40f      	push	{r0, r1, r2, r3}
 800693a:	b580      	push	{r7, lr}
 800693c:	b0a2      	sub	sp, #136	@ 0x88
 800693e:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;
    va_start(args, fmt);
 8006940:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006944:	607b      	str	r3, [r7, #4]
    vsnprintf(buf, sizeof(buf), fmt, args);
 8006946:	f107 0008 	add.w	r0, r7, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8006950:	2180      	movs	r1, #128	@ 0x80
 8006952:	f000 fe27 	bl	80075a4 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	4618      	mov	r0, r3
 800695c:	f7f9 fc60 	bl	8000220 <strlen>
 8006960:	4603      	mov	r3, r0
 8006962:	b29a      	uxth	r2, r3
 8006964:	f107 0108 	add.w	r1, r7, #8
 8006968:	f04f 33ff 	mov.w	r3, #4294967295
 800696c:	4804      	ldr	r0, [pc, #16]	@ (8006980 <uart_printf+0x48>)
 800696e:	f7ff f9e5 	bl	8005d3c <HAL_UART_Transmit>
}
 8006972:	bf00      	nop
 8006974:	3788      	adds	r7, #136	@ 0x88
 8006976:	46bd      	mov	sp, r7
 8006978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800697c:	b004      	add	sp, #16
 800697e:	4770      	bx	lr
 8006980:	200005bc 	.word	0x200005bc

08006984 <flash_write_color_reference>:

#include "flash.h"


void flash_write_color_reference(uint8_t sensor_side, uint8_t color_index, reference_entry_t entry)
{
 8006984:	b082      	sub	sp, #8
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	f107 0c20 	add.w	ip, r7, #32
 8006990:	e88c 000c 	stmia.w	ip, {r2, r3}
 8006994:	4603      	mov	r3, r0
 8006996:	71fb      	strb	r3, [r7, #7]
 8006998:	460b      	mov	r3, r1
 800699a:	71bb      	strb	r3, [r7, #6]
    uint32_t base_addr = (sensor_side == BH1745_ADDR_LEFT) ? FLASH_COLOR_TABLE_ADDR_LEFT : FLASH_COLOR_TABLE_ADDR_RIGHT;
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b38      	cmp	r3, #56	@ 0x38
 80069a0:	d101      	bne.n	80069a6 <flash_write_color_reference+0x22>
 80069a2:	4b17      	ldr	r3, [pc, #92]	@ (8006a00 <flash_write_color_reference+0x7c>)
 80069a4:	e000      	b.n	80069a8 <flash_write_color_reference+0x24>
 80069a6:	4b17      	ldr	r3, [pc, #92]	@ (8006a04 <flash_write_color_reference+0x80>)
 80069a8:	613b      	str	r3, [r7, #16]
    uint32_t addr = base_addr + color_index * FLASH_COLOR_ENTRY_SIZE;
 80069aa:	79bb      	ldrb	r3, [r7, #6]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]

    HAL_FLASH_Unlock();
 80069b4:	f7fc ff58 	bl	8003868 <HAL_FLASH_Unlock>

    // struct를 4바이트씩 나눠서 저장
    uint64_t* data = (uint64_t*)&entry;
 80069b8:	f107 0320 	add.w	r3, r7, #32
 80069bc:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(reference_entry_t) / 8; i++) {
 80069be:	2300      	movs	r3, #0
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e010      	b.n	80069e6 <flash_write_color_reference+0x62>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i * 8, data[i]);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	461a      	mov	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	18d1      	adds	r1, r2, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	2001      	movs	r0, #1
 80069dc:	f7fc ff00 	bl	80037e0 <HAL_FLASH_Program>
    for (int i = 0; i < sizeof(reference_entry_t) / 8; i++) {
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	3301      	adds	r3, #1
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d9eb      	bls.n	80069c4 <flash_write_color_reference+0x40>
    }

    HAL_FLASH_Lock();
 80069ec:	f7fc ff5e 	bl	80038ac <HAL_FLASH_Lock>
}
 80069f0:	bf00      	nop
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069fa:	b002      	add	sp, #8
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	0807f800 	.word	0x0807f800
 8006a04:	0807f000 	.word	0x0807f000

08006a08 <flash_read_color_reference>:

reference_entry_t flash_read_color_reference(uint8_t sensor_side, uint8_t color_index)
{
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b089      	sub	sp, #36	@ 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
 8006a14:	4613      	mov	r3, r2
 8006a16:	70bb      	strb	r3, [r7, #2]
    uint32_t base_addr = (sensor_side == BH1745_ADDR_LEFT) ? FLASH_COLOR_TABLE_ADDR_LEFT : FLASH_COLOR_TABLE_ADDR_RIGHT;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	2b38      	cmp	r3, #56	@ 0x38
 8006a1c:	d101      	bne.n	8006a22 <flash_read_color_reference+0x1a>
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <flash_read_color_reference+0x4c>)
 8006a20:	e000      	b.n	8006a24 <flash_read_color_reference+0x1c>
 8006a22:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <flash_read_color_reference+0x50>)
 8006a24:	61fb      	str	r3, [r7, #28]
    uint32_t addr = base_addr + color_index * FLASH_COLOR_ENTRY_SIZE;
 8006a26:	78bb      	ldrb	r3, [r7, #2]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]

    reference_entry_t entry;
    memcpy(&entry, (void*)addr, FLASH_COLOR_ENTRY_SIZE);
 8006a30:	69b9      	ldr	r1, [r7, #24]
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	2210      	movs	r2, #16
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fe40 	bl	80076be <memcpy>

    return entry;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	461c      	mov	r4, r3
 8006a42:	f107 0308 	add.w	r3, r7, #8
 8006a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	3724      	adds	r7, #36	@ 0x24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd90      	pop	{r4, r7, pc}
 8006a54:	0807f800 	.word	0x0807f800
 8006a58:	0807f000 	.word	0x0807f000

08006a5c <flash_erase_color_table>:

void flash_erase_color_table(uint8_t sensor_side)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8006a66:	2302      	movs	r3, #2
 8006a68:	60fb      	str	r3, [r7, #12]
    erase_init.Page      = (sensor_side == BH1745_ADDR_LEFT) ? (FLASH_COLOR_TABLE_ADDR_LEFT - 0x08000000) / FLASH_PAGE_SIZE : (FLASH_COLOR_TABLE_ADDR_RIGHT - 0x08000000) / FLASH_PAGE_SIZE;
 8006a6a:	237f      	movs	r3, #127	@ 0x7f
 8006a6c:	613b      	str	r3, [r7, #16]
    erase_init.NbPages   = 1;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 8006a72:	f7fc fef9 	bl	8003868 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 8006a76:	f107 0208 	add.w	r2, r7, #8
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fc ffc1 	bl	8003a08 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8006a86:	f7fc ff11 	bl	80038ac <HAL_FLASH_Lock>
}
 8006a8a:	bf00      	nop
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <__cvt>:
 8006a92:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a96:	ec57 6b10 	vmov	r6, r7, d0
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	bfbb      	ittet	lt
 8006aa4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006aa8:	461f      	movlt	r7, r3
 8006aaa:	2300      	movge	r3, #0
 8006aac:	232d      	movlt	r3, #45	@ 0x2d
 8006aae:	700b      	strb	r3, [r1, #0]
 8006ab0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ab2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ab6:	4691      	mov	r9, r2
 8006ab8:	f023 0820 	bic.w	r8, r3, #32
 8006abc:	bfbc      	itt	lt
 8006abe:	4632      	movlt	r2, r6
 8006ac0:	4616      	movlt	r6, r2
 8006ac2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ac6:	d005      	beq.n	8006ad4 <__cvt+0x42>
 8006ac8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006acc:	d100      	bne.n	8006ad0 <__cvt+0x3e>
 8006ace:	3401      	adds	r4, #1
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	e000      	b.n	8006ad6 <__cvt+0x44>
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	ab03      	add	r3, sp, #12
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	ab02      	add	r3, sp, #8
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	ec47 6b10 	vmov	d0, r6, r7
 8006ae2:	4653      	mov	r3, sl
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	f000 fe83 	bl	80077f0 <_dtoa_r>
 8006aea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006aee:	4605      	mov	r5, r0
 8006af0:	d119      	bne.n	8006b26 <__cvt+0x94>
 8006af2:	f019 0f01 	tst.w	r9, #1
 8006af6:	d00e      	beq.n	8006b16 <__cvt+0x84>
 8006af8:	eb00 0904 	add.w	r9, r0, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	2300      	movs	r3, #0
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7f9 ffb8 	bl	8000a78 <__aeabi_dcmpeq>
 8006b08:	b108      	cbz	r0, 8006b0e <__cvt+0x7c>
 8006b0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b0e:	2230      	movs	r2, #48	@ 0x30
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	454b      	cmp	r3, r9
 8006b14:	d31e      	bcc.n	8006b54 <__cvt+0xc2>
 8006b16:	9b03      	ldr	r3, [sp, #12]
 8006b18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b1a:	1b5b      	subs	r3, r3, r5
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	b004      	add	sp, #16
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b2a:	eb00 0904 	add.w	r9, r0, r4
 8006b2e:	d1e5      	bne.n	8006afc <__cvt+0x6a>
 8006b30:	7803      	ldrb	r3, [r0, #0]
 8006b32:	2b30      	cmp	r3, #48	@ 0x30
 8006b34:	d10a      	bne.n	8006b4c <__cvt+0xba>
 8006b36:	2200      	movs	r2, #0
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	f7f9 ff9b 	bl	8000a78 <__aeabi_dcmpeq>
 8006b42:	b918      	cbnz	r0, 8006b4c <__cvt+0xba>
 8006b44:	f1c4 0401 	rsb	r4, r4, #1
 8006b48:	f8ca 4000 	str.w	r4, [sl]
 8006b4c:	f8da 3000 	ldr.w	r3, [sl]
 8006b50:	4499      	add	r9, r3
 8006b52:	e7d3      	b.n	8006afc <__cvt+0x6a>
 8006b54:	1c59      	adds	r1, r3, #1
 8006b56:	9103      	str	r1, [sp, #12]
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	e7d9      	b.n	8006b10 <__cvt+0x7e>

08006b5c <__exponent>:
 8006b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b5e:	2900      	cmp	r1, #0
 8006b60:	bfba      	itte	lt
 8006b62:	4249      	neglt	r1, r1
 8006b64:	232d      	movlt	r3, #45	@ 0x2d
 8006b66:	232b      	movge	r3, #43	@ 0x2b
 8006b68:	2909      	cmp	r1, #9
 8006b6a:	7002      	strb	r2, [r0, #0]
 8006b6c:	7043      	strb	r3, [r0, #1]
 8006b6e:	dd29      	ble.n	8006bc4 <__exponent+0x68>
 8006b70:	f10d 0307 	add.w	r3, sp, #7
 8006b74:	461d      	mov	r5, r3
 8006b76:	270a      	movs	r7, #10
 8006b78:	461a      	mov	r2, r3
 8006b7a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b7e:	fb07 1416 	mls	r4, r7, r6, r1
 8006b82:	3430      	adds	r4, #48	@ 0x30
 8006b84:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b88:	460c      	mov	r4, r1
 8006b8a:	2c63      	cmp	r4, #99	@ 0x63
 8006b8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b90:	4631      	mov	r1, r6
 8006b92:	dcf1      	bgt.n	8006b78 <__exponent+0x1c>
 8006b94:	3130      	adds	r1, #48	@ 0x30
 8006b96:	1e94      	subs	r4, r2, #2
 8006b98:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b9c:	1c41      	adds	r1, r0, #1
 8006b9e:	4623      	mov	r3, r4
 8006ba0:	42ab      	cmp	r3, r5
 8006ba2:	d30a      	bcc.n	8006bba <__exponent+0x5e>
 8006ba4:	f10d 0309 	add.w	r3, sp, #9
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	42ac      	cmp	r4, r5
 8006bac:	bf88      	it	hi
 8006bae:	2300      	movhi	r3, #0
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	4403      	add	r3, r0
 8006bb4:	1a18      	subs	r0, r3, r0
 8006bb6:	b003      	add	sp, #12
 8006bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bba:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bc2:	e7ed      	b.n	8006ba0 <__exponent+0x44>
 8006bc4:	2330      	movs	r3, #48	@ 0x30
 8006bc6:	3130      	adds	r1, #48	@ 0x30
 8006bc8:	7083      	strb	r3, [r0, #2]
 8006bca:	70c1      	strb	r1, [r0, #3]
 8006bcc:	1d03      	adds	r3, r0, #4
 8006bce:	e7f1      	b.n	8006bb4 <__exponent+0x58>

08006bd0 <_printf_float>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	b08d      	sub	sp, #52	@ 0x34
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bdc:	4616      	mov	r6, r2
 8006bde:	461f      	mov	r7, r3
 8006be0:	4605      	mov	r5, r0
 8006be2:	f000 fcf5 	bl	80075d0 <_localeconv_r>
 8006be6:	6803      	ldr	r3, [r0, #0]
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7f9 fb18 	bl	8000220 <strlen>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf8:	9005      	str	r0, [sp, #20]
 8006bfa:	3307      	adds	r3, #7
 8006bfc:	f023 0307 	bic.w	r3, r3, #7
 8006c00:	f103 0208 	add.w	r2, r3, #8
 8006c04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c08:	f8d4 b000 	ldr.w	fp, [r4]
 8006c0c:	f8c8 2000 	str.w	r2, [r8]
 8006c10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c26:	4b9c      	ldr	r3, [pc, #624]	@ (8006e98 <_printf_float+0x2c8>)
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	f7f9 ff56 	bl	8000adc <__aeabi_dcmpun>
 8006c30:	bb70      	cbnz	r0, 8006c90 <_printf_float+0xc0>
 8006c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c36:	4b98      	ldr	r3, [pc, #608]	@ (8006e98 <_printf_float+0x2c8>)
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3c:	f7f9 ff30 	bl	8000aa0 <__aeabi_dcmple>
 8006c40:	bb30      	cbnz	r0, 8006c90 <_printf_float+0xc0>
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	4640      	mov	r0, r8
 8006c48:	4649      	mov	r1, r9
 8006c4a:	f7f9 ff1f 	bl	8000a8c <__aeabi_dcmplt>
 8006c4e:	b110      	cbz	r0, 8006c56 <_printf_float+0x86>
 8006c50:	232d      	movs	r3, #45	@ 0x2d
 8006c52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c56:	4a91      	ldr	r2, [pc, #580]	@ (8006e9c <_printf_float+0x2cc>)
 8006c58:	4b91      	ldr	r3, [pc, #580]	@ (8006ea0 <_printf_float+0x2d0>)
 8006c5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c5e:	bf8c      	ite	hi
 8006c60:	4690      	movhi	r8, r2
 8006c62:	4698      	movls	r8, r3
 8006c64:	2303      	movs	r3, #3
 8006c66:	6123      	str	r3, [r4, #16]
 8006c68:	f02b 0304 	bic.w	r3, fp, #4
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	9700      	str	r7, [sp, #0]
 8006c74:	4633      	mov	r3, r6
 8006c76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f9d2 	bl	8007024 <_printf_common>
 8006c80:	3001      	adds	r0, #1
 8006c82:	f040 808d 	bne.w	8006da0 <_printf_float+0x1d0>
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	b00d      	add	sp, #52	@ 0x34
 8006c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	4642      	mov	r2, r8
 8006c92:	464b      	mov	r3, r9
 8006c94:	4640      	mov	r0, r8
 8006c96:	4649      	mov	r1, r9
 8006c98:	f7f9 ff20 	bl	8000adc <__aeabi_dcmpun>
 8006c9c:	b140      	cbz	r0, 8006cb0 <_printf_float+0xe0>
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfbc      	itt	lt
 8006ca4:	232d      	movlt	r3, #45	@ 0x2d
 8006ca6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006caa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea4 <_printf_float+0x2d4>)
 8006cac:	4b7e      	ldr	r3, [pc, #504]	@ (8006ea8 <_printf_float+0x2d8>)
 8006cae:	e7d4      	b.n	8006c5a <_printf_float+0x8a>
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006cb6:	9206      	str	r2, [sp, #24]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	d13b      	bne.n	8006d34 <_printf_float+0x164>
 8006cbc:	2306      	movs	r3, #6
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	9303      	str	r3, [sp, #12]
 8006cca:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ccc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cd0:	ab09      	add	r3, sp, #36	@ 0x24
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	6861      	ldr	r1, [r4, #4]
 8006cd6:	ec49 8b10 	vmov	d0, r8, r9
 8006cda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f7ff fed7 	bl	8006a92 <__cvt>
 8006ce4:	9b06      	ldr	r3, [sp, #24]
 8006ce6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ce8:	2b47      	cmp	r3, #71	@ 0x47
 8006cea:	4680      	mov	r8, r0
 8006cec:	d129      	bne.n	8006d42 <_printf_float+0x172>
 8006cee:	1cc8      	adds	r0, r1, #3
 8006cf0:	db02      	blt.n	8006cf8 <_printf_float+0x128>
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	dd41      	ble.n	8006d7c <_printf_float+0x1ac>
 8006cf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cfc:	fa5f fa8a 	uxtb.w	sl, sl
 8006d00:	3901      	subs	r1, #1
 8006d02:	4652      	mov	r2, sl
 8006d04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d08:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d0a:	f7ff ff27 	bl	8006b5c <__exponent>
 8006d0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d10:	1813      	adds	r3, r2, r0
 8006d12:	2a01      	cmp	r2, #1
 8006d14:	4681      	mov	r9, r0
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	dc02      	bgt.n	8006d20 <_printf_float+0x150>
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	07d2      	lsls	r2, r2, #31
 8006d1e:	d501      	bpl.n	8006d24 <_printf_float+0x154>
 8006d20:	3301      	adds	r3, #1
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0a2      	beq.n	8006c72 <_printf_float+0xa2>
 8006d2c:	232d      	movs	r3, #45	@ 0x2d
 8006d2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d32:	e79e      	b.n	8006c72 <_printf_float+0xa2>
 8006d34:	9a06      	ldr	r2, [sp, #24]
 8006d36:	2a47      	cmp	r2, #71	@ 0x47
 8006d38:	d1c2      	bne.n	8006cc0 <_printf_float+0xf0>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1c0      	bne.n	8006cc0 <_printf_float+0xf0>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e7bd      	b.n	8006cbe <_printf_float+0xee>
 8006d42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d46:	d9db      	bls.n	8006d00 <_printf_float+0x130>
 8006d48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d4c:	d118      	bne.n	8006d80 <_printf_float+0x1b0>
 8006d4e:	2900      	cmp	r1, #0
 8006d50:	6863      	ldr	r3, [r4, #4]
 8006d52:	dd0b      	ble.n	8006d6c <_printf_float+0x19c>
 8006d54:	6121      	str	r1, [r4, #16]
 8006d56:	b913      	cbnz	r3, 8006d5e <_printf_float+0x18e>
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	07d0      	lsls	r0, r2, #31
 8006d5c:	d502      	bpl.n	8006d64 <_printf_float+0x194>
 8006d5e:	3301      	adds	r3, #1
 8006d60:	440b      	add	r3, r1
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d66:	f04f 0900 	mov.w	r9, #0
 8006d6a:	e7db      	b.n	8006d24 <_printf_float+0x154>
 8006d6c:	b913      	cbnz	r3, 8006d74 <_printf_float+0x1a4>
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	07d2      	lsls	r2, r2, #31
 8006d72:	d501      	bpl.n	8006d78 <_printf_float+0x1a8>
 8006d74:	3302      	adds	r3, #2
 8006d76:	e7f4      	b.n	8006d62 <_printf_float+0x192>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e7f2      	b.n	8006d62 <_printf_float+0x192>
 8006d7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d82:	4299      	cmp	r1, r3
 8006d84:	db05      	blt.n	8006d92 <_printf_float+0x1c2>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	6121      	str	r1, [r4, #16]
 8006d8a:	07d8      	lsls	r0, r3, #31
 8006d8c:	d5ea      	bpl.n	8006d64 <_printf_float+0x194>
 8006d8e:	1c4b      	adds	r3, r1, #1
 8006d90:	e7e7      	b.n	8006d62 <_printf_float+0x192>
 8006d92:	2900      	cmp	r1, #0
 8006d94:	bfd4      	ite	le
 8006d96:	f1c1 0202 	rsble	r2, r1, #2
 8006d9a:	2201      	movgt	r2, #1
 8006d9c:	4413      	add	r3, r2
 8006d9e:	e7e0      	b.n	8006d62 <_printf_float+0x192>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	055a      	lsls	r2, r3, #21
 8006da4:	d407      	bmi.n	8006db6 <_printf_float+0x1e6>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	4642      	mov	r2, r8
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	d12b      	bne.n	8006e0c <_printf_float+0x23c>
 8006db4:	e767      	b.n	8006c86 <_printf_float+0xb6>
 8006db6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dba:	f240 80dd 	bls.w	8006f78 <_printf_float+0x3a8>
 8006dbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f7f9 fe57 	bl	8000a78 <__aeabi_dcmpeq>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d033      	beq.n	8006e36 <_printf_float+0x266>
 8006dce:	4a37      	ldr	r2, [pc, #220]	@ (8006eac <_printf_float+0x2dc>)
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f af54 	beq.w	8006c86 <_printf_float+0xb6>
 8006dde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006de2:	4543      	cmp	r3, r8
 8006de4:	db02      	blt.n	8006dec <_printf_float+0x21c>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	07d8      	lsls	r0, r3, #31
 8006dea:	d50f      	bpl.n	8006e0c <_printf_float+0x23c>
 8006dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af45 	beq.w	8006c86 <_printf_float+0xb6>
 8006dfc:	f04f 0900 	mov.w	r9, #0
 8006e00:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e04:	f104 0a1a 	add.w	sl, r4, #26
 8006e08:	45c8      	cmp	r8, r9
 8006e0a:	dc09      	bgt.n	8006e20 <_printf_float+0x250>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	079b      	lsls	r3, r3, #30
 8006e10:	f100 8103 	bmi.w	800701a <_printf_float+0x44a>
 8006e14:	68e0      	ldr	r0, [r4, #12]
 8006e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e18:	4298      	cmp	r0, r3
 8006e1a:	bfb8      	it	lt
 8006e1c:	4618      	movlt	r0, r3
 8006e1e:	e734      	b.n	8006c8a <_printf_float+0xba>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4652      	mov	r2, sl
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	f43f af2b 	beq.w	8006c86 <_printf_float+0xb6>
 8006e30:	f109 0901 	add.w	r9, r9, #1
 8006e34:	e7e8      	b.n	8006e08 <_printf_float+0x238>
 8006e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dc39      	bgt.n	8006eb0 <_printf_float+0x2e0>
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eac <_printf_float+0x2dc>)
 8006e3e:	2301      	movs	r3, #1
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f af1d 	beq.w	8006c86 <_printf_float+0xb6>
 8006e4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e50:	ea59 0303 	orrs.w	r3, r9, r3
 8006e54:	d102      	bne.n	8006e5c <_printf_float+0x28c>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	07d9      	lsls	r1, r3, #31
 8006e5a:	d5d7      	bpl.n	8006e0c <_printf_float+0x23c>
 8006e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e60:	4631      	mov	r1, r6
 8006e62:	4628      	mov	r0, r5
 8006e64:	47b8      	blx	r7
 8006e66:	3001      	adds	r0, #1
 8006e68:	f43f af0d 	beq.w	8006c86 <_printf_float+0xb6>
 8006e6c:	f04f 0a00 	mov.w	sl, #0
 8006e70:	f104 0b1a 	add.w	fp, r4, #26
 8006e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e76:	425b      	negs	r3, r3
 8006e78:	4553      	cmp	r3, sl
 8006e7a:	dc01      	bgt.n	8006e80 <_printf_float+0x2b0>
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	e793      	b.n	8006da8 <_printf_float+0x1d8>
 8006e80:	2301      	movs	r3, #1
 8006e82:	465a      	mov	r2, fp
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f aefb 	beq.w	8006c86 <_printf_float+0xb6>
 8006e90:	f10a 0a01 	add.w	sl, sl, #1
 8006e94:	e7ee      	b.n	8006e74 <_printf_float+0x2a4>
 8006e96:	bf00      	nop
 8006e98:	7fefffff 	.word	0x7fefffff
 8006e9c:	08009b40 	.word	0x08009b40
 8006ea0:	08009b3c 	.word	0x08009b3c
 8006ea4:	08009b48 	.word	0x08009b48
 8006ea8:	08009b44 	.word	0x08009b44
 8006eac:	08009b4c 	.word	0x08009b4c
 8006eb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eb2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006eb6:	4553      	cmp	r3, sl
 8006eb8:	bfa8      	it	ge
 8006eba:	4653      	movge	r3, sl
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	4699      	mov	r9, r3
 8006ec0:	dc36      	bgt.n	8006f30 <_printf_float+0x360>
 8006ec2:	f04f 0b00 	mov.w	fp, #0
 8006ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eca:	f104 021a 	add.w	r2, r4, #26
 8006ece:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ed0:	9306      	str	r3, [sp, #24]
 8006ed2:	eba3 0309 	sub.w	r3, r3, r9
 8006ed6:	455b      	cmp	r3, fp
 8006ed8:	dc31      	bgt.n	8006f3e <_printf_float+0x36e>
 8006eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006edc:	459a      	cmp	sl, r3
 8006ede:	dc3a      	bgt.n	8006f56 <_printf_float+0x386>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07da      	lsls	r2, r3, #31
 8006ee4:	d437      	bmi.n	8006f56 <_printf_float+0x386>
 8006ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee8:	ebaa 0903 	sub.w	r9, sl, r3
 8006eec:	9b06      	ldr	r3, [sp, #24]
 8006eee:	ebaa 0303 	sub.w	r3, sl, r3
 8006ef2:	4599      	cmp	r9, r3
 8006ef4:	bfa8      	it	ge
 8006ef6:	4699      	movge	r9, r3
 8006ef8:	f1b9 0f00 	cmp.w	r9, #0
 8006efc:	dc33      	bgt.n	8006f66 <_printf_float+0x396>
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f06:	f104 0b1a 	add.w	fp, r4, #26
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f10:	eba3 0309 	sub.w	r3, r3, r9
 8006f14:	4543      	cmp	r3, r8
 8006f16:	f77f af79 	ble.w	8006e0c <_printf_float+0x23c>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	465a      	mov	r2, fp
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f aeae 	beq.w	8006c86 <_printf_float+0xb6>
 8006f2a:	f108 0801 	add.w	r8, r8, #1
 8006f2e:	e7ec      	b.n	8006f0a <_printf_float+0x33a>
 8006f30:	4642      	mov	r2, r8
 8006f32:	4631      	mov	r1, r6
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b8      	blx	r7
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d1c2      	bne.n	8006ec2 <_printf_float+0x2f2>
 8006f3c:	e6a3      	b.n	8006c86 <_printf_float+0xb6>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	9206      	str	r2, [sp, #24]
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f ae9c 	beq.w	8006c86 <_printf_float+0xb6>
 8006f4e:	9a06      	ldr	r2, [sp, #24]
 8006f50:	f10b 0b01 	add.w	fp, fp, #1
 8006f54:	e7bb      	b.n	8006ece <_printf_float+0x2fe>
 8006f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d1c0      	bne.n	8006ee6 <_printf_float+0x316>
 8006f64:	e68f      	b.n	8006c86 <_printf_float+0xb6>
 8006f66:	9a06      	ldr	r2, [sp, #24]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	4442      	add	r2, r8
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4628      	mov	r0, r5
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	d1c3      	bne.n	8006efe <_printf_float+0x32e>
 8006f76:	e686      	b.n	8006c86 <_printf_float+0xb6>
 8006f78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f7c:	f1ba 0f01 	cmp.w	sl, #1
 8006f80:	dc01      	bgt.n	8006f86 <_printf_float+0x3b6>
 8006f82:	07db      	lsls	r3, r3, #31
 8006f84:	d536      	bpl.n	8006ff4 <_printf_float+0x424>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4642      	mov	r2, r8
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae78 	beq.w	8006c86 <_printf_float+0xb6>
 8006f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae70 	beq.w	8006c86 <_printf_float+0xb6>
 8006fa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006faa:	2200      	movs	r2, #0
 8006fac:	2300      	movs	r3, #0
 8006fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb2:	f7f9 fd61 	bl	8000a78 <__aeabi_dcmpeq>
 8006fb6:	b9c0      	cbnz	r0, 8006fea <_printf_float+0x41a>
 8006fb8:	4653      	mov	r3, sl
 8006fba:	f108 0201 	add.w	r2, r8, #1
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d10c      	bne.n	8006fe2 <_printf_float+0x412>
 8006fc8:	e65d      	b.n	8006c86 <_printf_float+0xb6>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	465a      	mov	r2, fp
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	f43f ae56 	beq.w	8006c86 <_printf_float+0xb6>
 8006fda:	f108 0801 	add.w	r8, r8, #1
 8006fde:	45d0      	cmp	r8, sl
 8006fe0:	dbf3      	blt.n	8006fca <_printf_float+0x3fa>
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fe8:	e6df      	b.n	8006daa <_printf_float+0x1da>
 8006fea:	f04f 0800 	mov.w	r8, #0
 8006fee:	f104 0b1a 	add.w	fp, r4, #26
 8006ff2:	e7f4      	b.n	8006fde <_printf_float+0x40e>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	e7e1      	b.n	8006fbe <_printf_float+0x3ee>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	464a      	mov	r2, r9
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f ae3e 	beq.w	8006c86 <_printf_float+0xb6>
 800700a:	f108 0801 	add.w	r8, r8, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	4543      	cmp	r3, r8
 8007016:	dcf0      	bgt.n	8006ffa <_printf_float+0x42a>
 8007018:	e6fc      	b.n	8006e14 <_printf_float+0x244>
 800701a:	f04f 0800 	mov.w	r8, #0
 800701e:	f104 0919 	add.w	r9, r4, #25
 8007022:	e7f4      	b.n	800700e <_printf_float+0x43e>

08007024 <_printf_common>:
 8007024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007028:	4616      	mov	r6, r2
 800702a:	4698      	mov	r8, r3
 800702c:	688a      	ldr	r2, [r1, #8]
 800702e:	690b      	ldr	r3, [r1, #16]
 8007030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007034:	4293      	cmp	r3, r2
 8007036:	bfb8      	it	lt
 8007038:	4613      	movlt	r3, r2
 800703a:	6033      	str	r3, [r6, #0]
 800703c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007040:	4607      	mov	r7, r0
 8007042:	460c      	mov	r4, r1
 8007044:	b10a      	cbz	r2, 800704a <_printf_common+0x26>
 8007046:	3301      	adds	r3, #1
 8007048:	6033      	str	r3, [r6, #0]
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	0699      	lsls	r1, r3, #26
 800704e:	bf42      	ittt	mi
 8007050:	6833      	ldrmi	r3, [r6, #0]
 8007052:	3302      	addmi	r3, #2
 8007054:	6033      	strmi	r3, [r6, #0]
 8007056:	6825      	ldr	r5, [r4, #0]
 8007058:	f015 0506 	ands.w	r5, r5, #6
 800705c:	d106      	bne.n	800706c <_printf_common+0x48>
 800705e:	f104 0a19 	add.w	sl, r4, #25
 8007062:	68e3      	ldr	r3, [r4, #12]
 8007064:	6832      	ldr	r2, [r6, #0]
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	42ab      	cmp	r3, r5
 800706a:	dc26      	bgt.n	80070ba <_printf_common+0x96>
 800706c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	3b00      	subs	r3, #0
 8007074:	bf18      	it	ne
 8007076:	2301      	movne	r3, #1
 8007078:	0692      	lsls	r2, r2, #26
 800707a:	d42b      	bmi.n	80070d4 <_printf_common+0xb0>
 800707c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007080:	4641      	mov	r1, r8
 8007082:	4638      	mov	r0, r7
 8007084:	47c8      	blx	r9
 8007086:	3001      	adds	r0, #1
 8007088:	d01e      	beq.n	80070c8 <_printf_common+0xa4>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	6922      	ldr	r2, [r4, #16]
 800708e:	f003 0306 	and.w	r3, r3, #6
 8007092:	2b04      	cmp	r3, #4
 8007094:	bf02      	ittt	eq
 8007096:	68e5      	ldreq	r5, [r4, #12]
 8007098:	6833      	ldreq	r3, [r6, #0]
 800709a:	1aed      	subeq	r5, r5, r3
 800709c:	68a3      	ldr	r3, [r4, #8]
 800709e:	bf0c      	ite	eq
 80070a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070a4:	2500      	movne	r5, #0
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bfc4      	itt	gt
 80070aa:	1a9b      	subgt	r3, r3, r2
 80070ac:	18ed      	addgt	r5, r5, r3
 80070ae:	2600      	movs	r6, #0
 80070b0:	341a      	adds	r4, #26
 80070b2:	42b5      	cmp	r5, r6
 80070b4:	d11a      	bne.n	80070ec <_printf_common+0xc8>
 80070b6:	2000      	movs	r0, #0
 80070b8:	e008      	b.n	80070cc <_printf_common+0xa8>
 80070ba:	2301      	movs	r3, #1
 80070bc:	4652      	mov	r2, sl
 80070be:	4641      	mov	r1, r8
 80070c0:	4638      	mov	r0, r7
 80070c2:	47c8      	blx	r9
 80070c4:	3001      	adds	r0, #1
 80070c6:	d103      	bne.n	80070d0 <_printf_common+0xac>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d0:	3501      	adds	r5, #1
 80070d2:	e7c6      	b.n	8007062 <_printf_common+0x3e>
 80070d4:	18e1      	adds	r1, r4, r3
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	2030      	movs	r0, #48	@ 0x30
 80070da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070de:	4422      	add	r2, r4
 80070e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070e8:	3302      	adds	r3, #2
 80070ea:	e7c7      	b.n	800707c <_printf_common+0x58>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4622      	mov	r2, r4
 80070f0:	4641      	mov	r1, r8
 80070f2:	4638      	mov	r0, r7
 80070f4:	47c8      	blx	r9
 80070f6:	3001      	adds	r0, #1
 80070f8:	d0e6      	beq.n	80070c8 <_printf_common+0xa4>
 80070fa:	3601      	adds	r6, #1
 80070fc:	e7d9      	b.n	80070b2 <_printf_common+0x8e>
	...

08007100 <_printf_i>:
 8007100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007104:	7e0f      	ldrb	r7, [r1, #24]
 8007106:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007108:	2f78      	cmp	r7, #120	@ 0x78
 800710a:	4691      	mov	r9, r2
 800710c:	4680      	mov	r8, r0
 800710e:	460c      	mov	r4, r1
 8007110:	469a      	mov	sl, r3
 8007112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007116:	d807      	bhi.n	8007128 <_printf_i+0x28>
 8007118:	2f62      	cmp	r7, #98	@ 0x62
 800711a:	d80a      	bhi.n	8007132 <_printf_i+0x32>
 800711c:	2f00      	cmp	r7, #0
 800711e:	f000 80d1 	beq.w	80072c4 <_printf_i+0x1c4>
 8007122:	2f58      	cmp	r7, #88	@ 0x58
 8007124:	f000 80b8 	beq.w	8007298 <_printf_i+0x198>
 8007128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800712c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007130:	e03a      	b.n	80071a8 <_printf_i+0xa8>
 8007132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007136:	2b15      	cmp	r3, #21
 8007138:	d8f6      	bhi.n	8007128 <_printf_i+0x28>
 800713a:	a101      	add	r1, pc, #4	@ (adr r1, 8007140 <_printf_i+0x40>)
 800713c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007140:	08007199 	.word	0x08007199
 8007144:	080071ad 	.word	0x080071ad
 8007148:	08007129 	.word	0x08007129
 800714c:	08007129 	.word	0x08007129
 8007150:	08007129 	.word	0x08007129
 8007154:	08007129 	.word	0x08007129
 8007158:	080071ad 	.word	0x080071ad
 800715c:	08007129 	.word	0x08007129
 8007160:	08007129 	.word	0x08007129
 8007164:	08007129 	.word	0x08007129
 8007168:	08007129 	.word	0x08007129
 800716c:	080072ab 	.word	0x080072ab
 8007170:	080071d7 	.word	0x080071d7
 8007174:	08007265 	.word	0x08007265
 8007178:	08007129 	.word	0x08007129
 800717c:	08007129 	.word	0x08007129
 8007180:	080072cd 	.word	0x080072cd
 8007184:	08007129 	.word	0x08007129
 8007188:	080071d7 	.word	0x080071d7
 800718c:	08007129 	.word	0x08007129
 8007190:	08007129 	.word	0x08007129
 8007194:	0800726d 	.word	0x0800726d
 8007198:	6833      	ldr	r3, [r6, #0]
 800719a:	1d1a      	adds	r2, r3, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6032      	str	r2, [r6, #0]
 80071a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09c      	b.n	80072e6 <_printf_i+0x1e6>
 80071ac:	6833      	ldr	r3, [r6, #0]
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	1d19      	adds	r1, r3, #4
 80071b2:	6031      	str	r1, [r6, #0]
 80071b4:	0606      	lsls	r6, r0, #24
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0xbc>
 80071b8:	681d      	ldr	r5, [r3, #0]
 80071ba:	e003      	b.n	80071c4 <_printf_i+0xc4>
 80071bc:	0645      	lsls	r5, r0, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0xb8>
 80071c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071c4:	2d00      	cmp	r5, #0
 80071c6:	da03      	bge.n	80071d0 <_printf_i+0xd0>
 80071c8:	232d      	movs	r3, #45	@ 0x2d
 80071ca:	426d      	negs	r5, r5
 80071cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d0:	4858      	ldr	r0, [pc, #352]	@ (8007334 <_printf_i+0x234>)
 80071d2:	230a      	movs	r3, #10
 80071d4:	e011      	b.n	80071fa <_printf_i+0xfa>
 80071d6:	6821      	ldr	r1, [r4, #0]
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	0608      	lsls	r0, r1, #24
 80071dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071e0:	d402      	bmi.n	80071e8 <_printf_i+0xe8>
 80071e2:	0649      	lsls	r1, r1, #25
 80071e4:	bf48      	it	mi
 80071e6:	b2ad      	uxthmi	r5, r5
 80071e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071ea:	4852      	ldr	r0, [pc, #328]	@ (8007334 <_printf_i+0x234>)
 80071ec:	6033      	str	r3, [r6, #0]
 80071ee:	bf14      	ite	ne
 80071f0:	230a      	movne	r3, #10
 80071f2:	2308      	moveq	r3, #8
 80071f4:	2100      	movs	r1, #0
 80071f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071fa:	6866      	ldr	r6, [r4, #4]
 80071fc:	60a6      	str	r6, [r4, #8]
 80071fe:	2e00      	cmp	r6, #0
 8007200:	db05      	blt.n	800720e <_printf_i+0x10e>
 8007202:	6821      	ldr	r1, [r4, #0]
 8007204:	432e      	orrs	r6, r5
 8007206:	f021 0104 	bic.w	r1, r1, #4
 800720a:	6021      	str	r1, [r4, #0]
 800720c:	d04b      	beq.n	80072a6 <_printf_i+0x1a6>
 800720e:	4616      	mov	r6, r2
 8007210:	fbb5 f1f3 	udiv	r1, r5, r3
 8007214:	fb03 5711 	mls	r7, r3, r1, r5
 8007218:	5dc7      	ldrb	r7, [r0, r7]
 800721a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800721e:	462f      	mov	r7, r5
 8007220:	42bb      	cmp	r3, r7
 8007222:	460d      	mov	r5, r1
 8007224:	d9f4      	bls.n	8007210 <_printf_i+0x110>
 8007226:	2b08      	cmp	r3, #8
 8007228:	d10b      	bne.n	8007242 <_printf_i+0x142>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	07df      	lsls	r7, r3, #31
 800722e:	d508      	bpl.n	8007242 <_printf_i+0x142>
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	6861      	ldr	r1, [r4, #4]
 8007234:	4299      	cmp	r1, r3
 8007236:	bfde      	ittt	le
 8007238:	2330      	movle	r3, #48	@ 0x30
 800723a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800723e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007242:	1b92      	subs	r2, r2, r6
 8007244:	6122      	str	r2, [r4, #16]
 8007246:	f8cd a000 	str.w	sl, [sp]
 800724a:	464b      	mov	r3, r9
 800724c:	aa03      	add	r2, sp, #12
 800724e:	4621      	mov	r1, r4
 8007250:	4640      	mov	r0, r8
 8007252:	f7ff fee7 	bl	8007024 <_printf_common>
 8007256:	3001      	adds	r0, #1
 8007258:	d14a      	bne.n	80072f0 <_printf_i+0x1f0>
 800725a:	f04f 30ff 	mov.w	r0, #4294967295
 800725e:	b004      	add	sp, #16
 8007260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	f043 0320 	orr.w	r3, r3, #32
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	4832      	ldr	r0, [pc, #200]	@ (8007338 <_printf_i+0x238>)
 800726e:	2778      	movs	r7, #120	@ 0x78
 8007270:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	6831      	ldr	r1, [r6, #0]
 8007278:	061f      	lsls	r7, r3, #24
 800727a:	f851 5b04 	ldr.w	r5, [r1], #4
 800727e:	d402      	bmi.n	8007286 <_printf_i+0x186>
 8007280:	065f      	lsls	r7, r3, #25
 8007282:	bf48      	it	mi
 8007284:	b2ad      	uxthmi	r5, r5
 8007286:	6031      	str	r1, [r6, #0]
 8007288:	07d9      	lsls	r1, r3, #31
 800728a:	bf44      	itt	mi
 800728c:	f043 0320 	orrmi.w	r3, r3, #32
 8007290:	6023      	strmi	r3, [r4, #0]
 8007292:	b11d      	cbz	r5, 800729c <_printf_i+0x19c>
 8007294:	2310      	movs	r3, #16
 8007296:	e7ad      	b.n	80071f4 <_printf_i+0xf4>
 8007298:	4826      	ldr	r0, [pc, #152]	@ (8007334 <_printf_i+0x234>)
 800729a:	e7e9      	b.n	8007270 <_printf_i+0x170>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	f023 0320 	bic.w	r3, r3, #32
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	e7f6      	b.n	8007294 <_printf_i+0x194>
 80072a6:	4616      	mov	r6, r2
 80072a8:	e7bd      	b.n	8007226 <_printf_i+0x126>
 80072aa:	6833      	ldr	r3, [r6, #0]
 80072ac:	6825      	ldr	r5, [r4, #0]
 80072ae:	6961      	ldr	r1, [r4, #20]
 80072b0:	1d18      	adds	r0, r3, #4
 80072b2:	6030      	str	r0, [r6, #0]
 80072b4:	062e      	lsls	r6, r5, #24
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	d501      	bpl.n	80072be <_printf_i+0x1be>
 80072ba:	6019      	str	r1, [r3, #0]
 80072bc:	e002      	b.n	80072c4 <_printf_i+0x1c4>
 80072be:	0668      	lsls	r0, r5, #25
 80072c0:	d5fb      	bpl.n	80072ba <_printf_i+0x1ba>
 80072c2:	8019      	strh	r1, [r3, #0]
 80072c4:	2300      	movs	r3, #0
 80072c6:	6123      	str	r3, [r4, #16]
 80072c8:	4616      	mov	r6, r2
 80072ca:	e7bc      	b.n	8007246 <_printf_i+0x146>
 80072cc:	6833      	ldr	r3, [r6, #0]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	6032      	str	r2, [r6, #0]
 80072d2:	681e      	ldr	r6, [r3, #0]
 80072d4:	6862      	ldr	r2, [r4, #4]
 80072d6:	2100      	movs	r1, #0
 80072d8:	4630      	mov	r0, r6
 80072da:	f7f8 ff51 	bl	8000180 <memchr>
 80072de:	b108      	cbz	r0, 80072e4 <_printf_i+0x1e4>
 80072e0:	1b80      	subs	r0, r0, r6
 80072e2:	6060      	str	r0, [r4, #4]
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	2300      	movs	r3, #0
 80072ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ee:	e7aa      	b.n	8007246 <_printf_i+0x146>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	4632      	mov	r2, r6
 80072f4:	4649      	mov	r1, r9
 80072f6:	4640      	mov	r0, r8
 80072f8:	47d0      	blx	sl
 80072fa:	3001      	adds	r0, #1
 80072fc:	d0ad      	beq.n	800725a <_printf_i+0x15a>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	079b      	lsls	r3, r3, #30
 8007302:	d413      	bmi.n	800732c <_printf_i+0x22c>
 8007304:	68e0      	ldr	r0, [r4, #12]
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	4298      	cmp	r0, r3
 800730a:	bfb8      	it	lt
 800730c:	4618      	movlt	r0, r3
 800730e:	e7a6      	b.n	800725e <_printf_i+0x15e>
 8007310:	2301      	movs	r3, #1
 8007312:	4632      	mov	r2, r6
 8007314:	4649      	mov	r1, r9
 8007316:	4640      	mov	r0, r8
 8007318:	47d0      	blx	sl
 800731a:	3001      	adds	r0, #1
 800731c:	d09d      	beq.n	800725a <_printf_i+0x15a>
 800731e:	3501      	adds	r5, #1
 8007320:	68e3      	ldr	r3, [r4, #12]
 8007322:	9903      	ldr	r1, [sp, #12]
 8007324:	1a5b      	subs	r3, r3, r1
 8007326:	42ab      	cmp	r3, r5
 8007328:	dcf2      	bgt.n	8007310 <_printf_i+0x210>
 800732a:	e7eb      	b.n	8007304 <_printf_i+0x204>
 800732c:	2500      	movs	r5, #0
 800732e:	f104 0619 	add.w	r6, r4, #25
 8007332:	e7f5      	b.n	8007320 <_printf_i+0x220>
 8007334:	08009b4e 	.word	0x08009b4e
 8007338:	08009b5f 	.word	0x08009b5f

0800733c <std>:
 800733c:	2300      	movs	r3, #0
 800733e:	b510      	push	{r4, lr}
 8007340:	4604      	mov	r4, r0
 8007342:	e9c0 3300 	strd	r3, r3, [r0]
 8007346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800734a:	6083      	str	r3, [r0, #8]
 800734c:	8181      	strh	r1, [r0, #12]
 800734e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007350:	81c2      	strh	r2, [r0, #14]
 8007352:	6183      	str	r3, [r0, #24]
 8007354:	4619      	mov	r1, r3
 8007356:	2208      	movs	r2, #8
 8007358:	305c      	adds	r0, #92	@ 0x5c
 800735a:	f000 f931 	bl	80075c0 <memset>
 800735e:	4b0d      	ldr	r3, [pc, #52]	@ (8007394 <std+0x58>)
 8007360:	6263      	str	r3, [r4, #36]	@ 0x24
 8007362:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <std+0x5c>)
 8007364:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <std+0x60>)
 8007368:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <std+0x64>)
 800736c:	6323      	str	r3, [r4, #48]	@ 0x30
 800736e:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <std+0x68>)
 8007370:	6224      	str	r4, [r4, #32]
 8007372:	429c      	cmp	r4, r3
 8007374:	d006      	beq.n	8007384 <std+0x48>
 8007376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800737a:	4294      	cmp	r4, r2
 800737c:	d002      	beq.n	8007384 <std+0x48>
 800737e:	33d0      	adds	r3, #208	@ 0xd0
 8007380:	429c      	cmp	r4, r3
 8007382:	d105      	bne.n	8007390 <std+0x54>
 8007384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	f000 b994 	b.w	80076b8 <__retarget_lock_init_recursive>
 8007390:	bd10      	pop	{r4, pc}
 8007392:	bf00      	nop
 8007394:	080074c1 	.word	0x080074c1
 8007398:	080074e3 	.word	0x080074e3
 800739c:	0800751b 	.word	0x0800751b
 80073a0:	0800753f 	.word	0x0800753f
 80073a4:	20000670 	.word	0x20000670

080073a8 <stdio_exit_handler>:
 80073a8:	4a02      	ldr	r2, [pc, #8]	@ (80073b4 <stdio_exit_handler+0xc>)
 80073aa:	4903      	ldr	r1, [pc, #12]	@ (80073b8 <stdio_exit_handler+0x10>)
 80073ac:	4803      	ldr	r0, [pc, #12]	@ (80073bc <stdio_exit_handler+0x14>)
 80073ae:	f000 b869 	b.w	8007484 <_fwalk_sglue>
 80073b2:	bf00      	nop
 80073b4:	20000048 	.word	0x20000048
 80073b8:	0800903d 	.word	0x0800903d
 80073bc:	20000058 	.word	0x20000058

080073c0 <cleanup_stdio>:
 80073c0:	6841      	ldr	r1, [r0, #4]
 80073c2:	4b0c      	ldr	r3, [pc, #48]	@ (80073f4 <cleanup_stdio+0x34>)
 80073c4:	4299      	cmp	r1, r3
 80073c6:	b510      	push	{r4, lr}
 80073c8:	4604      	mov	r4, r0
 80073ca:	d001      	beq.n	80073d0 <cleanup_stdio+0x10>
 80073cc:	f001 fe36 	bl	800903c <_fflush_r>
 80073d0:	68a1      	ldr	r1, [r4, #8]
 80073d2:	4b09      	ldr	r3, [pc, #36]	@ (80073f8 <cleanup_stdio+0x38>)
 80073d4:	4299      	cmp	r1, r3
 80073d6:	d002      	beq.n	80073de <cleanup_stdio+0x1e>
 80073d8:	4620      	mov	r0, r4
 80073da:	f001 fe2f 	bl	800903c <_fflush_r>
 80073de:	68e1      	ldr	r1, [r4, #12]
 80073e0:	4b06      	ldr	r3, [pc, #24]	@ (80073fc <cleanup_stdio+0x3c>)
 80073e2:	4299      	cmp	r1, r3
 80073e4:	d004      	beq.n	80073f0 <cleanup_stdio+0x30>
 80073e6:	4620      	mov	r0, r4
 80073e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ec:	f001 be26 	b.w	800903c <_fflush_r>
 80073f0:	bd10      	pop	{r4, pc}
 80073f2:	bf00      	nop
 80073f4:	20000670 	.word	0x20000670
 80073f8:	200006d8 	.word	0x200006d8
 80073fc:	20000740 	.word	0x20000740

08007400 <global_stdio_init.part.0>:
 8007400:	b510      	push	{r4, lr}
 8007402:	4b0b      	ldr	r3, [pc, #44]	@ (8007430 <global_stdio_init.part.0+0x30>)
 8007404:	4c0b      	ldr	r4, [pc, #44]	@ (8007434 <global_stdio_init.part.0+0x34>)
 8007406:	4a0c      	ldr	r2, [pc, #48]	@ (8007438 <global_stdio_init.part.0+0x38>)
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	4620      	mov	r0, r4
 800740c:	2200      	movs	r2, #0
 800740e:	2104      	movs	r1, #4
 8007410:	f7ff ff94 	bl	800733c <std>
 8007414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007418:	2201      	movs	r2, #1
 800741a:	2109      	movs	r1, #9
 800741c:	f7ff ff8e 	bl	800733c <std>
 8007420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007424:	2202      	movs	r2, #2
 8007426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800742a:	2112      	movs	r1, #18
 800742c:	f7ff bf86 	b.w	800733c <std>
 8007430:	200007a8 	.word	0x200007a8
 8007434:	20000670 	.word	0x20000670
 8007438:	080073a9 	.word	0x080073a9

0800743c <__sfp_lock_acquire>:
 800743c:	4801      	ldr	r0, [pc, #4]	@ (8007444 <__sfp_lock_acquire+0x8>)
 800743e:	f000 b93c 	b.w	80076ba <__retarget_lock_acquire_recursive>
 8007442:	bf00      	nop
 8007444:	200007b1 	.word	0x200007b1

08007448 <__sfp_lock_release>:
 8007448:	4801      	ldr	r0, [pc, #4]	@ (8007450 <__sfp_lock_release+0x8>)
 800744a:	f000 b937 	b.w	80076bc <__retarget_lock_release_recursive>
 800744e:	bf00      	nop
 8007450:	200007b1 	.word	0x200007b1

08007454 <__sinit>:
 8007454:	b510      	push	{r4, lr}
 8007456:	4604      	mov	r4, r0
 8007458:	f7ff fff0 	bl	800743c <__sfp_lock_acquire>
 800745c:	6a23      	ldr	r3, [r4, #32]
 800745e:	b11b      	cbz	r3, 8007468 <__sinit+0x14>
 8007460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007464:	f7ff bff0 	b.w	8007448 <__sfp_lock_release>
 8007468:	4b04      	ldr	r3, [pc, #16]	@ (800747c <__sinit+0x28>)
 800746a:	6223      	str	r3, [r4, #32]
 800746c:	4b04      	ldr	r3, [pc, #16]	@ (8007480 <__sinit+0x2c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f5      	bne.n	8007460 <__sinit+0xc>
 8007474:	f7ff ffc4 	bl	8007400 <global_stdio_init.part.0>
 8007478:	e7f2      	b.n	8007460 <__sinit+0xc>
 800747a:	bf00      	nop
 800747c:	080073c1 	.word	0x080073c1
 8007480:	200007a8 	.word	0x200007a8

08007484 <_fwalk_sglue>:
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	4607      	mov	r7, r0
 800748a:	4688      	mov	r8, r1
 800748c:	4614      	mov	r4, r2
 800748e:	2600      	movs	r6, #0
 8007490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007494:	f1b9 0901 	subs.w	r9, r9, #1
 8007498:	d505      	bpl.n	80074a6 <_fwalk_sglue+0x22>
 800749a:	6824      	ldr	r4, [r4, #0]
 800749c:	2c00      	cmp	r4, #0
 800749e:	d1f7      	bne.n	8007490 <_fwalk_sglue+0xc>
 80074a0:	4630      	mov	r0, r6
 80074a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d907      	bls.n	80074bc <_fwalk_sglue+0x38>
 80074ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074b0:	3301      	adds	r3, #1
 80074b2:	d003      	beq.n	80074bc <_fwalk_sglue+0x38>
 80074b4:	4629      	mov	r1, r5
 80074b6:	4638      	mov	r0, r7
 80074b8:	47c0      	blx	r8
 80074ba:	4306      	orrs	r6, r0
 80074bc:	3568      	adds	r5, #104	@ 0x68
 80074be:	e7e9      	b.n	8007494 <_fwalk_sglue+0x10>

080074c0 <__sread>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	460c      	mov	r4, r1
 80074c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c8:	f000 f8a8 	bl	800761c <_read_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	bfab      	itete	ge
 80074d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074d2:	89a3      	ldrhlt	r3, [r4, #12]
 80074d4:	181b      	addge	r3, r3, r0
 80074d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074da:	bfac      	ite	ge
 80074dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074de:	81a3      	strhlt	r3, [r4, #12]
 80074e0:	bd10      	pop	{r4, pc}

080074e2 <__swrite>:
 80074e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e6:	461f      	mov	r7, r3
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	05db      	lsls	r3, r3, #23
 80074ec:	4605      	mov	r5, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4616      	mov	r6, r2
 80074f2:	d505      	bpl.n	8007500 <__swrite+0x1e>
 80074f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074f8:	2302      	movs	r3, #2
 80074fa:	2200      	movs	r2, #0
 80074fc:	f000 f87c 	bl	80075f8 <_lseek_r>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	4632      	mov	r2, r6
 800750e:	463b      	mov	r3, r7
 8007510:	4628      	mov	r0, r5
 8007512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007516:	f000 b893 	b.w	8007640 <_write_r>

0800751a <__sseek>:
 800751a:	b510      	push	{r4, lr}
 800751c:	460c      	mov	r4, r1
 800751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007522:	f000 f869 	bl	80075f8 <_lseek_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	bf15      	itete	ne
 800752c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800752e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007536:	81a3      	strheq	r3, [r4, #12]
 8007538:	bf18      	it	ne
 800753a:	81a3      	strhne	r3, [r4, #12]
 800753c:	bd10      	pop	{r4, pc}

0800753e <__sclose>:
 800753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007542:	f000 b849 	b.w	80075d8 <_close_r>

08007546 <_vsniprintf_r>:
 8007546:	b530      	push	{r4, r5, lr}
 8007548:	4614      	mov	r4, r2
 800754a:	2c00      	cmp	r4, #0
 800754c:	b09b      	sub	sp, #108	@ 0x6c
 800754e:	4605      	mov	r5, r0
 8007550:	461a      	mov	r2, r3
 8007552:	da05      	bge.n	8007560 <_vsniprintf_r+0x1a>
 8007554:	238b      	movs	r3, #139	@ 0x8b
 8007556:	6003      	str	r3, [r0, #0]
 8007558:	f04f 30ff 	mov.w	r0, #4294967295
 800755c:	b01b      	add	sp, #108	@ 0x6c
 800755e:	bd30      	pop	{r4, r5, pc}
 8007560:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007564:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	9319      	str	r3, [sp, #100]	@ 0x64
 800756e:	bf14      	ite	ne
 8007570:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007574:	4623      	moveq	r3, r4
 8007576:	9302      	str	r3, [sp, #8]
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800757e:	9100      	str	r1, [sp, #0]
 8007580:	9104      	str	r1, [sp, #16]
 8007582:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007586:	4669      	mov	r1, sp
 8007588:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800758a:	f001 fbd7 	bl	8008d3c <_svfiprintf_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	bfbc      	itt	lt
 8007592:	238b      	movlt	r3, #139	@ 0x8b
 8007594:	602b      	strlt	r3, [r5, #0]
 8007596:	2c00      	cmp	r4, #0
 8007598:	d0e0      	beq.n	800755c <_vsniprintf_r+0x16>
 800759a:	9b00      	ldr	r3, [sp, #0]
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e7dc      	b.n	800755c <_vsniprintf_r+0x16>
	...

080075a4 <vsniprintf>:
 80075a4:	b507      	push	{r0, r1, r2, lr}
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	460a      	mov	r2, r1
 80075ac:	4601      	mov	r1, r0
 80075ae:	4803      	ldr	r0, [pc, #12]	@ (80075bc <vsniprintf+0x18>)
 80075b0:	6800      	ldr	r0, [r0, #0]
 80075b2:	f7ff ffc8 	bl	8007546 <_vsniprintf_r>
 80075b6:	b003      	add	sp, #12
 80075b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80075bc:	20000054 	.word	0x20000054

080075c0 <memset>:
 80075c0:	4402      	add	r2, r0
 80075c2:	4603      	mov	r3, r0
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d100      	bne.n	80075ca <memset+0xa>
 80075c8:	4770      	bx	lr
 80075ca:	f803 1b01 	strb.w	r1, [r3], #1
 80075ce:	e7f9      	b.n	80075c4 <memset+0x4>

080075d0 <_localeconv_r>:
 80075d0:	4800      	ldr	r0, [pc, #0]	@ (80075d4 <_localeconv_r+0x4>)
 80075d2:	4770      	bx	lr
 80075d4:	20000194 	.word	0x20000194

080075d8 <_close_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d06      	ldr	r5, [pc, #24]	@ (80075f4 <_close_r+0x1c>)
 80075dc:	2300      	movs	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	602b      	str	r3, [r5, #0]
 80075e4:	f7fa fc6a 	bl	8001ebc <_close>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_close_r+0x1a>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_close_r+0x1a>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	200007ac 	.word	0x200007ac

080075f8 <_lseek_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4d07      	ldr	r5, [pc, #28]	@ (8007618 <_lseek_r+0x20>)
 80075fc:	4604      	mov	r4, r0
 80075fe:	4608      	mov	r0, r1
 8007600:	4611      	mov	r1, r2
 8007602:	2200      	movs	r2, #0
 8007604:	602a      	str	r2, [r5, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f7fa fc7f 	bl	8001f0a <_lseek>
 800760c:	1c43      	adds	r3, r0, #1
 800760e:	d102      	bne.n	8007616 <_lseek_r+0x1e>
 8007610:	682b      	ldr	r3, [r5, #0]
 8007612:	b103      	cbz	r3, 8007616 <_lseek_r+0x1e>
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	bd38      	pop	{r3, r4, r5, pc}
 8007618:	200007ac 	.word	0x200007ac

0800761c <_read_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4d07      	ldr	r5, [pc, #28]	@ (800763c <_read_r+0x20>)
 8007620:	4604      	mov	r4, r0
 8007622:	4608      	mov	r0, r1
 8007624:	4611      	mov	r1, r2
 8007626:	2200      	movs	r2, #0
 8007628:	602a      	str	r2, [r5, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	f7fa fc0d 	bl	8001e4a <_read>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_read_r+0x1e>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b103      	cbz	r3, 800763a <_read_r+0x1e>
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	200007ac 	.word	0x200007ac

08007640 <_write_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d07      	ldr	r5, [pc, #28]	@ (8007660 <_write_r+0x20>)
 8007644:	4604      	mov	r4, r0
 8007646:	4608      	mov	r0, r1
 8007648:	4611      	mov	r1, r2
 800764a:	2200      	movs	r2, #0
 800764c:	602a      	str	r2, [r5, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	f7fa fc18 	bl	8001e84 <_write>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_write_r+0x1e>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_write_r+0x1e>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	200007ac 	.word	0x200007ac

08007664 <__errno>:
 8007664:	4b01      	ldr	r3, [pc, #4]	@ (800766c <__errno+0x8>)
 8007666:	6818      	ldr	r0, [r3, #0]
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000054 	.word	0x20000054

08007670 <__libc_init_array>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	4d0d      	ldr	r5, [pc, #52]	@ (80076a8 <__libc_init_array+0x38>)
 8007674:	4c0d      	ldr	r4, [pc, #52]	@ (80076ac <__libc_init_array+0x3c>)
 8007676:	1b64      	subs	r4, r4, r5
 8007678:	10a4      	asrs	r4, r4, #2
 800767a:	2600      	movs	r6, #0
 800767c:	42a6      	cmp	r6, r4
 800767e:	d109      	bne.n	8007694 <__libc_init_array+0x24>
 8007680:	4d0b      	ldr	r5, [pc, #44]	@ (80076b0 <__libc_init_array+0x40>)
 8007682:	4c0c      	ldr	r4, [pc, #48]	@ (80076b4 <__libc_init_array+0x44>)
 8007684:	f002 f86a 	bl	800975c <_init>
 8007688:	1b64      	subs	r4, r4, r5
 800768a:	10a4      	asrs	r4, r4, #2
 800768c:	2600      	movs	r6, #0
 800768e:	42a6      	cmp	r6, r4
 8007690:	d105      	bne.n	800769e <__libc_init_array+0x2e>
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	f855 3b04 	ldr.w	r3, [r5], #4
 8007698:	4798      	blx	r3
 800769a:	3601      	adds	r6, #1
 800769c:	e7ee      	b.n	800767c <__libc_init_array+0xc>
 800769e:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a2:	4798      	blx	r3
 80076a4:	3601      	adds	r6, #1
 80076a6:	e7f2      	b.n	800768e <__libc_init_array+0x1e>
 80076a8:	08009ebc 	.word	0x08009ebc
 80076ac:	08009ebc 	.word	0x08009ebc
 80076b0:	08009ebc 	.word	0x08009ebc
 80076b4:	08009ec0 	.word	0x08009ec0

080076b8 <__retarget_lock_init_recursive>:
 80076b8:	4770      	bx	lr

080076ba <__retarget_lock_acquire_recursive>:
 80076ba:	4770      	bx	lr

080076bc <__retarget_lock_release_recursive>:
 80076bc:	4770      	bx	lr

080076be <memcpy>:
 80076be:	440a      	add	r2, r1
 80076c0:	4291      	cmp	r1, r2
 80076c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c6:	d100      	bne.n	80076ca <memcpy+0xc>
 80076c8:	4770      	bx	lr
 80076ca:	b510      	push	{r4, lr}
 80076cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d4:	4291      	cmp	r1, r2
 80076d6:	d1f9      	bne.n	80076cc <memcpy+0xe>
 80076d8:	bd10      	pop	{r4, pc}

080076da <quorem>:
 80076da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076de:	6903      	ldr	r3, [r0, #16]
 80076e0:	690c      	ldr	r4, [r1, #16]
 80076e2:	42a3      	cmp	r3, r4
 80076e4:	4607      	mov	r7, r0
 80076e6:	db7e      	blt.n	80077e6 <quorem+0x10c>
 80076e8:	3c01      	subs	r4, #1
 80076ea:	f101 0814 	add.w	r8, r1, #20
 80076ee:	00a3      	lsls	r3, r4, #2
 80076f0:	f100 0514 	add.w	r5, r0, #20
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007704:	3301      	adds	r3, #1
 8007706:	429a      	cmp	r2, r3
 8007708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800770c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007710:	d32e      	bcc.n	8007770 <quorem+0x96>
 8007712:	f04f 0a00 	mov.w	sl, #0
 8007716:	46c4      	mov	ip, r8
 8007718:	46ae      	mov	lr, r5
 800771a:	46d3      	mov	fp, sl
 800771c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007720:	b298      	uxth	r0, r3
 8007722:	fb06 a000 	mla	r0, r6, r0, sl
 8007726:	0c02      	lsrs	r2, r0, #16
 8007728:	0c1b      	lsrs	r3, r3, #16
 800772a:	fb06 2303 	mla	r3, r6, r3, r2
 800772e:	f8de 2000 	ldr.w	r2, [lr]
 8007732:	b280      	uxth	r0, r0
 8007734:	b292      	uxth	r2, r2
 8007736:	1a12      	subs	r2, r2, r0
 8007738:	445a      	add	r2, fp
 800773a:	f8de 0000 	ldr.w	r0, [lr]
 800773e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007742:	b29b      	uxth	r3, r3
 8007744:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007748:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800774c:	b292      	uxth	r2, r2
 800774e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007752:	45e1      	cmp	r9, ip
 8007754:	f84e 2b04 	str.w	r2, [lr], #4
 8007758:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800775c:	d2de      	bcs.n	800771c <quorem+0x42>
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	58eb      	ldr	r3, [r5, r3]
 8007762:	b92b      	cbnz	r3, 8007770 <quorem+0x96>
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	3b04      	subs	r3, #4
 8007768:	429d      	cmp	r5, r3
 800776a:	461a      	mov	r2, r3
 800776c:	d32f      	bcc.n	80077ce <quorem+0xf4>
 800776e:	613c      	str	r4, [r7, #16]
 8007770:	4638      	mov	r0, r7
 8007772:	f001 f97f 	bl	8008a74 <__mcmp>
 8007776:	2800      	cmp	r0, #0
 8007778:	db25      	blt.n	80077c6 <quorem+0xec>
 800777a:	4629      	mov	r1, r5
 800777c:	2000      	movs	r0, #0
 800777e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007782:	f8d1 c000 	ldr.w	ip, [r1]
 8007786:	fa1f fe82 	uxth.w	lr, r2
 800778a:	fa1f f38c 	uxth.w	r3, ip
 800778e:	eba3 030e 	sub.w	r3, r3, lr
 8007792:	4403      	add	r3, r0
 8007794:	0c12      	lsrs	r2, r2, #16
 8007796:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800779a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800779e:	b29b      	uxth	r3, r3
 80077a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a4:	45c1      	cmp	r9, r8
 80077a6:	f841 3b04 	str.w	r3, [r1], #4
 80077aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077ae:	d2e6      	bcs.n	800777e <quorem+0xa4>
 80077b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b8:	b922      	cbnz	r2, 80077c4 <quorem+0xea>
 80077ba:	3b04      	subs	r3, #4
 80077bc:	429d      	cmp	r5, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	d30b      	bcc.n	80077da <quorem+0x100>
 80077c2:	613c      	str	r4, [r7, #16]
 80077c4:	3601      	adds	r6, #1
 80077c6:	4630      	mov	r0, r6
 80077c8:	b003      	add	sp, #12
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	d1cb      	bne.n	800776e <quorem+0x94>
 80077d6:	3c01      	subs	r4, #1
 80077d8:	e7c6      	b.n	8007768 <quorem+0x8e>
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	3b04      	subs	r3, #4
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d1ef      	bne.n	80077c2 <quorem+0xe8>
 80077e2:	3c01      	subs	r4, #1
 80077e4:	e7ea      	b.n	80077bc <quorem+0xe2>
 80077e6:	2000      	movs	r0, #0
 80077e8:	e7ee      	b.n	80077c8 <quorem+0xee>
 80077ea:	0000      	movs	r0, r0
 80077ec:	0000      	movs	r0, r0
	...

080077f0 <_dtoa_r>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	69c7      	ldr	r7, [r0, #28]
 80077f6:	b097      	sub	sp, #92	@ 0x5c
 80077f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80077fc:	ec55 4b10 	vmov	r4, r5, d0
 8007800:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007802:	9107      	str	r1, [sp, #28]
 8007804:	4681      	mov	r9, r0
 8007806:	920c      	str	r2, [sp, #48]	@ 0x30
 8007808:	9311      	str	r3, [sp, #68]	@ 0x44
 800780a:	b97f      	cbnz	r7, 800782c <_dtoa_r+0x3c>
 800780c:	2010      	movs	r0, #16
 800780e:	f000 fe09 	bl	8008424 <malloc>
 8007812:	4602      	mov	r2, r0
 8007814:	f8c9 001c 	str.w	r0, [r9, #28]
 8007818:	b920      	cbnz	r0, 8007824 <_dtoa_r+0x34>
 800781a:	4ba9      	ldr	r3, [pc, #676]	@ (8007ac0 <_dtoa_r+0x2d0>)
 800781c:	21ef      	movs	r1, #239	@ 0xef
 800781e:	48a9      	ldr	r0, [pc, #676]	@ (8007ac4 <_dtoa_r+0x2d4>)
 8007820:	f001 fc5e 	bl	80090e0 <__assert_func>
 8007824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007828:	6007      	str	r7, [r0, #0]
 800782a:	60c7      	str	r7, [r0, #12]
 800782c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	b159      	cbz	r1, 800784c <_dtoa_r+0x5c>
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	604a      	str	r2, [r1, #4]
 8007838:	2301      	movs	r3, #1
 800783a:	4093      	lsls	r3, r2
 800783c:	608b      	str	r3, [r1, #8]
 800783e:	4648      	mov	r0, r9
 8007840:	f000 fee6 	bl	8008610 <_Bfree>
 8007844:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	1e2b      	subs	r3, r5, #0
 800784e:	bfb9      	ittee	lt
 8007850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007854:	9305      	strlt	r3, [sp, #20]
 8007856:	2300      	movge	r3, #0
 8007858:	6033      	strge	r3, [r6, #0]
 800785a:	9f05      	ldr	r7, [sp, #20]
 800785c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ac8 <_dtoa_r+0x2d8>)
 800785e:	bfbc      	itt	lt
 8007860:	2201      	movlt	r2, #1
 8007862:	6032      	strlt	r2, [r6, #0]
 8007864:	43bb      	bics	r3, r7
 8007866:	d112      	bne.n	800788e <_dtoa_r+0x9e>
 8007868:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800786a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007874:	4323      	orrs	r3, r4
 8007876:	f000 855a 	beq.w	800832e <_dtoa_r+0xb3e>
 800787a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800787c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007adc <_dtoa_r+0x2ec>
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 855c 	beq.w	800833e <_dtoa_r+0xb4e>
 8007886:	f10a 0303 	add.w	r3, sl, #3
 800788a:	f000 bd56 	b.w	800833a <_dtoa_r+0xb4a>
 800788e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007892:	2200      	movs	r2, #0
 8007894:	ec51 0b17 	vmov	r0, r1, d7
 8007898:	2300      	movs	r3, #0
 800789a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800789e:	f7f9 f8eb 	bl	8000a78 <__aeabi_dcmpeq>
 80078a2:	4680      	mov	r8, r0
 80078a4:	b158      	cbz	r0, 80078be <_dtoa_r+0xce>
 80078a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078a8:	2301      	movs	r3, #1
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078ae:	b113      	cbz	r3, 80078b6 <_dtoa_r+0xc6>
 80078b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80078b2:	4b86      	ldr	r3, [pc, #536]	@ (8007acc <_dtoa_r+0x2dc>)
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ae0 <_dtoa_r+0x2f0>
 80078ba:	f000 bd40 	b.w	800833e <_dtoa_r+0xb4e>
 80078be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80078c2:	aa14      	add	r2, sp, #80	@ 0x50
 80078c4:	a915      	add	r1, sp, #84	@ 0x54
 80078c6:	4648      	mov	r0, r9
 80078c8:	f001 f984 	bl	8008bd4 <__d2b>
 80078cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078d0:	9002      	str	r0, [sp, #8]
 80078d2:	2e00      	cmp	r6, #0
 80078d4:	d078      	beq.n	80079c8 <_dtoa_r+0x1d8>
 80078d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80078dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078f0:	4619      	mov	r1, r3
 80078f2:	2200      	movs	r2, #0
 80078f4:	4b76      	ldr	r3, [pc, #472]	@ (8007ad0 <_dtoa_r+0x2e0>)
 80078f6:	f7f8 fc9f 	bl	8000238 <__aeabi_dsub>
 80078fa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007aa8 <_dtoa_r+0x2b8>)
 80078fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007900:	f7f8 fe52 	bl	80005a8 <__aeabi_dmul>
 8007904:	a36a      	add	r3, pc, #424	@ (adr r3, 8007ab0 <_dtoa_r+0x2c0>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f8 fc97 	bl	800023c <__adddf3>
 800790e:	4604      	mov	r4, r0
 8007910:	4630      	mov	r0, r6
 8007912:	460d      	mov	r5, r1
 8007914:	f7f8 fdde 	bl	80004d4 <__aeabi_i2d>
 8007918:	a367      	add	r3, pc, #412	@ (adr r3, 8007ab8 <_dtoa_r+0x2c8>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fe43 	bl	80005a8 <__aeabi_dmul>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f8 fc87 	bl	800023c <__adddf3>
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	f7f9 f8e9 	bl	8000b08 <__aeabi_d2iz>
 8007936:	2200      	movs	r2, #0
 8007938:	4607      	mov	r7, r0
 800793a:	2300      	movs	r3, #0
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f9 f8a4 	bl	8000a8c <__aeabi_dcmplt>
 8007944:	b140      	cbz	r0, 8007958 <_dtoa_r+0x168>
 8007946:	4638      	mov	r0, r7
 8007948:	f7f8 fdc4 	bl	80004d4 <__aeabi_i2d>
 800794c:	4622      	mov	r2, r4
 800794e:	462b      	mov	r3, r5
 8007950:	f7f9 f892 	bl	8000a78 <__aeabi_dcmpeq>
 8007954:	b900      	cbnz	r0, 8007958 <_dtoa_r+0x168>
 8007956:	3f01      	subs	r7, #1
 8007958:	2f16      	cmp	r7, #22
 800795a:	d852      	bhi.n	8007a02 <_dtoa_r+0x212>
 800795c:	4b5d      	ldr	r3, [pc, #372]	@ (8007ad4 <_dtoa_r+0x2e4>)
 800795e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800796a:	f7f9 f88f 	bl	8000a8c <__aeabi_dcmplt>
 800796e:	2800      	cmp	r0, #0
 8007970:	d049      	beq.n	8007a06 <_dtoa_r+0x216>
 8007972:	3f01      	subs	r7, #1
 8007974:	2300      	movs	r3, #0
 8007976:	9310      	str	r3, [sp, #64]	@ 0x40
 8007978:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800797a:	1b9b      	subs	r3, r3, r6
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	bf45      	ittet	mi
 8007980:	f1c3 0301 	rsbmi	r3, r3, #1
 8007984:	9300      	strmi	r3, [sp, #0]
 8007986:	2300      	movpl	r3, #0
 8007988:	2300      	movmi	r3, #0
 800798a:	9206      	str	r2, [sp, #24]
 800798c:	bf54      	ite	pl
 800798e:	9300      	strpl	r3, [sp, #0]
 8007990:	9306      	strmi	r3, [sp, #24]
 8007992:	2f00      	cmp	r7, #0
 8007994:	db39      	blt.n	8007a0a <_dtoa_r+0x21a>
 8007996:	9b06      	ldr	r3, [sp, #24]
 8007998:	970d      	str	r7, [sp, #52]	@ 0x34
 800799a:	443b      	add	r3, r7
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	2300      	movs	r3, #0
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	9b07      	ldr	r3, [sp, #28]
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d863      	bhi.n	8007a70 <_dtoa_r+0x280>
 80079a8:	2b05      	cmp	r3, #5
 80079aa:	bfc4      	itt	gt
 80079ac:	3b04      	subgt	r3, #4
 80079ae:	9307      	strgt	r3, [sp, #28]
 80079b0:	9b07      	ldr	r3, [sp, #28]
 80079b2:	f1a3 0302 	sub.w	r3, r3, #2
 80079b6:	bfcc      	ite	gt
 80079b8:	2400      	movgt	r4, #0
 80079ba:	2401      	movle	r4, #1
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d863      	bhi.n	8007a88 <_dtoa_r+0x298>
 80079c0:	e8df f003 	tbb	[pc, r3]
 80079c4:	2b375452 	.word	0x2b375452
 80079c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079cc:	441e      	add	r6, r3
 80079ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	bfc1      	itttt	gt
 80079d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079da:	409f      	lslgt	r7, r3
 80079dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079e4:	bfd6      	itet	le
 80079e6:	f1c3 0320 	rsble	r3, r3, #32
 80079ea:	ea47 0003 	orrgt.w	r0, r7, r3
 80079ee:	fa04 f003 	lslle.w	r0, r4, r3
 80079f2:	f7f8 fd5f 	bl	80004b4 <__aeabi_ui2d>
 80079f6:	2201      	movs	r2, #1
 80079f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079fc:	3e01      	subs	r6, #1
 80079fe:	9212      	str	r2, [sp, #72]	@ 0x48
 8007a00:	e776      	b.n	80078f0 <_dtoa_r+0x100>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7b7      	b.n	8007976 <_dtoa_r+0x186>
 8007a06:	9010      	str	r0, [sp, #64]	@ 0x40
 8007a08:	e7b6      	b.n	8007978 <_dtoa_r+0x188>
 8007a0a:	9b00      	ldr	r3, [sp, #0]
 8007a0c:	1bdb      	subs	r3, r3, r7
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	427b      	negs	r3, r7
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	2300      	movs	r3, #0
 8007a16:	930d      	str	r3, [sp, #52]	@ 0x34
 8007a18:	e7c3      	b.n	80079a2 <_dtoa_r+0x1b2>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a20:	eb07 0b03 	add.w	fp, r7, r3
 8007a24:	f10b 0301 	add.w	r3, fp, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	9303      	str	r3, [sp, #12]
 8007a2c:	bfb8      	it	lt
 8007a2e:	2301      	movlt	r3, #1
 8007a30:	e006      	b.n	8007a40 <_dtoa_r+0x250>
 8007a32:	2301      	movs	r3, #1
 8007a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dd28      	ble.n	8007a8e <_dtoa_r+0x29e>
 8007a3c:	469b      	mov	fp, r3
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007a44:	2100      	movs	r1, #0
 8007a46:	2204      	movs	r2, #4
 8007a48:	f102 0514 	add.w	r5, r2, #20
 8007a4c:	429d      	cmp	r5, r3
 8007a4e:	d926      	bls.n	8007a9e <_dtoa_r+0x2ae>
 8007a50:	6041      	str	r1, [r0, #4]
 8007a52:	4648      	mov	r0, r9
 8007a54:	f000 fd9c 	bl	8008590 <_Balloc>
 8007a58:	4682      	mov	sl, r0
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d142      	bne.n	8007ae4 <_dtoa_r+0x2f4>
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad8 <_dtoa_r+0x2e8>)
 8007a60:	4602      	mov	r2, r0
 8007a62:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a66:	e6da      	b.n	800781e <_dtoa_r+0x2e>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e7e3      	b.n	8007a34 <_dtoa_r+0x244>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e7d5      	b.n	8007a1c <_dtoa_r+0x22c>
 8007a70:	2401      	movs	r4, #1
 8007a72:	2300      	movs	r3, #0
 8007a74:	9307      	str	r3, [sp, #28]
 8007a76:	9409      	str	r4, [sp, #36]	@ 0x24
 8007a78:	f04f 3bff 	mov.w	fp, #4294967295
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a82:	2312      	movs	r3, #18
 8007a84:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a86:	e7db      	b.n	8007a40 <_dtoa_r+0x250>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a8c:	e7f4      	b.n	8007a78 <_dtoa_r+0x288>
 8007a8e:	f04f 0b01 	mov.w	fp, #1
 8007a92:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a96:	465b      	mov	r3, fp
 8007a98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007a9c:	e7d0      	b.n	8007a40 <_dtoa_r+0x250>
 8007a9e:	3101      	adds	r1, #1
 8007aa0:	0052      	lsls	r2, r2, #1
 8007aa2:	e7d1      	b.n	8007a48 <_dtoa_r+0x258>
 8007aa4:	f3af 8000 	nop.w
 8007aa8:	636f4361 	.word	0x636f4361
 8007aac:	3fd287a7 	.word	0x3fd287a7
 8007ab0:	8b60c8b3 	.word	0x8b60c8b3
 8007ab4:	3fc68a28 	.word	0x3fc68a28
 8007ab8:	509f79fb 	.word	0x509f79fb
 8007abc:	3fd34413 	.word	0x3fd34413
 8007ac0:	08009b7d 	.word	0x08009b7d
 8007ac4:	08009b94 	.word	0x08009b94
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	08009b4d 	.word	0x08009b4d
 8007ad0:	3ff80000 	.word	0x3ff80000
 8007ad4:	08009ce8 	.word	0x08009ce8
 8007ad8:	08009bec 	.word	0x08009bec
 8007adc:	08009b79 	.word	0x08009b79
 8007ae0:	08009b4c 	.word	0x08009b4c
 8007ae4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ae8:	6018      	str	r0, [r3, #0]
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	2b0e      	cmp	r3, #14
 8007aee:	f200 80a1 	bhi.w	8007c34 <_dtoa_r+0x444>
 8007af2:	2c00      	cmp	r4, #0
 8007af4:	f000 809e 	beq.w	8007c34 <_dtoa_r+0x444>
 8007af8:	2f00      	cmp	r7, #0
 8007afa:	dd33      	ble.n	8007b64 <_dtoa_r+0x374>
 8007afc:	4b9c      	ldr	r3, [pc, #624]	@ (8007d70 <_dtoa_r+0x580>)
 8007afe:	f007 020f 	and.w	r2, r7, #15
 8007b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b06:	ed93 7b00 	vldr	d7, [r3]
 8007b0a:	05f8      	lsls	r0, r7, #23
 8007b0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007b10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b14:	d516      	bpl.n	8007b44 <_dtoa_r+0x354>
 8007b16:	4b97      	ldr	r3, [pc, #604]	@ (8007d74 <_dtoa_r+0x584>)
 8007b18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b20:	f7f8 fe6c 	bl	80007fc <__aeabi_ddiv>
 8007b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b28:	f004 040f 	and.w	r4, r4, #15
 8007b2c:	2603      	movs	r6, #3
 8007b2e:	4d91      	ldr	r5, [pc, #580]	@ (8007d74 <_dtoa_r+0x584>)
 8007b30:	b954      	cbnz	r4, 8007b48 <_dtoa_r+0x358>
 8007b32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b3a:	f7f8 fe5f 	bl	80007fc <__aeabi_ddiv>
 8007b3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b42:	e028      	b.n	8007b96 <_dtoa_r+0x3a6>
 8007b44:	2602      	movs	r6, #2
 8007b46:	e7f2      	b.n	8007b2e <_dtoa_r+0x33e>
 8007b48:	07e1      	lsls	r1, r4, #31
 8007b4a:	d508      	bpl.n	8007b5e <_dtoa_r+0x36e>
 8007b4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b54:	f7f8 fd28 	bl	80005a8 <__aeabi_dmul>
 8007b58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b5c:	3601      	adds	r6, #1
 8007b5e:	1064      	asrs	r4, r4, #1
 8007b60:	3508      	adds	r5, #8
 8007b62:	e7e5      	b.n	8007b30 <_dtoa_r+0x340>
 8007b64:	f000 80af 	beq.w	8007cc6 <_dtoa_r+0x4d6>
 8007b68:	427c      	negs	r4, r7
 8007b6a:	4b81      	ldr	r3, [pc, #516]	@ (8007d70 <_dtoa_r+0x580>)
 8007b6c:	4d81      	ldr	r5, [pc, #516]	@ (8007d74 <_dtoa_r+0x584>)
 8007b6e:	f004 020f 	and.w	r2, r4, #15
 8007b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b7e:	f7f8 fd13 	bl	80005a8 <__aeabi_dmul>
 8007b82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b86:	1124      	asrs	r4, r4, #4
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2602      	movs	r6, #2
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	f040 808f 	bne.w	8007cb0 <_dtoa_r+0x4c0>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1d3      	bne.n	8007b3e <_dtoa_r+0x34e>
 8007b96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8094 	beq.w	8007cca <_dtoa_r+0x4da>
 8007ba2:	4b75      	ldr	r3, [pc, #468]	@ (8007d78 <_dtoa_r+0x588>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	4629      	mov	r1, r5
 8007baa:	f7f8 ff6f 	bl	8000a8c <__aeabi_dcmplt>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	f000 808b 	beq.w	8007cca <_dtoa_r+0x4da>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8087 	beq.w	8007cca <_dtoa_r+0x4da>
 8007bbc:	f1bb 0f00 	cmp.w	fp, #0
 8007bc0:	dd34      	ble.n	8007c2c <_dtoa_r+0x43c>
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8007d7c <_dtoa_r+0x58c>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7f8 fced 	bl	80005a8 <__aeabi_dmul>
 8007bce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bd2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	465c      	mov	r4, fp
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7f8 fc7a 	bl	80004d4 <__aeabi_i2d>
 8007be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be4:	f7f8 fce0 	bl	80005a8 <__aeabi_dmul>
 8007be8:	4b65      	ldr	r3, [pc, #404]	@ (8007d80 <_dtoa_r+0x590>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	f7f8 fb26 	bl	800023c <__adddf3>
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bf6:	2c00      	cmp	r4, #0
 8007bf8:	d16a      	bne.n	8007cd0 <_dtoa_r+0x4e0>
 8007bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bfe:	4b61      	ldr	r3, [pc, #388]	@ (8007d84 <_dtoa_r+0x594>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	f7f8 fb19 	bl	8000238 <__aeabi_dsub>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c0e:	462a      	mov	r2, r5
 8007c10:	4633      	mov	r3, r6
 8007c12:	f7f8 ff59 	bl	8000ac8 <__aeabi_dcmpgt>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f040 8298 	bne.w	800814c <_dtoa_r+0x95c>
 8007c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c20:	462a      	mov	r2, r5
 8007c22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c26:	f7f8 ff31 	bl	8000a8c <__aeabi_dcmplt>
 8007c2a:	bb38      	cbnz	r0, 8007c7c <_dtoa_r+0x48c>
 8007c2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007c30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f2c0 8157 	blt.w	8007eea <_dtoa_r+0x6fa>
 8007c3c:	2f0e      	cmp	r7, #14
 8007c3e:	f300 8154 	bgt.w	8007eea <_dtoa_r+0x6fa>
 8007c42:	4b4b      	ldr	r3, [pc, #300]	@ (8007d70 <_dtoa_r+0x580>)
 8007c44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c48:	ed93 7b00 	vldr	d7, [r3]
 8007c4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	ed8d 7b00 	vstr	d7, [sp]
 8007c54:	f280 80e5 	bge.w	8007e22 <_dtoa_r+0x632>
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f300 80e1 	bgt.w	8007e22 <_dtoa_r+0x632>
 8007c60:	d10c      	bne.n	8007c7c <_dtoa_r+0x48c>
 8007c62:	4b48      	ldr	r3, [pc, #288]	@ (8007d84 <_dtoa_r+0x594>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	ec51 0b17 	vmov	r0, r1, d7
 8007c6a:	f7f8 fc9d 	bl	80005a8 <__aeabi_dmul>
 8007c6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c72:	f7f8 ff1f 	bl	8000ab4 <__aeabi_dcmpge>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f000 8266 	beq.w	8008148 <_dtoa_r+0x958>
 8007c7c:	2400      	movs	r4, #0
 8007c7e:	4625      	mov	r5, r4
 8007c80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c82:	4656      	mov	r6, sl
 8007c84:	ea6f 0803 	mvn.w	r8, r3
 8007c88:	2700      	movs	r7, #0
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4648      	mov	r0, r9
 8007c8e:	f000 fcbf 	bl	8008610 <_Bfree>
 8007c92:	2d00      	cmp	r5, #0
 8007c94:	f000 80bd 	beq.w	8007e12 <_dtoa_r+0x622>
 8007c98:	b12f      	cbz	r7, 8007ca6 <_dtoa_r+0x4b6>
 8007c9a:	42af      	cmp	r7, r5
 8007c9c:	d003      	beq.n	8007ca6 <_dtoa_r+0x4b6>
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f000 fcb5 	bl	8008610 <_Bfree>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4648      	mov	r0, r9
 8007caa:	f000 fcb1 	bl	8008610 <_Bfree>
 8007cae:	e0b0      	b.n	8007e12 <_dtoa_r+0x622>
 8007cb0:	07e2      	lsls	r2, r4, #31
 8007cb2:	d505      	bpl.n	8007cc0 <_dtoa_r+0x4d0>
 8007cb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cb8:	f7f8 fc76 	bl	80005a8 <__aeabi_dmul>
 8007cbc:	3601      	adds	r6, #1
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	1064      	asrs	r4, r4, #1
 8007cc2:	3508      	adds	r5, #8
 8007cc4:	e762      	b.n	8007b8c <_dtoa_r+0x39c>
 8007cc6:	2602      	movs	r6, #2
 8007cc8:	e765      	b.n	8007b96 <_dtoa_r+0x3a6>
 8007cca:	9c03      	ldr	r4, [sp, #12]
 8007ccc:	46b8      	mov	r8, r7
 8007cce:	e784      	b.n	8007bda <_dtoa_r+0x3ea>
 8007cd0:	4b27      	ldr	r3, [pc, #156]	@ (8007d70 <_dtoa_r+0x580>)
 8007cd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cdc:	4454      	add	r4, sl
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d054      	beq.n	8007d8c <_dtoa_r+0x59c>
 8007ce2:	4929      	ldr	r1, [pc, #164]	@ (8007d88 <_dtoa_r+0x598>)
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	f7f8 fd89 	bl	80007fc <__aeabi_ddiv>
 8007cea:	4633      	mov	r3, r6
 8007cec:	462a      	mov	r2, r5
 8007cee:	f7f8 faa3 	bl	8000238 <__aeabi_dsub>
 8007cf2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cf6:	4656      	mov	r6, sl
 8007cf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cfc:	f7f8 ff04 	bl	8000b08 <__aeabi_d2iz>
 8007d00:	4605      	mov	r5, r0
 8007d02:	f7f8 fbe7 	bl	80004d4 <__aeabi_i2d>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d0e:	f7f8 fa93 	bl	8000238 <__aeabi_dsub>
 8007d12:	3530      	adds	r5, #48	@ 0x30
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d1c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d24:	f7f8 feb2 	bl	8000a8c <__aeabi_dcmplt>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d172      	bne.n	8007e12 <_dtoa_r+0x622>
 8007d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d30:	4911      	ldr	r1, [pc, #68]	@ (8007d78 <_dtoa_r+0x588>)
 8007d32:	2000      	movs	r0, #0
 8007d34:	f7f8 fa80 	bl	8000238 <__aeabi_dsub>
 8007d38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d3c:	f7f8 fea6 	bl	8000a8c <__aeabi_dcmplt>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f040 80b4 	bne.w	8007eae <_dtoa_r+0x6be>
 8007d46:	42a6      	cmp	r6, r4
 8007d48:	f43f af70 	beq.w	8007c2c <_dtoa_r+0x43c>
 8007d4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d50:	4b0a      	ldr	r3, [pc, #40]	@ (8007d7c <_dtoa_r+0x58c>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	f7f8 fc28 	bl	80005a8 <__aeabi_dmul>
 8007d58:	4b08      	ldr	r3, [pc, #32]	@ (8007d7c <_dtoa_r+0x58c>)
 8007d5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d5e:	2200      	movs	r2, #0
 8007d60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d64:	f7f8 fc20 	bl	80005a8 <__aeabi_dmul>
 8007d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d6c:	e7c4      	b.n	8007cf8 <_dtoa_r+0x508>
 8007d6e:	bf00      	nop
 8007d70:	08009ce8 	.word	0x08009ce8
 8007d74:	08009cc0 	.word	0x08009cc0
 8007d78:	3ff00000 	.word	0x3ff00000
 8007d7c:	40240000 	.word	0x40240000
 8007d80:	401c0000 	.word	0x401c0000
 8007d84:	40140000 	.word	0x40140000
 8007d88:	3fe00000 	.word	0x3fe00000
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f7f8 fc0a 	bl	80005a8 <__aeabi_dmul>
 8007d94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d98:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d9a:	4656      	mov	r6, sl
 8007d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007da0:	f7f8 feb2 	bl	8000b08 <__aeabi_d2iz>
 8007da4:	4605      	mov	r5, r0
 8007da6:	f7f8 fb95 	bl	80004d4 <__aeabi_i2d>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007db2:	f7f8 fa41 	bl	8000238 <__aeabi_dsub>
 8007db6:	3530      	adds	r5, #48	@ 0x30
 8007db8:	f806 5b01 	strb.w	r5, [r6], #1
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	42a6      	cmp	r6, r4
 8007dc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	d124      	bne.n	8007e16 <_dtoa_r+0x626>
 8007dcc:	4baf      	ldr	r3, [pc, #700]	@ (800808c <_dtoa_r+0x89c>)
 8007dce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007dd2:	f7f8 fa33 	bl	800023c <__adddf3>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dde:	f7f8 fe73 	bl	8000ac8 <__aeabi_dcmpgt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d163      	bne.n	8007eae <_dtoa_r+0x6be>
 8007de6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dea:	49a8      	ldr	r1, [pc, #672]	@ (800808c <_dtoa_r+0x89c>)
 8007dec:	2000      	movs	r0, #0
 8007dee:	f7f8 fa23 	bl	8000238 <__aeabi_dsub>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dfa:	f7f8 fe47 	bl	8000a8c <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f af14 	beq.w	8007c2c <_dtoa_r+0x43c>
 8007e04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007e06:	1e73      	subs	r3, r6, #1
 8007e08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e0e:	2b30      	cmp	r3, #48	@ 0x30
 8007e10:	d0f8      	beq.n	8007e04 <_dtoa_r+0x614>
 8007e12:	4647      	mov	r7, r8
 8007e14:	e03b      	b.n	8007e8e <_dtoa_r+0x69e>
 8007e16:	4b9e      	ldr	r3, [pc, #632]	@ (8008090 <_dtoa_r+0x8a0>)
 8007e18:	f7f8 fbc6 	bl	80005a8 <__aeabi_dmul>
 8007e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e20:	e7bc      	b.n	8007d9c <_dtoa_r+0x5ac>
 8007e22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007e26:	4656      	mov	r6, sl
 8007e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f7f8 fce4 	bl	80007fc <__aeabi_ddiv>
 8007e34:	f7f8 fe68 	bl	8000b08 <__aeabi_d2iz>
 8007e38:	4680      	mov	r8, r0
 8007e3a:	f7f8 fb4b 	bl	80004d4 <__aeabi_i2d>
 8007e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e42:	f7f8 fbb1 	bl	80005a8 <__aeabi_dmul>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e52:	f7f8 f9f1 	bl	8000238 <__aeabi_dsub>
 8007e56:	f806 4b01 	strb.w	r4, [r6], #1
 8007e5a:	9d03      	ldr	r5, [sp, #12]
 8007e5c:	eba6 040a 	sub.w	r4, r6, sl
 8007e60:	42a5      	cmp	r5, r4
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	d133      	bne.n	8007ed0 <_dtoa_r+0x6e0>
 8007e68:	f7f8 f9e8 	bl	800023c <__adddf3>
 8007e6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	f7f8 fe28 	bl	8000ac8 <__aeabi_dcmpgt>
 8007e78:	b9c0      	cbnz	r0, 8007eac <_dtoa_r+0x6bc>
 8007e7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 fdf9 	bl	8000a78 <__aeabi_dcmpeq>
 8007e86:	b110      	cbz	r0, 8007e8e <_dtoa_r+0x69e>
 8007e88:	f018 0f01 	tst.w	r8, #1
 8007e8c:	d10e      	bne.n	8007eac <_dtoa_r+0x6bc>
 8007e8e:	9902      	ldr	r1, [sp, #8]
 8007e90:	4648      	mov	r0, r9
 8007e92:	f000 fbbd 	bl	8008610 <_Bfree>
 8007e96:	2300      	movs	r3, #0
 8007e98:	7033      	strb	r3, [r6, #0]
 8007e9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e9c:	3701      	adds	r7, #1
 8007e9e:	601f      	str	r7, [r3, #0]
 8007ea0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 824b 	beq.w	800833e <_dtoa_r+0xb4e>
 8007ea8:	601e      	str	r6, [r3, #0]
 8007eaa:	e248      	b.n	800833e <_dtoa_r+0xb4e>
 8007eac:	46b8      	mov	r8, r7
 8007eae:	4633      	mov	r3, r6
 8007eb0:	461e      	mov	r6, r3
 8007eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eb6:	2a39      	cmp	r2, #57	@ 0x39
 8007eb8:	d106      	bne.n	8007ec8 <_dtoa_r+0x6d8>
 8007eba:	459a      	cmp	sl, r3
 8007ebc:	d1f8      	bne.n	8007eb0 <_dtoa_r+0x6c0>
 8007ebe:	2230      	movs	r2, #48	@ 0x30
 8007ec0:	f108 0801 	add.w	r8, r8, #1
 8007ec4:	f88a 2000 	strb.w	r2, [sl]
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	3201      	adds	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e7a0      	b.n	8007e12 <_dtoa_r+0x622>
 8007ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8008090 <_dtoa_r+0x8a0>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f7f8 fb68 	bl	80005a8 <__aeabi_dmul>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2300      	movs	r3, #0
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	f7f8 fdca 	bl	8000a78 <__aeabi_dcmpeq>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d09f      	beq.n	8007e28 <_dtoa_r+0x638>
 8007ee8:	e7d1      	b.n	8007e8e <_dtoa_r+0x69e>
 8007eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	f000 80ea 	beq.w	80080c6 <_dtoa_r+0x8d6>
 8007ef2:	9a07      	ldr	r2, [sp, #28]
 8007ef4:	2a01      	cmp	r2, #1
 8007ef6:	f300 80cd 	bgt.w	8008094 <_dtoa_r+0x8a4>
 8007efa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007efc:	2a00      	cmp	r2, #0
 8007efe:	f000 80c1 	beq.w	8008084 <_dtoa_r+0x894>
 8007f02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f06:	9c08      	ldr	r4, [sp, #32]
 8007f08:	9e00      	ldr	r6, [sp, #0]
 8007f0a:	9a00      	ldr	r2, [sp, #0]
 8007f0c:	441a      	add	r2, r3
 8007f0e:	9200      	str	r2, [sp, #0]
 8007f10:	9a06      	ldr	r2, [sp, #24]
 8007f12:	2101      	movs	r1, #1
 8007f14:	441a      	add	r2, r3
 8007f16:	4648      	mov	r0, r9
 8007f18:	9206      	str	r2, [sp, #24]
 8007f1a:	f000 fc2d 	bl	8008778 <__i2b>
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b166      	cbz	r6, 8007f3c <_dtoa_r+0x74c>
 8007f22:	9b06      	ldr	r3, [sp, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd09      	ble.n	8007f3c <_dtoa_r+0x74c>
 8007f28:	42b3      	cmp	r3, r6
 8007f2a:	9a00      	ldr	r2, [sp, #0]
 8007f2c:	bfa8      	it	ge
 8007f2e:	4633      	movge	r3, r6
 8007f30:	1ad2      	subs	r2, r2, r3
 8007f32:	9200      	str	r2, [sp, #0]
 8007f34:	9a06      	ldr	r2, [sp, #24]
 8007f36:	1af6      	subs	r6, r6, r3
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	9306      	str	r3, [sp, #24]
 8007f3c:	9b08      	ldr	r3, [sp, #32]
 8007f3e:	b30b      	cbz	r3, 8007f84 <_dtoa_r+0x794>
 8007f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 80c6 	beq.w	80080d4 <_dtoa_r+0x8e4>
 8007f48:	2c00      	cmp	r4, #0
 8007f4a:	f000 80c0 	beq.w	80080ce <_dtoa_r+0x8de>
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4622      	mov	r2, r4
 8007f52:	4648      	mov	r0, r9
 8007f54:	f000 fcc8 	bl	80088e8 <__pow5mult>
 8007f58:	9a02      	ldr	r2, [sp, #8]
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f000 fc20 	bl	80087a4 <__multiply>
 8007f64:	9902      	ldr	r1, [sp, #8]
 8007f66:	4680      	mov	r8, r0
 8007f68:	4648      	mov	r0, r9
 8007f6a:	f000 fb51 	bl	8008610 <_Bfree>
 8007f6e:	9b08      	ldr	r3, [sp, #32]
 8007f70:	1b1b      	subs	r3, r3, r4
 8007f72:	9308      	str	r3, [sp, #32]
 8007f74:	f000 80b1 	beq.w	80080da <_dtoa_r+0x8ea>
 8007f78:	9a08      	ldr	r2, [sp, #32]
 8007f7a:	4641      	mov	r1, r8
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f000 fcb3 	bl	80088e8 <__pow5mult>
 8007f82:	9002      	str	r0, [sp, #8]
 8007f84:	2101      	movs	r1, #1
 8007f86:	4648      	mov	r0, r9
 8007f88:	f000 fbf6 	bl	8008778 <__i2b>
 8007f8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f8e:	4604      	mov	r4, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 81d8 	beq.w	8008346 <_dtoa_r+0xb56>
 8007f96:	461a      	mov	r2, r3
 8007f98:	4601      	mov	r1, r0
 8007f9a:	4648      	mov	r0, r9
 8007f9c:	f000 fca4 	bl	80088e8 <__pow5mult>
 8007fa0:	9b07      	ldr	r3, [sp, #28]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	f300 809f 	bgt.w	80080e8 <_dtoa_r+0x8f8>
 8007faa:	9b04      	ldr	r3, [sp, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 8097 	bne.w	80080e0 <_dtoa_r+0x8f0>
 8007fb2:	9b05      	ldr	r3, [sp, #20]
 8007fb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 8093 	bne.w	80080e4 <_dtoa_r+0x8f4>
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fc4:	0d1b      	lsrs	r3, r3, #20
 8007fc6:	051b      	lsls	r3, r3, #20
 8007fc8:	b133      	cbz	r3, 8007fd8 <_dtoa_r+0x7e8>
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	9306      	str	r3, [sp, #24]
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	9308      	str	r3, [sp, #32]
 8007fda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 81b8 	beq.w	8008352 <_dtoa_r+0xb62>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fe8:	6918      	ldr	r0, [r3, #16]
 8007fea:	f000 fb79 	bl	80086e0 <__hi0bits>
 8007fee:	f1c0 0020 	rsb	r0, r0, #32
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	4418      	add	r0, r3
 8007ff6:	f010 001f 	ands.w	r0, r0, #31
 8007ffa:	f000 8082 	beq.w	8008102 <_dtoa_r+0x912>
 8007ffe:	f1c0 0320 	rsb	r3, r0, #32
 8008002:	2b04      	cmp	r3, #4
 8008004:	dd73      	ble.n	80080ee <_dtoa_r+0x8fe>
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	f1c0 001c 	rsb	r0, r0, #28
 800800c:	4403      	add	r3, r0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	9b06      	ldr	r3, [sp, #24]
 8008012:	4403      	add	r3, r0
 8008014:	4406      	add	r6, r0
 8008016:	9306      	str	r3, [sp, #24]
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dd05      	ble.n	800802a <_dtoa_r+0x83a>
 800801e:	9902      	ldr	r1, [sp, #8]
 8008020:	461a      	mov	r2, r3
 8008022:	4648      	mov	r0, r9
 8008024:	f000 fcba 	bl	800899c <__lshift>
 8008028:	9002      	str	r0, [sp, #8]
 800802a:	9b06      	ldr	r3, [sp, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd05      	ble.n	800803c <_dtoa_r+0x84c>
 8008030:	4621      	mov	r1, r4
 8008032:	461a      	mov	r2, r3
 8008034:	4648      	mov	r0, r9
 8008036:	f000 fcb1 	bl	800899c <__lshift>
 800803a:	4604      	mov	r4, r0
 800803c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d061      	beq.n	8008106 <_dtoa_r+0x916>
 8008042:	9802      	ldr	r0, [sp, #8]
 8008044:	4621      	mov	r1, r4
 8008046:	f000 fd15 	bl	8008a74 <__mcmp>
 800804a:	2800      	cmp	r0, #0
 800804c:	da5b      	bge.n	8008106 <_dtoa_r+0x916>
 800804e:	2300      	movs	r3, #0
 8008050:	9902      	ldr	r1, [sp, #8]
 8008052:	220a      	movs	r2, #10
 8008054:	4648      	mov	r0, r9
 8008056:	f000 fafd 	bl	8008654 <__multadd>
 800805a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805c:	9002      	str	r0, [sp, #8]
 800805e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 8177 	beq.w	8008356 <_dtoa_r+0xb66>
 8008068:	4629      	mov	r1, r5
 800806a:	2300      	movs	r3, #0
 800806c:	220a      	movs	r2, #10
 800806e:	4648      	mov	r0, r9
 8008070:	f000 faf0 	bl	8008654 <__multadd>
 8008074:	f1bb 0f00 	cmp.w	fp, #0
 8008078:	4605      	mov	r5, r0
 800807a:	dc6f      	bgt.n	800815c <_dtoa_r+0x96c>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	2b02      	cmp	r3, #2
 8008080:	dc49      	bgt.n	8008116 <_dtoa_r+0x926>
 8008082:	e06b      	b.n	800815c <_dtoa_r+0x96c>
 8008084:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008086:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800808a:	e73c      	b.n	8007f06 <_dtoa_r+0x716>
 800808c:	3fe00000 	.word	0x3fe00000
 8008090:	40240000 	.word	0x40240000
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1e5c      	subs	r4, r3, #1
 8008098:	9b08      	ldr	r3, [sp, #32]
 800809a:	42a3      	cmp	r3, r4
 800809c:	db09      	blt.n	80080b2 <_dtoa_r+0x8c2>
 800809e:	1b1c      	subs	r4, r3, r4
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f6bf af30 	bge.w	8007f08 <_dtoa_r+0x718>
 80080a8:	9b00      	ldr	r3, [sp, #0]
 80080aa:	9a03      	ldr	r2, [sp, #12]
 80080ac:	1a9e      	subs	r6, r3, r2
 80080ae:	2300      	movs	r3, #0
 80080b0:	e72b      	b.n	8007f0a <_dtoa_r+0x71a>
 80080b2:	9b08      	ldr	r3, [sp, #32]
 80080b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080b6:	9408      	str	r4, [sp, #32]
 80080b8:	1ae3      	subs	r3, r4, r3
 80080ba:	441a      	add	r2, r3
 80080bc:	9e00      	ldr	r6, [sp, #0]
 80080be:	9b03      	ldr	r3, [sp, #12]
 80080c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80080c2:	2400      	movs	r4, #0
 80080c4:	e721      	b.n	8007f0a <_dtoa_r+0x71a>
 80080c6:	9c08      	ldr	r4, [sp, #32]
 80080c8:	9e00      	ldr	r6, [sp, #0]
 80080ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80080cc:	e728      	b.n	8007f20 <_dtoa_r+0x730>
 80080ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080d2:	e751      	b.n	8007f78 <_dtoa_r+0x788>
 80080d4:	9a08      	ldr	r2, [sp, #32]
 80080d6:	9902      	ldr	r1, [sp, #8]
 80080d8:	e750      	b.n	8007f7c <_dtoa_r+0x78c>
 80080da:	f8cd 8008 	str.w	r8, [sp, #8]
 80080de:	e751      	b.n	8007f84 <_dtoa_r+0x794>
 80080e0:	2300      	movs	r3, #0
 80080e2:	e779      	b.n	8007fd8 <_dtoa_r+0x7e8>
 80080e4:	9b04      	ldr	r3, [sp, #16]
 80080e6:	e777      	b.n	8007fd8 <_dtoa_r+0x7e8>
 80080e8:	2300      	movs	r3, #0
 80080ea:	9308      	str	r3, [sp, #32]
 80080ec:	e779      	b.n	8007fe2 <_dtoa_r+0x7f2>
 80080ee:	d093      	beq.n	8008018 <_dtoa_r+0x828>
 80080f0:	9a00      	ldr	r2, [sp, #0]
 80080f2:	331c      	adds	r3, #28
 80080f4:	441a      	add	r2, r3
 80080f6:	9200      	str	r2, [sp, #0]
 80080f8:	9a06      	ldr	r2, [sp, #24]
 80080fa:	441a      	add	r2, r3
 80080fc:	441e      	add	r6, r3
 80080fe:	9206      	str	r2, [sp, #24]
 8008100:	e78a      	b.n	8008018 <_dtoa_r+0x828>
 8008102:	4603      	mov	r3, r0
 8008104:	e7f4      	b.n	80080f0 <_dtoa_r+0x900>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	46b8      	mov	r8, r7
 800810c:	dc20      	bgt.n	8008150 <_dtoa_r+0x960>
 800810e:	469b      	mov	fp, r3
 8008110:	9b07      	ldr	r3, [sp, #28]
 8008112:	2b02      	cmp	r3, #2
 8008114:	dd1e      	ble.n	8008154 <_dtoa_r+0x964>
 8008116:	f1bb 0f00 	cmp.w	fp, #0
 800811a:	f47f adb1 	bne.w	8007c80 <_dtoa_r+0x490>
 800811e:	4621      	mov	r1, r4
 8008120:	465b      	mov	r3, fp
 8008122:	2205      	movs	r2, #5
 8008124:	4648      	mov	r0, r9
 8008126:	f000 fa95 	bl	8008654 <__multadd>
 800812a:	4601      	mov	r1, r0
 800812c:	4604      	mov	r4, r0
 800812e:	9802      	ldr	r0, [sp, #8]
 8008130:	f000 fca0 	bl	8008a74 <__mcmp>
 8008134:	2800      	cmp	r0, #0
 8008136:	f77f ada3 	ble.w	8007c80 <_dtoa_r+0x490>
 800813a:	4656      	mov	r6, sl
 800813c:	2331      	movs	r3, #49	@ 0x31
 800813e:	f806 3b01 	strb.w	r3, [r6], #1
 8008142:	f108 0801 	add.w	r8, r8, #1
 8008146:	e59f      	b.n	8007c88 <_dtoa_r+0x498>
 8008148:	9c03      	ldr	r4, [sp, #12]
 800814a:	46b8      	mov	r8, r7
 800814c:	4625      	mov	r5, r4
 800814e:	e7f4      	b.n	800813a <_dtoa_r+0x94a>
 8008150:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8101 	beq.w	800835e <_dtoa_r+0xb6e>
 800815c:	2e00      	cmp	r6, #0
 800815e:	dd05      	ble.n	800816c <_dtoa_r+0x97c>
 8008160:	4629      	mov	r1, r5
 8008162:	4632      	mov	r2, r6
 8008164:	4648      	mov	r0, r9
 8008166:	f000 fc19 	bl	800899c <__lshift>
 800816a:	4605      	mov	r5, r0
 800816c:	9b08      	ldr	r3, [sp, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d05c      	beq.n	800822c <_dtoa_r+0xa3c>
 8008172:	6869      	ldr	r1, [r5, #4]
 8008174:	4648      	mov	r0, r9
 8008176:	f000 fa0b 	bl	8008590 <_Balloc>
 800817a:	4606      	mov	r6, r0
 800817c:	b928      	cbnz	r0, 800818a <_dtoa_r+0x99a>
 800817e:	4b82      	ldr	r3, [pc, #520]	@ (8008388 <_dtoa_r+0xb98>)
 8008180:	4602      	mov	r2, r0
 8008182:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008186:	f7ff bb4a 	b.w	800781e <_dtoa_r+0x2e>
 800818a:	692a      	ldr	r2, [r5, #16]
 800818c:	3202      	adds	r2, #2
 800818e:	0092      	lsls	r2, r2, #2
 8008190:	f105 010c 	add.w	r1, r5, #12
 8008194:	300c      	adds	r0, #12
 8008196:	f7ff fa92 	bl	80076be <memcpy>
 800819a:	2201      	movs	r2, #1
 800819c:	4631      	mov	r1, r6
 800819e:	4648      	mov	r0, r9
 80081a0:	f000 fbfc 	bl	800899c <__lshift>
 80081a4:	f10a 0301 	add.w	r3, sl, #1
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	eb0a 030b 	add.w	r3, sl, fp
 80081ae:	9308      	str	r3, [sp, #32]
 80081b0:	9b04      	ldr	r3, [sp, #16]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	462f      	mov	r7, r5
 80081b8:	9306      	str	r3, [sp, #24]
 80081ba:	4605      	mov	r5, r0
 80081bc:	9b00      	ldr	r3, [sp, #0]
 80081be:	9802      	ldr	r0, [sp, #8]
 80081c0:	4621      	mov	r1, r4
 80081c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80081c6:	f7ff fa88 	bl	80076da <quorem>
 80081ca:	4603      	mov	r3, r0
 80081cc:	3330      	adds	r3, #48	@ 0x30
 80081ce:	9003      	str	r0, [sp, #12]
 80081d0:	4639      	mov	r1, r7
 80081d2:	9802      	ldr	r0, [sp, #8]
 80081d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d6:	f000 fc4d 	bl	8008a74 <__mcmp>
 80081da:	462a      	mov	r2, r5
 80081dc:	9004      	str	r0, [sp, #16]
 80081de:	4621      	mov	r1, r4
 80081e0:	4648      	mov	r0, r9
 80081e2:	f000 fc63 	bl	8008aac <__mdiff>
 80081e6:	68c2      	ldr	r2, [r0, #12]
 80081e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ea:	4606      	mov	r6, r0
 80081ec:	bb02      	cbnz	r2, 8008230 <_dtoa_r+0xa40>
 80081ee:	4601      	mov	r1, r0
 80081f0:	9802      	ldr	r0, [sp, #8]
 80081f2:	f000 fc3f 	bl	8008a74 <__mcmp>
 80081f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f8:	4602      	mov	r2, r0
 80081fa:	4631      	mov	r1, r6
 80081fc:	4648      	mov	r0, r9
 80081fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008200:	9309      	str	r3, [sp, #36]	@ 0x24
 8008202:	f000 fa05 	bl	8008610 <_Bfree>
 8008206:	9b07      	ldr	r3, [sp, #28]
 8008208:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800820a:	9e00      	ldr	r6, [sp, #0]
 800820c:	ea42 0103 	orr.w	r1, r2, r3
 8008210:	9b06      	ldr	r3, [sp, #24]
 8008212:	4319      	orrs	r1, r3
 8008214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008216:	d10d      	bne.n	8008234 <_dtoa_r+0xa44>
 8008218:	2b39      	cmp	r3, #57	@ 0x39
 800821a:	d027      	beq.n	800826c <_dtoa_r+0xa7c>
 800821c:	9a04      	ldr	r2, [sp, #16]
 800821e:	2a00      	cmp	r2, #0
 8008220:	dd01      	ble.n	8008226 <_dtoa_r+0xa36>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	3331      	adds	r3, #49	@ 0x31
 8008226:	f88b 3000 	strb.w	r3, [fp]
 800822a:	e52e      	b.n	8007c8a <_dtoa_r+0x49a>
 800822c:	4628      	mov	r0, r5
 800822e:	e7b9      	b.n	80081a4 <_dtoa_r+0x9b4>
 8008230:	2201      	movs	r2, #1
 8008232:	e7e2      	b.n	80081fa <_dtoa_r+0xa0a>
 8008234:	9904      	ldr	r1, [sp, #16]
 8008236:	2900      	cmp	r1, #0
 8008238:	db04      	blt.n	8008244 <_dtoa_r+0xa54>
 800823a:	9807      	ldr	r0, [sp, #28]
 800823c:	4301      	orrs	r1, r0
 800823e:	9806      	ldr	r0, [sp, #24]
 8008240:	4301      	orrs	r1, r0
 8008242:	d120      	bne.n	8008286 <_dtoa_r+0xa96>
 8008244:	2a00      	cmp	r2, #0
 8008246:	ddee      	ble.n	8008226 <_dtoa_r+0xa36>
 8008248:	9902      	ldr	r1, [sp, #8]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	2201      	movs	r2, #1
 800824e:	4648      	mov	r0, r9
 8008250:	f000 fba4 	bl	800899c <__lshift>
 8008254:	4621      	mov	r1, r4
 8008256:	9002      	str	r0, [sp, #8]
 8008258:	f000 fc0c 	bl	8008a74 <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	9b00      	ldr	r3, [sp, #0]
 8008260:	dc02      	bgt.n	8008268 <_dtoa_r+0xa78>
 8008262:	d1e0      	bne.n	8008226 <_dtoa_r+0xa36>
 8008264:	07da      	lsls	r2, r3, #31
 8008266:	d5de      	bpl.n	8008226 <_dtoa_r+0xa36>
 8008268:	2b39      	cmp	r3, #57	@ 0x39
 800826a:	d1da      	bne.n	8008222 <_dtoa_r+0xa32>
 800826c:	2339      	movs	r3, #57	@ 0x39
 800826e:	f88b 3000 	strb.w	r3, [fp]
 8008272:	4633      	mov	r3, r6
 8008274:	461e      	mov	r6, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800827c:	2a39      	cmp	r2, #57	@ 0x39
 800827e:	d04e      	beq.n	800831e <_dtoa_r+0xb2e>
 8008280:	3201      	adds	r2, #1
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e501      	b.n	8007c8a <_dtoa_r+0x49a>
 8008286:	2a00      	cmp	r2, #0
 8008288:	dd03      	ble.n	8008292 <_dtoa_r+0xaa2>
 800828a:	2b39      	cmp	r3, #57	@ 0x39
 800828c:	d0ee      	beq.n	800826c <_dtoa_r+0xa7c>
 800828e:	3301      	adds	r3, #1
 8008290:	e7c9      	b.n	8008226 <_dtoa_r+0xa36>
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	9908      	ldr	r1, [sp, #32]
 8008296:	f802 3c01 	strb.w	r3, [r2, #-1]
 800829a:	428a      	cmp	r2, r1
 800829c:	d028      	beq.n	80082f0 <_dtoa_r+0xb00>
 800829e:	9902      	ldr	r1, [sp, #8]
 80082a0:	2300      	movs	r3, #0
 80082a2:	220a      	movs	r2, #10
 80082a4:	4648      	mov	r0, r9
 80082a6:	f000 f9d5 	bl	8008654 <__multadd>
 80082aa:	42af      	cmp	r7, r5
 80082ac:	9002      	str	r0, [sp, #8]
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	f04f 020a 	mov.w	r2, #10
 80082b6:	4639      	mov	r1, r7
 80082b8:	4648      	mov	r0, r9
 80082ba:	d107      	bne.n	80082cc <_dtoa_r+0xadc>
 80082bc:	f000 f9ca 	bl	8008654 <__multadd>
 80082c0:	4607      	mov	r7, r0
 80082c2:	4605      	mov	r5, r0
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	e777      	b.n	80081bc <_dtoa_r+0x9cc>
 80082cc:	f000 f9c2 	bl	8008654 <__multadd>
 80082d0:	4629      	mov	r1, r5
 80082d2:	4607      	mov	r7, r0
 80082d4:	2300      	movs	r3, #0
 80082d6:	220a      	movs	r2, #10
 80082d8:	4648      	mov	r0, r9
 80082da:	f000 f9bb 	bl	8008654 <__multadd>
 80082de:	4605      	mov	r5, r0
 80082e0:	e7f0      	b.n	80082c4 <_dtoa_r+0xad4>
 80082e2:	f1bb 0f00 	cmp.w	fp, #0
 80082e6:	bfcc      	ite	gt
 80082e8:	465e      	movgt	r6, fp
 80082ea:	2601      	movle	r6, #1
 80082ec:	4456      	add	r6, sl
 80082ee:	2700      	movs	r7, #0
 80082f0:	9902      	ldr	r1, [sp, #8]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2201      	movs	r2, #1
 80082f6:	4648      	mov	r0, r9
 80082f8:	f000 fb50 	bl	800899c <__lshift>
 80082fc:	4621      	mov	r1, r4
 80082fe:	9002      	str	r0, [sp, #8]
 8008300:	f000 fbb8 	bl	8008a74 <__mcmp>
 8008304:	2800      	cmp	r0, #0
 8008306:	dcb4      	bgt.n	8008272 <_dtoa_r+0xa82>
 8008308:	d102      	bne.n	8008310 <_dtoa_r+0xb20>
 800830a:	9b00      	ldr	r3, [sp, #0]
 800830c:	07db      	lsls	r3, r3, #31
 800830e:	d4b0      	bmi.n	8008272 <_dtoa_r+0xa82>
 8008310:	4633      	mov	r3, r6
 8008312:	461e      	mov	r6, r3
 8008314:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008318:	2a30      	cmp	r2, #48	@ 0x30
 800831a:	d0fa      	beq.n	8008312 <_dtoa_r+0xb22>
 800831c:	e4b5      	b.n	8007c8a <_dtoa_r+0x49a>
 800831e:	459a      	cmp	sl, r3
 8008320:	d1a8      	bne.n	8008274 <_dtoa_r+0xa84>
 8008322:	2331      	movs	r3, #49	@ 0x31
 8008324:	f108 0801 	add.w	r8, r8, #1
 8008328:	f88a 3000 	strb.w	r3, [sl]
 800832c:	e4ad      	b.n	8007c8a <_dtoa_r+0x49a>
 800832e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008330:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800838c <_dtoa_r+0xb9c>
 8008334:	b11b      	cbz	r3, 800833e <_dtoa_r+0xb4e>
 8008336:	f10a 0308 	add.w	r3, sl, #8
 800833a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	4650      	mov	r0, sl
 8008340:	b017      	add	sp, #92	@ 0x5c
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	9b07      	ldr	r3, [sp, #28]
 8008348:	2b01      	cmp	r3, #1
 800834a:	f77f ae2e 	ble.w	8007faa <_dtoa_r+0x7ba>
 800834e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008350:	9308      	str	r3, [sp, #32]
 8008352:	2001      	movs	r0, #1
 8008354:	e64d      	b.n	8007ff2 <_dtoa_r+0x802>
 8008356:	f1bb 0f00 	cmp.w	fp, #0
 800835a:	f77f aed9 	ble.w	8008110 <_dtoa_r+0x920>
 800835e:	4656      	mov	r6, sl
 8008360:	9802      	ldr	r0, [sp, #8]
 8008362:	4621      	mov	r1, r4
 8008364:	f7ff f9b9 	bl	80076da <quorem>
 8008368:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800836c:	f806 3b01 	strb.w	r3, [r6], #1
 8008370:	eba6 020a 	sub.w	r2, r6, sl
 8008374:	4593      	cmp	fp, r2
 8008376:	ddb4      	ble.n	80082e2 <_dtoa_r+0xaf2>
 8008378:	9902      	ldr	r1, [sp, #8]
 800837a:	2300      	movs	r3, #0
 800837c:	220a      	movs	r2, #10
 800837e:	4648      	mov	r0, r9
 8008380:	f000 f968 	bl	8008654 <__multadd>
 8008384:	9002      	str	r0, [sp, #8]
 8008386:	e7eb      	b.n	8008360 <_dtoa_r+0xb70>
 8008388:	08009bec 	.word	0x08009bec
 800838c:	08009b70 	.word	0x08009b70

08008390 <_free_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4605      	mov	r5, r0
 8008394:	2900      	cmp	r1, #0
 8008396:	d041      	beq.n	800841c <_free_r+0x8c>
 8008398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839c:	1f0c      	subs	r4, r1, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfb8      	it	lt
 80083a2:	18e4      	addlt	r4, r4, r3
 80083a4:	f000 f8e8 	bl	8008578 <__malloc_lock>
 80083a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008420 <_free_r+0x90>)
 80083aa:	6813      	ldr	r3, [r2, #0]
 80083ac:	b933      	cbnz	r3, 80083bc <_free_r+0x2c>
 80083ae:	6063      	str	r3, [r4, #4]
 80083b0:	6014      	str	r4, [r2, #0]
 80083b2:	4628      	mov	r0, r5
 80083b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b8:	f000 b8e4 	b.w	8008584 <__malloc_unlock>
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d908      	bls.n	80083d2 <_free_r+0x42>
 80083c0:	6820      	ldr	r0, [r4, #0]
 80083c2:	1821      	adds	r1, r4, r0
 80083c4:	428b      	cmp	r3, r1
 80083c6:	bf01      	itttt	eq
 80083c8:	6819      	ldreq	r1, [r3, #0]
 80083ca:	685b      	ldreq	r3, [r3, #4]
 80083cc:	1809      	addeq	r1, r1, r0
 80083ce:	6021      	streq	r1, [r4, #0]
 80083d0:	e7ed      	b.n	80083ae <_free_r+0x1e>
 80083d2:	461a      	mov	r2, r3
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b10b      	cbz	r3, 80083dc <_free_r+0x4c>
 80083d8:	42a3      	cmp	r3, r4
 80083da:	d9fa      	bls.n	80083d2 <_free_r+0x42>
 80083dc:	6811      	ldr	r1, [r2, #0]
 80083de:	1850      	adds	r0, r2, r1
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d10b      	bne.n	80083fc <_free_r+0x6c>
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	4401      	add	r1, r0
 80083e8:	1850      	adds	r0, r2, r1
 80083ea:	4283      	cmp	r3, r0
 80083ec:	6011      	str	r1, [r2, #0]
 80083ee:	d1e0      	bne.n	80083b2 <_free_r+0x22>
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	6053      	str	r3, [r2, #4]
 80083f6:	4408      	add	r0, r1
 80083f8:	6010      	str	r0, [r2, #0]
 80083fa:	e7da      	b.n	80083b2 <_free_r+0x22>
 80083fc:	d902      	bls.n	8008404 <_free_r+0x74>
 80083fe:	230c      	movs	r3, #12
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	e7d6      	b.n	80083b2 <_free_r+0x22>
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	1821      	adds	r1, r4, r0
 8008408:	428b      	cmp	r3, r1
 800840a:	bf04      	itt	eq
 800840c:	6819      	ldreq	r1, [r3, #0]
 800840e:	685b      	ldreq	r3, [r3, #4]
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	bf04      	itt	eq
 8008414:	1809      	addeq	r1, r1, r0
 8008416:	6021      	streq	r1, [r4, #0]
 8008418:	6054      	str	r4, [r2, #4]
 800841a:	e7ca      	b.n	80083b2 <_free_r+0x22>
 800841c:	bd38      	pop	{r3, r4, r5, pc}
 800841e:	bf00      	nop
 8008420:	200007b8 	.word	0x200007b8

08008424 <malloc>:
 8008424:	4b02      	ldr	r3, [pc, #8]	@ (8008430 <malloc+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f000 b825 	b.w	8008478 <_malloc_r>
 800842e:	bf00      	nop
 8008430:	20000054 	.word	0x20000054

08008434 <sbrk_aligned>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	4e0f      	ldr	r6, [pc, #60]	@ (8008474 <sbrk_aligned+0x40>)
 8008438:	460c      	mov	r4, r1
 800843a:	6831      	ldr	r1, [r6, #0]
 800843c:	4605      	mov	r5, r0
 800843e:	b911      	cbnz	r1, 8008446 <sbrk_aligned+0x12>
 8008440:	f000 fe3e 	bl	80090c0 <_sbrk_r>
 8008444:	6030      	str	r0, [r6, #0]
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 fe39 	bl	80090c0 <_sbrk_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d103      	bne.n	800845a <sbrk_aligned+0x26>
 8008452:	f04f 34ff 	mov.w	r4, #4294967295
 8008456:	4620      	mov	r0, r4
 8008458:	bd70      	pop	{r4, r5, r6, pc}
 800845a:	1cc4      	adds	r4, r0, #3
 800845c:	f024 0403 	bic.w	r4, r4, #3
 8008460:	42a0      	cmp	r0, r4
 8008462:	d0f8      	beq.n	8008456 <sbrk_aligned+0x22>
 8008464:	1a21      	subs	r1, r4, r0
 8008466:	4628      	mov	r0, r5
 8008468:	f000 fe2a 	bl	80090c0 <_sbrk_r>
 800846c:	3001      	adds	r0, #1
 800846e:	d1f2      	bne.n	8008456 <sbrk_aligned+0x22>
 8008470:	e7ef      	b.n	8008452 <sbrk_aligned+0x1e>
 8008472:	bf00      	nop
 8008474:	200007b4 	.word	0x200007b4

08008478 <_malloc_r>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	1ccd      	adds	r5, r1, #3
 800847e:	f025 0503 	bic.w	r5, r5, #3
 8008482:	3508      	adds	r5, #8
 8008484:	2d0c      	cmp	r5, #12
 8008486:	bf38      	it	cc
 8008488:	250c      	movcc	r5, #12
 800848a:	2d00      	cmp	r5, #0
 800848c:	4606      	mov	r6, r0
 800848e:	db01      	blt.n	8008494 <_malloc_r+0x1c>
 8008490:	42a9      	cmp	r1, r5
 8008492:	d904      	bls.n	800849e <_malloc_r+0x26>
 8008494:	230c      	movs	r3, #12
 8008496:	6033      	str	r3, [r6, #0]
 8008498:	2000      	movs	r0, #0
 800849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008574 <_malloc_r+0xfc>
 80084a2:	f000 f869 	bl	8008578 <__malloc_lock>
 80084a6:	f8d8 3000 	ldr.w	r3, [r8]
 80084aa:	461c      	mov	r4, r3
 80084ac:	bb44      	cbnz	r4, 8008500 <_malloc_r+0x88>
 80084ae:	4629      	mov	r1, r5
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff ffbf 	bl	8008434 <sbrk_aligned>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	4604      	mov	r4, r0
 80084ba:	d158      	bne.n	800856e <_malloc_r+0xf6>
 80084bc:	f8d8 4000 	ldr.w	r4, [r8]
 80084c0:	4627      	mov	r7, r4
 80084c2:	2f00      	cmp	r7, #0
 80084c4:	d143      	bne.n	800854e <_malloc_r+0xd6>
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d04b      	beq.n	8008562 <_malloc_r+0xea>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	4639      	mov	r1, r7
 80084ce:	4630      	mov	r0, r6
 80084d0:	eb04 0903 	add.w	r9, r4, r3
 80084d4:	f000 fdf4 	bl	80090c0 <_sbrk_r>
 80084d8:	4581      	cmp	r9, r0
 80084da:	d142      	bne.n	8008562 <_malloc_r+0xea>
 80084dc:	6821      	ldr	r1, [r4, #0]
 80084de:	1a6d      	subs	r5, r5, r1
 80084e0:	4629      	mov	r1, r5
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7ff ffa6 	bl	8008434 <sbrk_aligned>
 80084e8:	3001      	adds	r0, #1
 80084ea:	d03a      	beq.n	8008562 <_malloc_r+0xea>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	442b      	add	r3, r5
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	f8d8 3000 	ldr.w	r3, [r8]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	bb62      	cbnz	r2, 8008554 <_malloc_r+0xdc>
 80084fa:	f8c8 7000 	str.w	r7, [r8]
 80084fe:	e00f      	b.n	8008520 <_malloc_r+0xa8>
 8008500:	6822      	ldr	r2, [r4, #0]
 8008502:	1b52      	subs	r2, r2, r5
 8008504:	d420      	bmi.n	8008548 <_malloc_r+0xd0>
 8008506:	2a0b      	cmp	r2, #11
 8008508:	d917      	bls.n	800853a <_malloc_r+0xc2>
 800850a:	1961      	adds	r1, r4, r5
 800850c:	42a3      	cmp	r3, r4
 800850e:	6025      	str	r5, [r4, #0]
 8008510:	bf18      	it	ne
 8008512:	6059      	strne	r1, [r3, #4]
 8008514:	6863      	ldr	r3, [r4, #4]
 8008516:	bf08      	it	eq
 8008518:	f8c8 1000 	streq.w	r1, [r8]
 800851c:	5162      	str	r2, [r4, r5]
 800851e:	604b      	str	r3, [r1, #4]
 8008520:	4630      	mov	r0, r6
 8008522:	f000 f82f 	bl	8008584 <__malloc_unlock>
 8008526:	f104 000b 	add.w	r0, r4, #11
 800852a:	1d23      	adds	r3, r4, #4
 800852c:	f020 0007 	bic.w	r0, r0, #7
 8008530:	1ac2      	subs	r2, r0, r3
 8008532:	bf1c      	itt	ne
 8008534:	1a1b      	subne	r3, r3, r0
 8008536:	50a3      	strne	r3, [r4, r2]
 8008538:	e7af      	b.n	800849a <_malloc_r+0x22>
 800853a:	6862      	ldr	r2, [r4, #4]
 800853c:	42a3      	cmp	r3, r4
 800853e:	bf0c      	ite	eq
 8008540:	f8c8 2000 	streq.w	r2, [r8]
 8008544:	605a      	strne	r2, [r3, #4]
 8008546:	e7eb      	b.n	8008520 <_malloc_r+0xa8>
 8008548:	4623      	mov	r3, r4
 800854a:	6864      	ldr	r4, [r4, #4]
 800854c:	e7ae      	b.n	80084ac <_malloc_r+0x34>
 800854e:	463c      	mov	r4, r7
 8008550:	687f      	ldr	r7, [r7, #4]
 8008552:	e7b6      	b.n	80084c2 <_malloc_r+0x4a>
 8008554:	461a      	mov	r2, r3
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	42a3      	cmp	r3, r4
 800855a:	d1fb      	bne.n	8008554 <_malloc_r+0xdc>
 800855c:	2300      	movs	r3, #0
 800855e:	6053      	str	r3, [r2, #4]
 8008560:	e7de      	b.n	8008520 <_malloc_r+0xa8>
 8008562:	230c      	movs	r3, #12
 8008564:	6033      	str	r3, [r6, #0]
 8008566:	4630      	mov	r0, r6
 8008568:	f000 f80c 	bl	8008584 <__malloc_unlock>
 800856c:	e794      	b.n	8008498 <_malloc_r+0x20>
 800856e:	6005      	str	r5, [r0, #0]
 8008570:	e7d6      	b.n	8008520 <_malloc_r+0xa8>
 8008572:	bf00      	nop
 8008574:	200007b8 	.word	0x200007b8

08008578 <__malloc_lock>:
 8008578:	4801      	ldr	r0, [pc, #4]	@ (8008580 <__malloc_lock+0x8>)
 800857a:	f7ff b89e 	b.w	80076ba <__retarget_lock_acquire_recursive>
 800857e:	bf00      	nop
 8008580:	200007b0 	.word	0x200007b0

08008584 <__malloc_unlock>:
 8008584:	4801      	ldr	r0, [pc, #4]	@ (800858c <__malloc_unlock+0x8>)
 8008586:	f7ff b899 	b.w	80076bc <__retarget_lock_release_recursive>
 800858a:	bf00      	nop
 800858c:	200007b0 	.word	0x200007b0

08008590 <_Balloc>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	69c6      	ldr	r6, [r0, #28]
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	b976      	cbnz	r6, 80085b8 <_Balloc+0x28>
 800859a:	2010      	movs	r0, #16
 800859c:	f7ff ff42 	bl	8008424 <malloc>
 80085a0:	4602      	mov	r2, r0
 80085a2:	61e0      	str	r0, [r4, #28]
 80085a4:	b920      	cbnz	r0, 80085b0 <_Balloc+0x20>
 80085a6:	4b18      	ldr	r3, [pc, #96]	@ (8008608 <_Balloc+0x78>)
 80085a8:	4818      	ldr	r0, [pc, #96]	@ (800860c <_Balloc+0x7c>)
 80085aa:	216b      	movs	r1, #107	@ 0x6b
 80085ac:	f000 fd98 	bl	80090e0 <__assert_func>
 80085b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085b4:	6006      	str	r6, [r0, #0]
 80085b6:	60c6      	str	r6, [r0, #12]
 80085b8:	69e6      	ldr	r6, [r4, #28]
 80085ba:	68f3      	ldr	r3, [r6, #12]
 80085bc:	b183      	cbz	r3, 80085e0 <_Balloc+0x50>
 80085be:	69e3      	ldr	r3, [r4, #28]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085c6:	b9b8      	cbnz	r0, 80085f8 <_Balloc+0x68>
 80085c8:	2101      	movs	r1, #1
 80085ca:	fa01 f605 	lsl.w	r6, r1, r5
 80085ce:	1d72      	adds	r2, r6, #5
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fda2 	bl	800911c <_calloc_r>
 80085d8:	b160      	cbz	r0, 80085f4 <_Balloc+0x64>
 80085da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085de:	e00e      	b.n	80085fe <_Balloc+0x6e>
 80085e0:	2221      	movs	r2, #33	@ 0x21
 80085e2:	2104      	movs	r1, #4
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fd99 	bl	800911c <_calloc_r>
 80085ea:	69e3      	ldr	r3, [r4, #28]
 80085ec:	60f0      	str	r0, [r6, #12]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e4      	bne.n	80085be <_Balloc+0x2e>
 80085f4:	2000      	movs	r0, #0
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	6802      	ldr	r2, [r0, #0]
 80085fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085fe:	2300      	movs	r3, #0
 8008600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008604:	e7f7      	b.n	80085f6 <_Balloc+0x66>
 8008606:	bf00      	nop
 8008608:	08009b7d 	.word	0x08009b7d
 800860c:	08009bfd 	.word	0x08009bfd

08008610 <_Bfree>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	69c6      	ldr	r6, [r0, #28]
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b976      	cbnz	r6, 8008638 <_Bfree+0x28>
 800861a:	2010      	movs	r0, #16
 800861c:	f7ff ff02 	bl	8008424 <malloc>
 8008620:	4602      	mov	r2, r0
 8008622:	61e8      	str	r0, [r5, #28]
 8008624:	b920      	cbnz	r0, 8008630 <_Bfree+0x20>
 8008626:	4b09      	ldr	r3, [pc, #36]	@ (800864c <_Bfree+0x3c>)
 8008628:	4809      	ldr	r0, [pc, #36]	@ (8008650 <_Bfree+0x40>)
 800862a:	218f      	movs	r1, #143	@ 0x8f
 800862c:	f000 fd58 	bl	80090e0 <__assert_func>
 8008630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008634:	6006      	str	r6, [r0, #0]
 8008636:	60c6      	str	r6, [r0, #12]
 8008638:	b13c      	cbz	r4, 800864a <_Bfree+0x3a>
 800863a:	69eb      	ldr	r3, [r5, #28]
 800863c:	6862      	ldr	r2, [r4, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008644:	6021      	str	r1, [r4, #0]
 8008646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	08009b7d 	.word	0x08009b7d
 8008650:	08009bfd 	.word	0x08009bfd

08008654 <__multadd>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	690d      	ldr	r5, [r1, #16]
 800865a:	4607      	mov	r7, r0
 800865c:	460c      	mov	r4, r1
 800865e:	461e      	mov	r6, r3
 8008660:	f101 0c14 	add.w	ip, r1, #20
 8008664:	2000      	movs	r0, #0
 8008666:	f8dc 3000 	ldr.w	r3, [ip]
 800866a:	b299      	uxth	r1, r3
 800866c:	fb02 6101 	mla	r1, r2, r1, r6
 8008670:	0c1e      	lsrs	r6, r3, #16
 8008672:	0c0b      	lsrs	r3, r1, #16
 8008674:	fb02 3306 	mla	r3, r2, r6, r3
 8008678:	b289      	uxth	r1, r1
 800867a:	3001      	adds	r0, #1
 800867c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008680:	4285      	cmp	r5, r0
 8008682:	f84c 1b04 	str.w	r1, [ip], #4
 8008686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800868a:	dcec      	bgt.n	8008666 <__multadd+0x12>
 800868c:	b30e      	cbz	r6, 80086d2 <__multadd+0x7e>
 800868e:	68a3      	ldr	r3, [r4, #8]
 8008690:	42ab      	cmp	r3, r5
 8008692:	dc19      	bgt.n	80086c8 <__multadd+0x74>
 8008694:	6861      	ldr	r1, [r4, #4]
 8008696:	4638      	mov	r0, r7
 8008698:	3101      	adds	r1, #1
 800869a:	f7ff ff79 	bl	8008590 <_Balloc>
 800869e:	4680      	mov	r8, r0
 80086a0:	b928      	cbnz	r0, 80086ae <__multadd+0x5a>
 80086a2:	4602      	mov	r2, r0
 80086a4:	4b0c      	ldr	r3, [pc, #48]	@ (80086d8 <__multadd+0x84>)
 80086a6:	480d      	ldr	r0, [pc, #52]	@ (80086dc <__multadd+0x88>)
 80086a8:	21ba      	movs	r1, #186	@ 0xba
 80086aa:	f000 fd19 	bl	80090e0 <__assert_func>
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	3202      	adds	r2, #2
 80086b2:	f104 010c 	add.w	r1, r4, #12
 80086b6:	0092      	lsls	r2, r2, #2
 80086b8:	300c      	adds	r0, #12
 80086ba:	f7ff f800 	bl	80076be <memcpy>
 80086be:	4621      	mov	r1, r4
 80086c0:	4638      	mov	r0, r7
 80086c2:	f7ff ffa5 	bl	8008610 <_Bfree>
 80086c6:	4644      	mov	r4, r8
 80086c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086cc:	3501      	adds	r5, #1
 80086ce:	615e      	str	r6, [r3, #20]
 80086d0:	6125      	str	r5, [r4, #16]
 80086d2:	4620      	mov	r0, r4
 80086d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d8:	08009bec 	.word	0x08009bec
 80086dc:	08009bfd 	.word	0x08009bfd

080086e0 <__hi0bits>:
 80086e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086e4:	4603      	mov	r3, r0
 80086e6:	bf36      	itet	cc
 80086e8:	0403      	lslcc	r3, r0, #16
 80086ea:	2000      	movcs	r0, #0
 80086ec:	2010      	movcc	r0, #16
 80086ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086f2:	bf3c      	itt	cc
 80086f4:	021b      	lslcc	r3, r3, #8
 80086f6:	3008      	addcc	r0, #8
 80086f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086fc:	bf3c      	itt	cc
 80086fe:	011b      	lslcc	r3, r3, #4
 8008700:	3004      	addcc	r0, #4
 8008702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008706:	bf3c      	itt	cc
 8008708:	009b      	lslcc	r3, r3, #2
 800870a:	3002      	addcc	r0, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	db05      	blt.n	800871c <__hi0bits+0x3c>
 8008710:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008714:	f100 0001 	add.w	r0, r0, #1
 8008718:	bf08      	it	eq
 800871a:	2020      	moveq	r0, #32
 800871c:	4770      	bx	lr

0800871e <__lo0bits>:
 800871e:	6803      	ldr	r3, [r0, #0]
 8008720:	4602      	mov	r2, r0
 8008722:	f013 0007 	ands.w	r0, r3, #7
 8008726:	d00b      	beq.n	8008740 <__lo0bits+0x22>
 8008728:	07d9      	lsls	r1, r3, #31
 800872a:	d421      	bmi.n	8008770 <__lo0bits+0x52>
 800872c:	0798      	lsls	r0, r3, #30
 800872e:	bf49      	itett	mi
 8008730:	085b      	lsrmi	r3, r3, #1
 8008732:	089b      	lsrpl	r3, r3, #2
 8008734:	2001      	movmi	r0, #1
 8008736:	6013      	strmi	r3, [r2, #0]
 8008738:	bf5c      	itt	pl
 800873a:	6013      	strpl	r3, [r2, #0]
 800873c:	2002      	movpl	r0, #2
 800873e:	4770      	bx	lr
 8008740:	b299      	uxth	r1, r3
 8008742:	b909      	cbnz	r1, 8008748 <__lo0bits+0x2a>
 8008744:	0c1b      	lsrs	r3, r3, #16
 8008746:	2010      	movs	r0, #16
 8008748:	b2d9      	uxtb	r1, r3
 800874a:	b909      	cbnz	r1, 8008750 <__lo0bits+0x32>
 800874c:	3008      	adds	r0, #8
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	0719      	lsls	r1, r3, #28
 8008752:	bf04      	itt	eq
 8008754:	091b      	lsreq	r3, r3, #4
 8008756:	3004      	addeq	r0, #4
 8008758:	0799      	lsls	r1, r3, #30
 800875a:	bf04      	itt	eq
 800875c:	089b      	lsreq	r3, r3, #2
 800875e:	3002      	addeq	r0, #2
 8008760:	07d9      	lsls	r1, r3, #31
 8008762:	d403      	bmi.n	800876c <__lo0bits+0x4e>
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	f100 0001 	add.w	r0, r0, #1
 800876a:	d003      	beq.n	8008774 <__lo0bits+0x56>
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4770      	bx	lr
 8008770:	2000      	movs	r0, #0
 8008772:	4770      	bx	lr
 8008774:	2020      	movs	r0, #32
 8008776:	4770      	bx	lr

08008778 <__i2b>:
 8008778:	b510      	push	{r4, lr}
 800877a:	460c      	mov	r4, r1
 800877c:	2101      	movs	r1, #1
 800877e:	f7ff ff07 	bl	8008590 <_Balloc>
 8008782:	4602      	mov	r2, r0
 8008784:	b928      	cbnz	r0, 8008792 <__i2b+0x1a>
 8008786:	4b05      	ldr	r3, [pc, #20]	@ (800879c <__i2b+0x24>)
 8008788:	4805      	ldr	r0, [pc, #20]	@ (80087a0 <__i2b+0x28>)
 800878a:	f240 1145 	movw	r1, #325	@ 0x145
 800878e:	f000 fca7 	bl	80090e0 <__assert_func>
 8008792:	2301      	movs	r3, #1
 8008794:	6144      	str	r4, [r0, #20]
 8008796:	6103      	str	r3, [r0, #16]
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	08009bec 	.word	0x08009bec
 80087a0:	08009bfd 	.word	0x08009bfd

080087a4 <__multiply>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	4617      	mov	r7, r2
 80087aa:	690a      	ldr	r2, [r1, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	bfa8      	it	ge
 80087b2:	463b      	movge	r3, r7
 80087b4:	4689      	mov	r9, r1
 80087b6:	bfa4      	itt	ge
 80087b8:	460f      	movge	r7, r1
 80087ba:	4699      	movge	r9, r3
 80087bc:	693d      	ldr	r5, [r7, #16]
 80087be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	eb05 060a 	add.w	r6, r5, sl
 80087ca:	42b3      	cmp	r3, r6
 80087cc:	b085      	sub	sp, #20
 80087ce:	bfb8      	it	lt
 80087d0:	3101      	addlt	r1, #1
 80087d2:	f7ff fedd 	bl	8008590 <_Balloc>
 80087d6:	b930      	cbnz	r0, 80087e6 <__multiply+0x42>
 80087d8:	4602      	mov	r2, r0
 80087da:	4b41      	ldr	r3, [pc, #260]	@ (80088e0 <__multiply+0x13c>)
 80087dc:	4841      	ldr	r0, [pc, #260]	@ (80088e4 <__multiply+0x140>)
 80087de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087e2:	f000 fc7d 	bl	80090e0 <__assert_func>
 80087e6:	f100 0414 	add.w	r4, r0, #20
 80087ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087ee:	4623      	mov	r3, r4
 80087f0:	2200      	movs	r2, #0
 80087f2:	4573      	cmp	r3, lr
 80087f4:	d320      	bcc.n	8008838 <__multiply+0x94>
 80087f6:	f107 0814 	add.w	r8, r7, #20
 80087fa:	f109 0114 	add.w	r1, r9, #20
 80087fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008802:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	1beb      	subs	r3, r5, r7
 800880a:	3b15      	subs	r3, #21
 800880c:	f023 0303 	bic.w	r3, r3, #3
 8008810:	3304      	adds	r3, #4
 8008812:	3715      	adds	r7, #21
 8008814:	42bd      	cmp	r5, r7
 8008816:	bf38      	it	cc
 8008818:	2304      	movcc	r3, #4
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9b02      	ldr	r3, [sp, #8]
 800881e:	9103      	str	r1, [sp, #12]
 8008820:	428b      	cmp	r3, r1
 8008822:	d80c      	bhi.n	800883e <__multiply+0x9a>
 8008824:	2e00      	cmp	r6, #0
 8008826:	dd03      	ble.n	8008830 <__multiply+0x8c>
 8008828:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800882c:	2b00      	cmp	r3, #0
 800882e:	d055      	beq.n	80088dc <__multiply+0x138>
 8008830:	6106      	str	r6, [r0, #16]
 8008832:	b005      	add	sp, #20
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	f843 2b04 	str.w	r2, [r3], #4
 800883c:	e7d9      	b.n	80087f2 <__multiply+0x4e>
 800883e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008842:	f1ba 0f00 	cmp.w	sl, #0
 8008846:	d01f      	beq.n	8008888 <__multiply+0xe4>
 8008848:	46c4      	mov	ip, r8
 800884a:	46a1      	mov	r9, r4
 800884c:	2700      	movs	r7, #0
 800884e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008852:	f8d9 3000 	ldr.w	r3, [r9]
 8008856:	fa1f fb82 	uxth.w	fp, r2
 800885a:	b29b      	uxth	r3, r3
 800885c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008860:	443b      	add	r3, r7
 8008862:	f8d9 7000 	ldr.w	r7, [r9]
 8008866:	0c12      	lsrs	r2, r2, #16
 8008868:	0c3f      	lsrs	r7, r7, #16
 800886a:	fb0a 7202 	mla	r2, sl, r2, r7
 800886e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008872:	b29b      	uxth	r3, r3
 8008874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008878:	4565      	cmp	r5, ip
 800887a:	f849 3b04 	str.w	r3, [r9], #4
 800887e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008882:	d8e4      	bhi.n	800884e <__multiply+0xaa>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	50e7      	str	r7, [r4, r3]
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800888e:	3104      	adds	r1, #4
 8008890:	f1b9 0f00 	cmp.w	r9, #0
 8008894:	d020      	beq.n	80088d8 <__multiply+0x134>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	4647      	mov	r7, r8
 800889a:	46a4      	mov	ip, r4
 800889c:	f04f 0a00 	mov.w	sl, #0
 80088a0:	f8b7 b000 	ldrh.w	fp, [r7]
 80088a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80088a8:	fb09 220b 	mla	r2, r9, fp, r2
 80088ac:	4452      	add	r2, sl
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b4:	f84c 3b04 	str.w	r3, [ip], #4
 80088b8:	f857 3b04 	ldr.w	r3, [r7], #4
 80088bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088c0:	f8bc 3000 	ldrh.w	r3, [ip]
 80088c4:	fb09 330a 	mla	r3, r9, sl, r3
 80088c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80088cc:	42bd      	cmp	r5, r7
 80088ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088d2:	d8e5      	bhi.n	80088a0 <__multiply+0xfc>
 80088d4:	9a01      	ldr	r2, [sp, #4]
 80088d6:	50a3      	str	r3, [r4, r2]
 80088d8:	3404      	adds	r4, #4
 80088da:	e79f      	b.n	800881c <__multiply+0x78>
 80088dc:	3e01      	subs	r6, #1
 80088de:	e7a1      	b.n	8008824 <__multiply+0x80>
 80088e0:	08009bec 	.word	0x08009bec
 80088e4:	08009bfd 	.word	0x08009bfd

080088e8 <__pow5mult>:
 80088e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ec:	4615      	mov	r5, r2
 80088ee:	f012 0203 	ands.w	r2, r2, #3
 80088f2:	4607      	mov	r7, r0
 80088f4:	460e      	mov	r6, r1
 80088f6:	d007      	beq.n	8008908 <__pow5mult+0x20>
 80088f8:	4c25      	ldr	r4, [pc, #148]	@ (8008990 <__pow5mult+0xa8>)
 80088fa:	3a01      	subs	r2, #1
 80088fc:	2300      	movs	r3, #0
 80088fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008902:	f7ff fea7 	bl	8008654 <__multadd>
 8008906:	4606      	mov	r6, r0
 8008908:	10ad      	asrs	r5, r5, #2
 800890a:	d03d      	beq.n	8008988 <__pow5mult+0xa0>
 800890c:	69fc      	ldr	r4, [r7, #28]
 800890e:	b97c      	cbnz	r4, 8008930 <__pow5mult+0x48>
 8008910:	2010      	movs	r0, #16
 8008912:	f7ff fd87 	bl	8008424 <malloc>
 8008916:	4602      	mov	r2, r0
 8008918:	61f8      	str	r0, [r7, #28]
 800891a:	b928      	cbnz	r0, 8008928 <__pow5mult+0x40>
 800891c:	4b1d      	ldr	r3, [pc, #116]	@ (8008994 <__pow5mult+0xac>)
 800891e:	481e      	ldr	r0, [pc, #120]	@ (8008998 <__pow5mult+0xb0>)
 8008920:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008924:	f000 fbdc 	bl	80090e0 <__assert_func>
 8008928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800892c:	6004      	str	r4, [r0, #0]
 800892e:	60c4      	str	r4, [r0, #12]
 8008930:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008938:	b94c      	cbnz	r4, 800894e <__pow5mult+0x66>
 800893a:	f240 2171 	movw	r1, #625	@ 0x271
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ff1a 	bl	8008778 <__i2b>
 8008944:	2300      	movs	r3, #0
 8008946:	f8c8 0008 	str.w	r0, [r8, #8]
 800894a:	4604      	mov	r4, r0
 800894c:	6003      	str	r3, [r0, #0]
 800894e:	f04f 0900 	mov.w	r9, #0
 8008952:	07eb      	lsls	r3, r5, #31
 8008954:	d50a      	bpl.n	800896c <__pow5mult+0x84>
 8008956:	4631      	mov	r1, r6
 8008958:	4622      	mov	r2, r4
 800895a:	4638      	mov	r0, r7
 800895c:	f7ff ff22 	bl	80087a4 <__multiply>
 8008960:	4631      	mov	r1, r6
 8008962:	4680      	mov	r8, r0
 8008964:	4638      	mov	r0, r7
 8008966:	f7ff fe53 	bl	8008610 <_Bfree>
 800896a:	4646      	mov	r6, r8
 800896c:	106d      	asrs	r5, r5, #1
 800896e:	d00b      	beq.n	8008988 <__pow5mult+0xa0>
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	b938      	cbnz	r0, 8008984 <__pow5mult+0x9c>
 8008974:	4622      	mov	r2, r4
 8008976:	4621      	mov	r1, r4
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff ff13 	bl	80087a4 <__multiply>
 800897e:	6020      	str	r0, [r4, #0]
 8008980:	f8c0 9000 	str.w	r9, [r0]
 8008984:	4604      	mov	r4, r0
 8008986:	e7e4      	b.n	8008952 <__pow5mult+0x6a>
 8008988:	4630      	mov	r0, r6
 800898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898e:	bf00      	nop
 8008990:	08009cb0 	.word	0x08009cb0
 8008994:	08009b7d 	.word	0x08009b7d
 8008998:	08009bfd 	.word	0x08009bfd

0800899c <__lshift>:
 800899c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a0:	460c      	mov	r4, r1
 80089a2:	6849      	ldr	r1, [r1, #4]
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089aa:	68a3      	ldr	r3, [r4, #8]
 80089ac:	4607      	mov	r7, r0
 80089ae:	4691      	mov	r9, r2
 80089b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089b4:	f108 0601 	add.w	r6, r8, #1
 80089b8:	42b3      	cmp	r3, r6
 80089ba:	db0b      	blt.n	80089d4 <__lshift+0x38>
 80089bc:	4638      	mov	r0, r7
 80089be:	f7ff fde7 	bl	8008590 <_Balloc>
 80089c2:	4605      	mov	r5, r0
 80089c4:	b948      	cbnz	r0, 80089da <__lshift+0x3e>
 80089c6:	4602      	mov	r2, r0
 80089c8:	4b28      	ldr	r3, [pc, #160]	@ (8008a6c <__lshift+0xd0>)
 80089ca:	4829      	ldr	r0, [pc, #164]	@ (8008a70 <__lshift+0xd4>)
 80089cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089d0:	f000 fb86 	bl	80090e0 <__assert_func>
 80089d4:	3101      	adds	r1, #1
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	e7ee      	b.n	80089b8 <__lshift+0x1c>
 80089da:	2300      	movs	r3, #0
 80089dc:	f100 0114 	add.w	r1, r0, #20
 80089e0:	f100 0210 	add.w	r2, r0, #16
 80089e4:	4618      	mov	r0, r3
 80089e6:	4553      	cmp	r3, sl
 80089e8:	db33      	blt.n	8008a52 <__lshift+0xb6>
 80089ea:	6920      	ldr	r0, [r4, #16]
 80089ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f0:	f104 0314 	add.w	r3, r4, #20
 80089f4:	f019 091f 	ands.w	r9, r9, #31
 80089f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a00:	d02b      	beq.n	8008a5a <__lshift+0xbe>
 8008a02:	f1c9 0e20 	rsb	lr, r9, #32
 8008a06:	468a      	mov	sl, r1
 8008a08:	2200      	movs	r2, #0
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	fa00 f009 	lsl.w	r0, r0, r9
 8008a10:	4310      	orrs	r0, r2
 8008a12:	f84a 0b04 	str.w	r0, [sl], #4
 8008a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1a:	459c      	cmp	ip, r3
 8008a1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a20:	d8f3      	bhi.n	8008a0a <__lshift+0x6e>
 8008a22:	ebac 0304 	sub.w	r3, ip, r4
 8008a26:	3b15      	subs	r3, #21
 8008a28:	f023 0303 	bic.w	r3, r3, #3
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	f104 0015 	add.w	r0, r4, #21
 8008a32:	4560      	cmp	r0, ip
 8008a34:	bf88      	it	hi
 8008a36:	2304      	movhi	r3, #4
 8008a38:	50ca      	str	r2, [r1, r3]
 8008a3a:	b10a      	cbz	r2, 8008a40 <__lshift+0xa4>
 8008a3c:	f108 0602 	add.w	r6, r8, #2
 8008a40:	3e01      	subs	r6, #1
 8008a42:	4638      	mov	r0, r7
 8008a44:	612e      	str	r6, [r5, #16]
 8008a46:	4621      	mov	r1, r4
 8008a48:	f7ff fde2 	bl	8008610 <_Bfree>
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a52:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a56:	3301      	adds	r3, #1
 8008a58:	e7c5      	b.n	80089e6 <__lshift+0x4a>
 8008a5a:	3904      	subs	r1, #4
 8008a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a60:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a64:	459c      	cmp	ip, r3
 8008a66:	d8f9      	bhi.n	8008a5c <__lshift+0xc0>
 8008a68:	e7ea      	b.n	8008a40 <__lshift+0xa4>
 8008a6a:	bf00      	nop
 8008a6c:	08009bec 	.word	0x08009bec
 8008a70:	08009bfd 	.word	0x08009bfd

08008a74 <__mcmp>:
 8008a74:	690a      	ldr	r2, [r1, #16]
 8008a76:	4603      	mov	r3, r0
 8008a78:	6900      	ldr	r0, [r0, #16]
 8008a7a:	1a80      	subs	r0, r0, r2
 8008a7c:	b530      	push	{r4, r5, lr}
 8008a7e:	d10e      	bne.n	8008a9e <__mcmp+0x2a>
 8008a80:	3314      	adds	r3, #20
 8008a82:	3114      	adds	r1, #20
 8008a84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a94:	4295      	cmp	r5, r2
 8008a96:	d003      	beq.n	8008aa0 <__mcmp+0x2c>
 8008a98:	d205      	bcs.n	8008aa6 <__mcmp+0x32>
 8008a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9e:	bd30      	pop	{r4, r5, pc}
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d3f3      	bcc.n	8008a8c <__mcmp+0x18>
 8008aa4:	e7fb      	b.n	8008a9e <__mcmp+0x2a>
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	e7f9      	b.n	8008a9e <__mcmp+0x2a>
	...

08008aac <__mdiff>:
 8008aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	4648      	mov	r0, r9
 8008ab8:	4614      	mov	r4, r2
 8008aba:	f7ff ffdb 	bl	8008a74 <__mcmp>
 8008abe:	1e05      	subs	r5, r0, #0
 8008ac0:	d112      	bne.n	8008ae8 <__mdiff+0x3c>
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff fd63 	bl	8008590 <_Balloc>
 8008aca:	4602      	mov	r2, r0
 8008acc:	b928      	cbnz	r0, 8008ada <__mdiff+0x2e>
 8008ace:	4b3f      	ldr	r3, [pc, #252]	@ (8008bcc <__mdiff+0x120>)
 8008ad0:	f240 2137 	movw	r1, #567	@ 0x237
 8008ad4:	483e      	ldr	r0, [pc, #248]	@ (8008bd0 <__mdiff+0x124>)
 8008ad6:	f000 fb03 	bl	80090e0 <__assert_func>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	b003      	add	sp, #12
 8008ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae8:	bfbc      	itt	lt
 8008aea:	464b      	movlt	r3, r9
 8008aec:	46a1      	movlt	r9, r4
 8008aee:	4630      	mov	r0, r6
 8008af0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008af4:	bfba      	itte	lt
 8008af6:	461c      	movlt	r4, r3
 8008af8:	2501      	movlt	r5, #1
 8008afa:	2500      	movge	r5, #0
 8008afc:	f7ff fd48 	bl	8008590 <_Balloc>
 8008b00:	4602      	mov	r2, r0
 8008b02:	b918      	cbnz	r0, 8008b0c <__mdiff+0x60>
 8008b04:	4b31      	ldr	r3, [pc, #196]	@ (8008bcc <__mdiff+0x120>)
 8008b06:	f240 2145 	movw	r1, #581	@ 0x245
 8008b0a:	e7e3      	b.n	8008ad4 <__mdiff+0x28>
 8008b0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b10:	6926      	ldr	r6, [r4, #16]
 8008b12:	60c5      	str	r5, [r0, #12]
 8008b14:	f109 0310 	add.w	r3, r9, #16
 8008b18:	f109 0514 	add.w	r5, r9, #20
 8008b1c:	f104 0e14 	add.w	lr, r4, #20
 8008b20:	f100 0b14 	add.w	fp, r0, #20
 8008b24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	46d9      	mov	r9, fp
 8008b30:	f04f 0c00 	mov.w	ip, #0
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	fa1f f38a 	uxth.w	r3, sl
 8008b44:	4619      	mov	r1, r3
 8008b46:	b283      	uxth	r3, r0
 8008b48:	1acb      	subs	r3, r1, r3
 8008b4a:	0c00      	lsrs	r0, r0, #16
 8008b4c:	4463      	add	r3, ip
 8008b4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b5c:	4576      	cmp	r6, lr
 8008b5e:	f849 3b04 	str.w	r3, [r9], #4
 8008b62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b66:	d8e5      	bhi.n	8008b34 <__mdiff+0x88>
 8008b68:	1b33      	subs	r3, r6, r4
 8008b6a:	3b15      	subs	r3, #21
 8008b6c:	f023 0303 	bic.w	r3, r3, #3
 8008b70:	3415      	adds	r4, #21
 8008b72:	3304      	adds	r3, #4
 8008b74:	42a6      	cmp	r6, r4
 8008b76:	bf38      	it	cc
 8008b78:	2304      	movcc	r3, #4
 8008b7a:	441d      	add	r5, r3
 8008b7c:	445b      	add	r3, fp
 8008b7e:	461e      	mov	r6, r3
 8008b80:	462c      	mov	r4, r5
 8008b82:	4544      	cmp	r4, r8
 8008b84:	d30e      	bcc.n	8008ba4 <__mdiff+0xf8>
 8008b86:	f108 0103 	add.w	r1, r8, #3
 8008b8a:	1b49      	subs	r1, r1, r5
 8008b8c:	f021 0103 	bic.w	r1, r1, #3
 8008b90:	3d03      	subs	r5, #3
 8008b92:	45a8      	cmp	r8, r5
 8008b94:	bf38      	it	cc
 8008b96:	2100      	movcc	r1, #0
 8008b98:	440b      	add	r3, r1
 8008b9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b9e:	b191      	cbz	r1, 8008bc6 <__mdiff+0x11a>
 8008ba0:	6117      	str	r7, [r2, #16]
 8008ba2:	e79d      	b.n	8008ae0 <__mdiff+0x34>
 8008ba4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ba8:	46e6      	mov	lr, ip
 8008baa:	0c08      	lsrs	r0, r1, #16
 8008bac:	fa1c fc81 	uxtah	ip, ip, r1
 8008bb0:	4471      	add	r1, lr
 8008bb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bb6:	b289      	uxth	r1, r1
 8008bb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bbc:	f846 1b04 	str.w	r1, [r6], #4
 8008bc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bc4:	e7dd      	b.n	8008b82 <__mdiff+0xd6>
 8008bc6:	3f01      	subs	r7, #1
 8008bc8:	e7e7      	b.n	8008b9a <__mdiff+0xee>
 8008bca:	bf00      	nop
 8008bcc:	08009bec 	.word	0x08009bec
 8008bd0:	08009bfd 	.word	0x08009bfd

08008bd4 <__d2b>:
 8008bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bd8:	460f      	mov	r7, r1
 8008bda:	2101      	movs	r1, #1
 8008bdc:	ec59 8b10 	vmov	r8, r9, d0
 8008be0:	4616      	mov	r6, r2
 8008be2:	f7ff fcd5 	bl	8008590 <_Balloc>
 8008be6:	4604      	mov	r4, r0
 8008be8:	b930      	cbnz	r0, 8008bf8 <__d2b+0x24>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4b23      	ldr	r3, [pc, #140]	@ (8008c7c <__d2b+0xa8>)
 8008bee:	4824      	ldr	r0, [pc, #144]	@ (8008c80 <__d2b+0xac>)
 8008bf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bf4:	f000 fa74 	bl	80090e0 <__assert_func>
 8008bf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c00:	b10d      	cbz	r5, 8008c06 <__d2b+0x32>
 8008c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	f1b8 0300 	subs.w	r3, r8, #0
 8008c0c:	d023      	beq.n	8008c56 <__d2b+0x82>
 8008c0e:	4668      	mov	r0, sp
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	f7ff fd84 	bl	800871e <__lo0bits>
 8008c16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c1a:	b1d0      	cbz	r0, 8008c52 <__d2b+0x7e>
 8008c1c:	f1c0 0320 	rsb	r3, r0, #32
 8008c20:	fa02 f303 	lsl.w	r3, r2, r3
 8008c24:	430b      	orrs	r3, r1
 8008c26:	40c2      	lsrs	r2, r0
 8008c28:	6163      	str	r3, [r4, #20]
 8008c2a:	9201      	str	r2, [sp, #4]
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	61a3      	str	r3, [r4, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf0c      	ite	eq
 8008c34:	2201      	moveq	r2, #1
 8008c36:	2202      	movne	r2, #2
 8008c38:	6122      	str	r2, [r4, #16]
 8008c3a:	b1a5      	cbz	r5, 8008c66 <__d2b+0x92>
 8008c3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c40:	4405      	add	r5, r0
 8008c42:	603d      	str	r5, [r7, #0]
 8008c44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c48:	6030      	str	r0, [r6, #0]
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	b003      	add	sp, #12
 8008c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c52:	6161      	str	r1, [r4, #20]
 8008c54:	e7ea      	b.n	8008c2c <__d2b+0x58>
 8008c56:	a801      	add	r0, sp, #4
 8008c58:	f7ff fd61 	bl	800871e <__lo0bits>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	6163      	str	r3, [r4, #20]
 8008c60:	3020      	adds	r0, #32
 8008c62:	2201      	movs	r2, #1
 8008c64:	e7e8      	b.n	8008c38 <__d2b+0x64>
 8008c66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c6e:	6038      	str	r0, [r7, #0]
 8008c70:	6918      	ldr	r0, [r3, #16]
 8008c72:	f7ff fd35 	bl	80086e0 <__hi0bits>
 8008c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c7a:	e7e5      	b.n	8008c48 <__d2b+0x74>
 8008c7c:	08009bec 	.word	0x08009bec
 8008c80:	08009bfd 	.word	0x08009bfd

08008c84 <__ssputs_r>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	688e      	ldr	r6, [r1, #8]
 8008c8a:	461f      	mov	r7, r3
 8008c8c:	42be      	cmp	r6, r7
 8008c8e:	680b      	ldr	r3, [r1, #0]
 8008c90:	4682      	mov	sl, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4690      	mov	r8, r2
 8008c96:	d82d      	bhi.n	8008cf4 <__ssputs_r+0x70>
 8008c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ca0:	d026      	beq.n	8008cf0 <__ssputs_r+0x6c>
 8008ca2:	6965      	ldr	r5, [r4, #20]
 8008ca4:	6909      	ldr	r1, [r1, #16]
 8008ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008caa:	eba3 0901 	sub.w	r9, r3, r1
 8008cae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb2:	1c7b      	adds	r3, r7, #1
 8008cb4:	444b      	add	r3, r9
 8008cb6:	106d      	asrs	r5, r5, #1
 8008cb8:	429d      	cmp	r5, r3
 8008cba:	bf38      	it	cc
 8008cbc:	461d      	movcc	r5, r3
 8008cbe:	0553      	lsls	r3, r2, #21
 8008cc0:	d527      	bpl.n	8008d12 <__ssputs_r+0x8e>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	f7ff fbd8 	bl	8008478 <_malloc_r>
 8008cc8:	4606      	mov	r6, r0
 8008cca:	b360      	cbz	r0, 8008d26 <__ssputs_r+0xa2>
 8008ccc:	6921      	ldr	r1, [r4, #16]
 8008cce:	464a      	mov	r2, r9
 8008cd0:	f7fe fcf5 	bl	80076be <memcpy>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	6126      	str	r6, [r4, #16]
 8008ce2:	6165      	str	r5, [r4, #20]
 8008ce4:	444e      	add	r6, r9
 8008ce6:	eba5 0509 	sub.w	r5, r5, r9
 8008cea:	6026      	str	r6, [r4, #0]
 8008cec:	60a5      	str	r5, [r4, #8]
 8008cee:	463e      	mov	r6, r7
 8008cf0:	42be      	cmp	r6, r7
 8008cf2:	d900      	bls.n	8008cf6 <__ssputs_r+0x72>
 8008cf4:	463e      	mov	r6, r7
 8008cf6:	6820      	ldr	r0, [r4, #0]
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	f000 f9c6 	bl	800908c <memmove>
 8008d00:	68a3      	ldr	r3, [r4, #8]
 8008d02:	1b9b      	subs	r3, r3, r6
 8008d04:	60a3      	str	r3, [r4, #8]
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	4433      	add	r3, r6
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	462a      	mov	r2, r5
 8008d14:	f000 fa28 	bl	8009168 <_realloc_r>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d1e0      	bne.n	8008ce0 <__ssputs_r+0x5c>
 8008d1e:	6921      	ldr	r1, [r4, #16]
 8008d20:	4650      	mov	r0, sl
 8008d22:	f7ff fb35 	bl	8008390 <_free_r>
 8008d26:	230c      	movs	r3, #12
 8008d28:	f8ca 3000 	str.w	r3, [sl]
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	e7e9      	b.n	8008d0e <__ssputs_r+0x8a>
	...

08008d3c <_svfiprintf_r>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	4698      	mov	r8, r3
 8008d42:	898b      	ldrh	r3, [r1, #12]
 8008d44:	061b      	lsls	r3, r3, #24
 8008d46:	b09d      	sub	sp, #116	@ 0x74
 8008d48:	4607      	mov	r7, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	d510      	bpl.n	8008d72 <_svfiprintf_r+0x36>
 8008d50:	690b      	ldr	r3, [r1, #16]
 8008d52:	b973      	cbnz	r3, 8008d72 <_svfiprintf_r+0x36>
 8008d54:	2140      	movs	r1, #64	@ 0x40
 8008d56:	f7ff fb8f 	bl	8008478 <_malloc_r>
 8008d5a:	6028      	str	r0, [r5, #0]
 8008d5c:	6128      	str	r0, [r5, #16]
 8008d5e:	b930      	cbnz	r0, 8008d6e <_svfiprintf_r+0x32>
 8008d60:	230c      	movs	r3, #12
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	b01d      	add	sp, #116	@ 0x74
 8008d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6e:	2340      	movs	r3, #64	@ 0x40
 8008d70:	616b      	str	r3, [r5, #20]
 8008d72:	2300      	movs	r3, #0
 8008d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d76:	2320      	movs	r3, #32
 8008d78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d80:	2330      	movs	r3, #48	@ 0x30
 8008d82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f20 <_svfiprintf_r+0x1e4>
 8008d86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d8a:	f04f 0901 	mov.w	r9, #1
 8008d8e:	4623      	mov	r3, r4
 8008d90:	469a      	mov	sl, r3
 8008d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d96:	b10a      	cbz	r2, 8008d9c <_svfiprintf_r+0x60>
 8008d98:	2a25      	cmp	r2, #37	@ 0x25
 8008d9a:	d1f9      	bne.n	8008d90 <_svfiprintf_r+0x54>
 8008d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008da0:	d00b      	beq.n	8008dba <_svfiprintf_r+0x7e>
 8008da2:	465b      	mov	r3, fp
 8008da4:	4622      	mov	r2, r4
 8008da6:	4629      	mov	r1, r5
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7ff ff6b 	bl	8008c84 <__ssputs_r>
 8008dae:	3001      	adds	r0, #1
 8008db0:	f000 80a7 	beq.w	8008f02 <_svfiprintf_r+0x1c6>
 8008db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db6:	445a      	add	r2, fp
 8008db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dba:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 809f 	beq.w	8008f02 <_svfiprintf_r+0x1c6>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dce:	f10a 0a01 	add.w	sl, sl, #1
 8008dd2:	9304      	str	r3, [sp, #16]
 8008dd4:	9307      	str	r3, [sp, #28]
 8008dd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dda:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ddc:	4654      	mov	r4, sl
 8008dde:	2205      	movs	r2, #5
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	484e      	ldr	r0, [pc, #312]	@ (8008f20 <_svfiprintf_r+0x1e4>)
 8008de6:	f7f7 f9cb 	bl	8000180 <memchr>
 8008dea:	9a04      	ldr	r2, [sp, #16]
 8008dec:	b9d8      	cbnz	r0, 8008e26 <_svfiprintf_r+0xea>
 8008dee:	06d0      	lsls	r0, r2, #27
 8008df0:	bf44      	itt	mi
 8008df2:	2320      	movmi	r3, #32
 8008df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df8:	0711      	lsls	r1, r2, #28
 8008dfa:	bf44      	itt	mi
 8008dfc:	232b      	movmi	r3, #43	@ 0x2b
 8008dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e02:	f89a 3000 	ldrb.w	r3, [sl]
 8008e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e08:	d015      	beq.n	8008e36 <_svfiprintf_r+0xfa>
 8008e0a:	9a07      	ldr	r2, [sp, #28]
 8008e0c:	4654      	mov	r4, sl
 8008e0e:	2000      	movs	r0, #0
 8008e10:	f04f 0c0a 	mov.w	ip, #10
 8008e14:	4621      	mov	r1, r4
 8008e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1a:	3b30      	subs	r3, #48	@ 0x30
 8008e1c:	2b09      	cmp	r3, #9
 8008e1e:	d94b      	bls.n	8008eb8 <_svfiprintf_r+0x17c>
 8008e20:	b1b0      	cbz	r0, 8008e50 <_svfiprintf_r+0x114>
 8008e22:	9207      	str	r2, [sp, #28]
 8008e24:	e014      	b.n	8008e50 <_svfiprintf_r+0x114>
 8008e26:	eba0 0308 	sub.w	r3, r0, r8
 8008e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	46a2      	mov	sl, r4
 8008e34:	e7d2      	b.n	8008ddc <_svfiprintf_r+0xa0>
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	1d19      	adds	r1, r3, #4
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	9103      	str	r1, [sp, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bfbb      	ittet	lt
 8008e42:	425b      	neglt	r3, r3
 8008e44:	f042 0202 	orrlt.w	r2, r2, #2
 8008e48:	9307      	strge	r3, [sp, #28]
 8008e4a:	9307      	strlt	r3, [sp, #28]
 8008e4c:	bfb8      	it	lt
 8008e4e:	9204      	strlt	r2, [sp, #16]
 8008e50:	7823      	ldrb	r3, [r4, #0]
 8008e52:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e54:	d10a      	bne.n	8008e6c <_svfiprintf_r+0x130>
 8008e56:	7863      	ldrb	r3, [r4, #1]
 8008e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e5a:	d132      	bne.n	8008ec2 <_svfiprintf_r+0x186>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	1d1a      	adds	r2, r3, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	9203      	str	r2, [sp, #12]
 8008e64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e68:	3402      	adds	r4, #2
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f30 <_svfiprintf_r+0x1f4>
 8008e70:	7821      	ldrb	r1, [r4, #0]
 8008e72:	2203      	movs	r2, #3
 8008e74:	4650      	mov	r0, sl
 8008e76:	f7f7 f983 	bl	8000180 <memchr>
 8008e7a:	b138      	cbz	r0, 8008e8c <_svfiprintf_r+0x150>
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	eba0 000a 	sub.w	r0, r0, sl
 8008e82:	2240      	movs	r2, #64	@ 0x40
 8008e84:	4082      	lsls	r2, r0
 8008e86:	4313      	orrs	r3, r2
 8008e88:	3401      	adds	r4, #1
 8008e8a:	9304      	str	r3, [sp, #16]
 8008e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e90:	4824      	ldr	r0, [pc, #144]	@ (8008f24 <_svfiprintf_r+0x1e8>)
 8008e92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e96:	2206      	movs	r2, #6
 8008e98:	f7f7 f972 	bl	8000180 <memchr>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d036      	beq.n	8008f0e <_svfiprintf_r+0x1d2>
 8008ea0:	4b21      	ldr	r3, [pc, #132]	@ (8008f28 <_svfiprintf_r+0x1ec>)
 8008ea2:	bb1b      	cbnz	r3, 8008eec <_svfiprintf_r+0x1b0>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	3307      	adds	r3, #7
 8008ea8:	f023 0307 	bic.w	r3, r3, #7
 8008eac:	3308      	adds	r3, #8
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb2:	4433      	add	r3, r6
 8008eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb6:	e76a      	b.n	8008d8e <_svfiprintf_r+0x52>
 8008eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	2001      	movs	r0, #1
 8008ec0:	e7a8      	b.n	8008e14 <_svfiprintf_r+0xd8>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	9305      	str	r3, [sp, #20]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f04f 0c0a 	mov.w	ip, #10
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed4:	3a30      	subs	r2, #48	@ 0x30
 8008ed6:	2a09      	cmp	r2, #9
 8008ed8:	d903      	bls.n	8008ee2 <_svfiprintf_r+0x1a6>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0c6      	beq.n	8008e6c <_svfiprintf_r+0x130>
 8008ede:	9105      	str	r1, [sp, #20]
 8008ee0:	e7c4      	b.n	8008e6c <_svfiprintf_r+0x130>
 8008ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e7f0      	b.n	8008ece <_svfiprintf_r+0x192>
 8008eec:	ab03      	add	r3, sp, #12
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	462a      	mov	r2, r5
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f2c <_svfiprintf_r+0x1f0>)
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f7fd fe6a 	bl	8006bd0 <_printf_float>
 8008efc:	1c42      	adds	r2, r0, #1
 8008efe:	4606      	mov	r6, r0
 8008f00:	d1d6      	bne.n	8008eb0 <_svfiprintf_r+0x174>
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	065b      	lsls	r3, r3, #25
 8008f06:	f53f af2d 	bmi.w	8008d64 <_svfiprintf_r+0x28>
 8008f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f0c:	e72c      	b.n	8008d68 <_svfiprintf_r+0x2c>
 8008f0e:	ab03      	add	r3, sp, #12
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	462a      	mov	r2, r5
 8008f14:	4b05      	ldr	r3, [pc, #20]	@ (8008f2c <_svfiprintf_r+0x1f0>)
 8008f16:	a904      	add	r1, sp, #16
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f7fe f8f1 	bl	8007100 <_printf_i>
 8008f1e:	e7ed      	b.n	8008efc <_svfiprintf_r+0x1c0>
 8008f20:	08009c56 	.word	0x08009c56
 8008f24:	08009c60 	.word	0x08009c60
 8008f28:	08006bd1 	.word	0x08006bd1
 8008f2c:	08008c85 	.word	0x08008c85
 8008f30:	08009c5c 	.word	0x08009c5c

08008f34 <__sflush_r>:
 8008f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f3c:	0716      	lsls	r6, r2, #28
 8008f3e:	4605      	mov	r5, r0
 8008f40:	460c      	mov	r4, r1
 8008f42:	d454      	bmi.n	8008fee <__sflush_r+0xba>
 8008f44:	684b      	ldr	r3, [r1, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	dc02      	bgt.n	8008f50 <__sflush_r+0x1c>
 8008f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd48      	ble.n	8008fe2 <__sflush_r+0xae>
 8008f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	d045      	beq.n	8008fe2 <__sflush_r+0xae>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f5c:	682f      	ldr	r7, [r5, #0]
 8008f5e:	6a21      	ldr	r1, [r4, #32]
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	d030      	beq.n	8008fc6 <__sflush_r+0x92>
 8008f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	0759      	lsls	r1, r3, #29
 8008f6a:	d505      	bpl.n	8008f78 <__sflush_r+0x44>
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f72:	b10b      	cbz	r3, 8008f78 <__sflush_r+0x44>
 8008f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f7c:	6a21      	ldr	r1, [r4, #32]
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b0      	blx	r6
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	d106      	bne.n	8008f96 <__sflush_r+0x62>
 8008f88:	6829      	ldr	r1, [r5, #0]
 8008f8a:	291d      	cmp	r1, #29
 8008f8c:	d82b      	bhi.n	8008fe6 <__sflush_r+0xb2>
 8008f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8009038 <__sflush_r+0x104>)
 8008f90:	40ca      	lsrs	r2, r1
 8008f92:	07d6      	lsls	r6, r2, #31
 8008f94:	d527      	bpl.n	8008fe6 <__sflush_r+0xb2>
 8008f96:	2200      	movs	r2, #0
 8008f98:	6062      	str	r2, [r4, #4]
 8008f9a:	04d9      	lsls	r1, r3, #19
 8008f9c:	6922      	ldr	r2, [r4, #16]
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	d504      	bpl.n	8008fac <__sflush_r+0x78>
 8008fa2:	1c42      	adds	r2, r0, #1
 8008fa4:	d101      	bne.n	8008faa <__sflush_r+0x76>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	b903      	cbnz	r3, 8008fac <__sflush_r+0x78>
 8008faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fae:	602f      	str	r7, [r5, #0]
 8008fb0:	b1b9      	cbz	r1, 8008fe2 <__sflush_r+0xae>
 8008fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d002      	beq.n	8008fc0 <__sflush_r+0x8c>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7ff f9e8 	bl	8008390 <_free_r>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fc4:	e00d      	b.n	8008fe2 <__sflush_r+0xae>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	47b0      	blx	r6
 8008fcc:	4602      	mov	r2, r0
 8008fce:	1c50      	adds	r0, r2, #1
 8008fd0:	d1c9      	bne.n	8008f66 <__sflush_r+0x32>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0c6      	beq.n	8008f66 <__sflush_r+0x32>
 8008fd8:	2b1d      	cmp	r3, #29
 8008fda:	d001      	beq.n	8008fe0 <__sflush_r+0xac>
 8008fdc:	2b16      	cmp	r3, #22
 8008fde:	d11e      	bne.n	800901e <__sflush_r+0xea>
 8008fe0:	602f      	str	r7, [r5, #0]
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e022      	b.n	800902c <__sflush_r+0xf8>
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	e01b      	b.n	8009026 <__sflush_r+0xf2>
 8008fee:	690f      	ldr	r7, [r1, #16]
 8008ff0:	2f00      	cmp	r7, #0
 8008ff2:	d0f6      	beq.n	8008fe2 <__sflush_r+0xae>
 8008ff4:	0793      	lsls	r3, r2, #30
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	bf08      	it	eq
 8008ffa:	694b      	ldreq	r3, [r1, #20]
 8008ffc:	600f      	str	r7, [r1, #0]
 8008ffe:	bf18      	it	ne
 8009000:	2300      	movne	r3, #0
 8009002:	eba6 0807 	sub.w	r8, r6, r7
 8009006:	608b      	str	r3, [r1, #8]
 8009008:	f1b8 0f00 	cmp.w	r8, #0
 800900c:	dde9      	ble.n	8008fe2 <__sflush_r+0xae>
 800900e:	6a21      	ldr	r1, [r4, #32]
 8009010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009012:	4643      	mov	r3, r8
 8009014:	463a      	mov	r2, r7
 8009016:	4628      	mov	r0, r5
 8009018:	47b0      	blx	r6
 800901a:	2800      	cmp	r0, #0
 800901c:	dc08      	bgt.n	8009030 <__sflush_r+0xfc>
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009026:	81a3      	strh	r3, [r4, #12]
 8009028:	f04f 30ff 	mov.w	r0, #4294967295
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	4407      	add	r7, r0
 8009032:	eba8 0800 	sub.w	r8, r8, r0
 8009036:	e7e7      	b.n	8009008 <__sflush_r+0xd4>
 8009038:	20400001 	.word	0x20400001

0800903c <_fflush_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	690b      	ldr	r3, [r1, #16]
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	b913      	cbnz	r3, 800904c <_fflush_r+0x10>
 8009046:	2500      	movs	r5, #0
 8009048:	4628      	mov	r0, r5
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	b118      	cbz	r0, 8009056 <_fflush_r+0x1a>
 800904e:	6a03      	ldr	r3, [r0, #32]
 8009050:	b90b      	cbnz	r3, 8009056 <_fflush_r+0x1a>
 8009052:	f7fe f9ff 	bl	8007454 <__sinit>
 8009056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0f3      	beq.n	8009046 <_fflush_r+0xa>
 800905e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009060:	07d0      	lsls	r0, r2, #31
 8009062:	d404      	bmi.n	800906e <_fflush_r+0x32>
 8009064:	0599      	lsls	r1, r3, #22
 8009066:	d402      	bmi.n	800906e <_fflush_r+0x32>
 8009068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800906a:	f7fe fb26 	bl	80076ba <__retarget_lock_acquire_recursive>
 800906e:	4628      	mov	r0, r5
 8009070:	4621      	mov	r1, r4
 8009072:	f7ff ff5f 	bl	8008f34 <__sflush_r>
 8009076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009078:	07da      	lsls	r2, r3, #31
 800907a:	4605      	mov	r5, r0
 800907c:	d4e4      	bmi.n	8009048 <_fflush_r+0xc>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	059b      	lsls	r3, r3, #22
 8009082:	d4e1      	bmi.n	8009048 <_fflush_r+0xc>
 8009084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009086:	f7fe fb19 	bl	80076bc <__retarget_lock_release_recursive>
 800908a:	e7dd      	b.n	8009048 <_fflush_r+0xc>

0800908c <memmove>:
 800908c:	4288      	cmp	r0, r1
 800908e:	b510      	push	{r4, lr}
 8009090:	eb01 0402 	add.w	r4, r1, r2
 8009094:	d902      	bls.n	800909c <memmove+0x10>
 8009096:	4284      	cmp	r4, r0
 8009098:	4623      	mov	r3, r4
 800909a:	d807      	bhi.n	80090ac <memmove+0x20>
 800909c:	1e43      	subs	r3, r0, #1
 800909e:	42a1      	cmp	r1, r4
 80090a0:	d008      	beq.n	80090b4 <memmove+0x28>
 80090a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090aa:	e7f8      	b.n	800909e <memmove+0x12>
 80090ac:	4402      	add	r2, r0
 80090ae:	4601      	mov	r1, r0
 80090b0:	428a      	cmp	r2, r1
 80090b2:	d100      	bne.n	80090b6 <memmove+0x2a>
 80090b4:	bd10      	pop	{r4, pc}
 80090b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090be:	e7f7      	b.n	80090b0 <memmove+0x24>

080090c0 <_sbrk_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	@ (80090dc <_sbrk_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f8 ff2a 	bl	8001f24 <_sbrk>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_sbrk_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_sbrk_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	200007ac 	.word	0x200007ac

080090e0 <__assert_func>:
 80090e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090e2:	4614      	mov	r4, r2
 80090e4:	461a      	mov	r2, r3
 80090e6:	4b09      	ldr	r3, [pc, #36]	@ (800910c <__assert_func+0x2c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4605      	mov	r5, r0
 80090ec:	68d8      	ldr	r0, [r3, #12]
 80090ee:	b14c      	cbz	r4, 8009104 <__assert_func+0x24>
 80090f0:	4b07      	ldr	r3, [pc, #28]	@ (8009110 <__assert_func+0x30>)
 80090f2:	9100      	str	r1, [sp, #0]
 80090f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090f8:	4906      	ldr	r1, [pc, #24]	@ (8009114 <__assert_func+0x34>)
 80090fa:	462b      	mov	r3, r5
 80090fc:	f000 f870 	bl	80091e0 <fiprintf>
 8009100:	f000 f880 	bl	8009204 <abort>
 8009104:	4b04      	ldr	r3, [pc, #16]	@ (8009118 <__assert_func+0x38>)
 8009106:	461c      	mov	r4, r3
 8009108:	e7f3      	b.n	80090f2 <__assert_func+0x12>
 800910a:	bf00      	nop
 800910c:	20000054 	.word	0x20000054
 8009110:	08009c71 	.word	0x08009c71
 8009114:	08009c7e 	.word	0x08009c7e
 8009118:	08009cac 	.word	0x08009cac

0800911c <_calloc_r>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	fba1 5402 	umull	r5, r4, r1, r2
 8009122:	b934      	cbnz	r4, 8009132 <_calloc_r+0x16>
 8009124:	4629      	mov	r1, r5
 8009126:	f7ff f9a7 	bl	8008478 <_malloc_r>
 800912a:	4606      	mov	r6, r0
 800912c:	b928      	cbnz	r0, 800913a <_calloc_r+0x1e>
 800912e:	4630      	mov	r0, r6
 8009130:	bd70      	pop	{r4, r5, r6, pc}
 8009132:	220c      	movs	r2, #12
 8009134:	6002      	str	r2, [r0, #0]
 8009136:	2600      	movs	r6, #0
 8009138:	e7f9      	b.n	800912e <_calloc_r+0x12>
 800913a:	462a      	mov	r2, r5
 800913c:	4621      	mov	r1, r4
 800913e:	f7fe fa3f 	bl	80075c0 <memset>
 8009142:	e7f4      	b.n	800912e <_calloc_r+0x12>

08009144 <__ascii_mbtowc>:
 8009144:	b082      	sub	sp, #8
 8009146:	b901      	cbnz	r1, 800914a <__ascii_mbtowc+0x6>
 8009148:	a901      	add	r1, sp, #4
 800914a:	b142      	cbz	r2, 800915e <__ascii_mbtowc+0x1a>
 800914c:	b14b      	cbz	r3, 8009162 <__ascii_mbtowc+0x1e>
 800914e:	7813      	ldrb	r3, [r2, #0]
 8009150:	600b      	str	r3, [r1, #0]
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	1e10      	subs	r0, r2, #0
 8009156:	bf18      	it	ne
 8009158:	2001      	movne	r0, #1
 800915a:	b002      	add	sp, #8
 800915c:	4770      	bx	lr
 800915e:	4610      	mov	r0, r2
 8009160:	e7fb      	b.n	800915a <__ascii_mbtowc+0x16>
 8009162:	f06f 0001 	mvn.w	r0, #1
 8009166:	e7f8      	b.n	800915a <__ascii_mbtowc+0x16>

08009168 <_realloc_r>:
 8009168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800916c:	4607      	mov	r7, r0
 800916e:	4614      	mov	r4, r2
 8009170:	460d      	mov	r5, r1
 8009172:	b921      	cbnz	r1, 800917e <_realloc_r+0x16>
 8009174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009178:	4611      	mov	r1, r2
 800917a:	f7ff b97d 	b.w	8008478 <_malloc_r>
 800917e:	b92a      	cbnz	r2, 800918c <_realloc_r+0x24>
 8009180:	f7ff f906 	bl	8008390 <_free_r>
 8009184:	4625      	mov	r5, r4
 8009186:	4628      	mov	r0, r5
 8009188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800918c:	f000 f841 	bl	8009212 <_malloc_usable_size_r>
 8009190:	4284      	cmp	r4, r0
 8009192:	4606      	mov	r6, r0
 8009194:	d802      	bhi.n	800919c <_realloc_r+0x34>
 8009196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800919a:	d8f4      	bhi.n	8009186 <_realloc_r+0x1e>
 800919c:	4621      	mov	r1, r4
 800919e:	4638      	mov	r0, r7
 80091a0:	f7ff f96a 	bl	8008478 <_malloc_r>
 80091a4:	4680      	mov	r8, r0
 80091a6:	b908      	cbnz	r0, 80091ac <_realloc_r+0x44>
 80091a8:	4645      	mov	r5, r8
 80091aa:	e7ec      	b.n	8009186 <_realloc_r+0x1e>
 80091ac:	42b4      	cmp	r4, r6
 80091ae:	4622      	mov	r2, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	bf28      	it	cs
 80091b4:	4632      	movcs	r2, r6
 80091b6:	f7fe fa82 	bl	80076be <memcpy>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff f8e7 	bl	8008390 <_free_r>
 80091c2:	e7f1      	b.n	80091a8 <_realloc_r+0x40>

080091c4 <__ascii_wctomb>:
 80091c4:	4603      	mov	r3, r0
 80091c6:	4608      	mov	r0, r1
 80091c8:	b141      	cbz	r1, 80091dc <__ascii_wctomb+0x18>
 80091ca:	2aff      	cmp	r2, #255	@ 0xff
 80091cc:	d904      	bls.n	80091d8 <__ascii_wctomb+0x14>
 80091ce:	228a      	movs	r2, #138	@ 0x8a
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	f04f 30ff 	mov.w	r0, #4294967295
 80091d6:	4770      	bx	lr
 80091d8:	700a      	strb	r2, [r1, #0]
 80091da:	2001      	movs	r0, #1
 80091dc:	4770      	bx	lr
	...

080091e0 <fiprintf>:
 80091e0:	b40e      	push	{r1, r2, r3}
 80091e2:	b503      	push	{r0, r1, lr}
 80091e4:	4601      	mov	r1, r0
 80091e6:	ab03      	add	r3, sp, #12
 80091e8:	4805      	ldr	r0, [pc, #20]	@ (8009200 <fiprintf+0x20>)
 80091ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ee:	6800      	ldr	r0, [r0, #0]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	f000 f83f 	bl	8009274 <_vfiprintf_r>
 80091f6:	b002      	add	sp, #8
 80091f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091fc:	b003      	add	sp, #12
 80091fe:	4770      	bx	lr
 8009200:	20000054 	.word	0x20000054

08009204 <abort>:
 8009204:	b508      	push	{r3, lr}
 8009206:	2006      	movs	r0, #6
 8009208:	f000 fa08 	bl	800961c <raise>
 800920c:	2001      	movs	r0, #1
 800920e:	f7f8 fe11 	bl	8001e34 <_exit>

08009212 <_malloc_usable_size_r>:
 8009212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009216:	1f18      	subs	r0, r3, #4
 8009218:	2b00      	cmp	r3, #0
 800921a:	bfbc      	itt	lt
 800921c:	580b      	ldrlt	r3, [r1, r0]
 800921e:	18c0      	addlt	r0, r0, r3
 8009220:	4770      	bx	lr

08009222 <__sfputc_r>:
 8009222:	6893      	ldr	r3, [r2, #8]
 8009224:	3b01      	subs	r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	b410      	push	{r4}
 800922a:	6093      	str	r3, [r2, #8]
 800922c:	da08      	bge.n	8009240 <__sfputc_r+0x1e>
 800922e:	6994      	ldr	r4, [r2, #24]
 8009230:	42a3      	cmp	r3, r4
 8009232:	db01      	blt.n	8009238 <__sfputc_r+0x16>
 8009234:	290a      	cmp	r1, #10
 8009236:	d103      	bne.n	8009240 <__sfputc_r+0x1e>
 8009238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923c:	f000 b932 	b.w	80094a4 <__swbuf_r>
 8009240:	6813      	ldr	r3, [r2, #0]
 8009242:	1c58      	adds	r0, r3, #1
 8009244:	6010      	str	r0, [r2, #0]
 8009246:	7019      	strb	r1, [r3, #0]
 8009248:	4608      	mov	r0, r1
 800924a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800924e:	4770      	bx	lr

08009250 <__sfputs_r>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	4614      	mov	r4, r2
 8009258:	18d5      	adds	r5, r2, r3
 800925a:	42ac      	cmp	r4, r5
 800925c:	d101      	bne.n	8009262 <__sfputs_r+0x12>
 800925e:	2000      	movs	r0, #0
 8009260:	e007      	b.n	8009272 <__sfputs_r+0x22>
 8009262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009266:	463a      	mov	r2, r7
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff ffda 	bl	8009222 <__sfputc_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d1f3      	bne.n	800925a <__sfputs_r+0xa>
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009274 <_vfiprintf_r>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	460d      	mov	r5, r1
 800927a:	b09d      	sub	sp, #116	@ 0x74
 800927c:	4614      	mov	r4, r2
 800927e:	4698      	mov	r8, r3
 8009280:	4606      	mov	r6, r0
 8009282:	b118      	cbz	r0, 800928c <_vfiprintf_r+0x18>
 8009284:	6a03      	ldr	r3, [r0, #32]
 8009286:	b90b      	cbnz	r3, 800928c <_vfiprintf_r+0x18>
 8009288:	f7fe f8e4 	bl	8007454 <__sinit>
 800928c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800928e:	07d9      	lsls	r1, r3, #31
 8009290:	d405      	bmi.n	800929e <_vfiprintf_r+0x2a>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	059a      	lsls	r2, r3, #22
 8009296:	d402      	bmi.n	800929e <_vfiprintf_r+0x2a>
 8009298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800929a:	f7fe fa0e 	bl	80076ba <__retarget_lock_acquire_recursive>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	071b      	lsls	r3, r3, #28
 80092a2:	d501      	bpl.n	80092a8 <_vfiprintf_r+0x34>
 80092a4:	692b      	ldr	r3, [r5, #16]
 80092a6:	b99b      	cbnz	r3, 80092d0 <_vfiprintf_r+0x5c>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4630      	mov	r0, r6
 80092ac:	f000 f938 	bl	8009520 <__swsetup_r>
 80092b0:	b170      	cbz	r0, 80092d0 <_vfiprintf_r+0x5c>
 80092b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092b4:	07dc      	lsls	r4, r3, #31
 80092b6:	d504      	bpl.n	80092c2 <_vfiprintf_r+0x4e>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	b01d      	add	sp, #116	@ 0x74
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	0598      	lsls	r0, r3, #22
 80092c6:	d4f7      	bmi.n	80092b8 <_vfiprintf_r+0x44>
 80092c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ca:	f7fe f9f7 	bl	80076bc <__retarget_lock_release_recursive>
 80092ce:	e7f3      	b.n	80092b8 <_vfiprintf_r+0x44>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d4:	2320      	movs	r3, #32
 80092d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092da:	f8cd 800c 	str.w	r8, [sp, #12]
 80092de:	2330      	movs	r3, #48	@ 0x30
 80092e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009490 <_vfiprintf_r+0x21c>
 80092e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092e8:	f04f 0901 	mov.w	r9, #1
 80092ec:	4623      	mov	r3, r4
 80092ee:	469a      	mov	sl, r3
 80092f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092f4:	b10a      	cbz	r2, 80092fa <_vfiprintf_r+0x86>
 80092f6:	2a25      	cmp	r2, #37	@ 0x25
 80092f8:	d1f9      	bne.n	80092ee <_vfiprintf_r+0x7a>
 80092fa:	ebba 0b04 	subs.w	fp, sl, r4
 80092fe:	d00b      	beq.n	8009318 <_vfiprintf_r+0xa4>
 8009300:	465b      	mov	r3, fp
 8009302:	4622      	mov	r2, r4
 8009304:	4629      	mov	r1, r5
 8009306:	4630      	mov	r0, r6
 8009308:	f7ff ffa2 	bl	8009250 <__sfputs_r>
 800930c:	3001      	adds	r0, #1
 800930e:	f000 80a7 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 8009312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009314:	445a      	add	r2, fp
 8009316:	9209      	str	r2, [sp, #36]	@ 0x24
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 809f 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 8009322:	2300      	movs	r3, #0
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800932c:	f10a 0a01 	add.w	sl, sl, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	9307      	str	r3, [sp, #28]
 8009334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009338:	931a      	str	r3, [sp, #104]	@ 0x68
 800933a:	4654      	mov	r4, sl
 800933c:	2205      	movs	r2, #5
 800933e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009342:	4853      	ldr	r0, [pc, #332]	@ (8009490 <_vfiprintf_r+0x21c>)
 8009344:	f7f6 ff1c 	bl	8000180 <memchr>
 8009348:	9a04      	ldr	r2, [sp, #16]
 800934a:	b9d8      	cbnz	r0, 8009384 <_vfiprintf_r+0x110>
 800934c:	06d1      	lsls	r1, r2, #27
 800934e:	bf44      	itt	mi
 8009350:	2320      	movmi	r3, #32
 8009352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009356:	0713      	lsls	r3, r2, #28
 8009358:	bf44      	itt	mi
 800935a:	232b      	movmi	r3, #43	@ 0x2b
 800935c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009360:	f89a 3000 	ldrb.w	r3, [sl]
 8009364:	2b2a      	cmp	r3, #42	@ 0x2a
 8009366:	d015      	beq.n	8009394 <_vfiprintf_r+0x120>
 8009368:	9a07      	ldr	r2, [sp, #28]
 800936a:	4654      	mov	r4, sl
 800936c:	2000      	movs	r0, #0
 800936e:	f04f 0c0a 	mov.w	ip, #10
 8009372:	4621      	mov	r1, r4
 8009374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009378:	3b30      	subs	r3, #48	@ 0x30
 800937a:	2b09      	cmp	r3, #9
 800937c:	d94b      	bls.n	8009416 <_vfiprintf_r+0x1a2>
 800937e:	b1b0      	cbz	r0, 80093ae <_vfiprintf_r+0x13a>
 8009380:	9207      	str	r2, [sp, #28]
 8009382:	e014      	b.n	80093ae <_vfiprintf_r+0x13a>
 8009384:	eba0 0308 	sub.w	r3, r0, r8
 8009388:	fa09 f303 	lsl.w	r3, r9, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	46a2      	mov	sl, r4
 8009392:	e7d2      	b.n	800933a <_vfiprintf_r+0xc6>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	1d19      	adds	r1, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	9103      	str	r1, [sp, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfbb      	ittet	lt
 80093a0:	425b      	neglt	r3, r3
 80093a2:	f042 0202 	orrlt.w	r2, r2, #2
 80093a6:	9307      	strge	r3, [sp, #28]
 80093a8:	9307      	strlt	r3, [sp, #28]
 80093aa:	bfb8      	it	lt
 80093ac:	9204      	strlt	r2, [sp, #16]
 80093ae:	7823      	ldrb	r3, [r4, #0]
 80093b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80093b2:	d10a      	bne.n	80093ca <_vfiprintf_r+0x156>
 80093b4:	7863      	ldrb	r3, [r4, #1]
 80093b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80093b8:	d132      	bne.n	8009420 <_vfiprintf_r+0x1ac>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	9203      	str	r2, [sp, #12]
 80093c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093c6:	3402      	adds	r4, #2
 80093c8:	9305      	str	r3, [sp, #20]
 80093ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094a0 <_vfiprintf_r+0x22c>
 80093ce:	7821      	ldrb	r1, [r4, #0]
 80093d0:	2203      	movs	r2, #3
 80093d2:	4650      	mov	r0, sl
 80093d4:	f7f6 fed4 	bl	8000180 <memchr>
 80093d8:	b138      	cbz	r0, 80093ea <_vfiprintf_r+0x176>
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	eba0 000a 	sub.w	r0, r0, sl
 80093e0:	2240      	movs	r2, #64	@ 0x40
 80093e2:	4082      	lsls	r2, r0
 80093e4:	4313      	orrs	r3, r2
 80093e6:	3401      	adds	r4, #1
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ee:	4829      	ldr	r0, [pc, #164]	@ (8009494 <_vfiprintf_r+0x220>)
 80093f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093f4:	2206      	movs	r2, #6
 80093f6:	f7f6 fec3 	bl	8000180 <memchr>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d03f      	beq.n	800947e <_vfiprintf_r+0x20a>
 80093fe:	4b26      	ldr	r3, [pc, #152]	@ (8009498 <_vfiprintf_r+0x224>)
 8009400:	bb1b      	cbnz	r3, 800944a <_vfiprintf_r+0x1d6>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	3307      	adds	r3, #7
 8009406:	f023 0307 	bic.w	r3, r3, #7
 800940a:	3308      	adds	r3, #8
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009410:	443b      	add	r3, r7
 8009412:	9309      	str	r3, [sp, #36]	@ 0x24
 8009414:	e76a      	b.n	80092ec <_vfiprintf_r+0x78>
 8009416:	fb0c 3202 	mla	r2, ip, r2, r3
 800941a:	460c      	mov	r4, r1
 800941c:	2001      	movs	r0, #1
 800941e:	e7a8      	b.n	8009372 <_vfiprintf_r+0xfe>
 8009420:	2300      	movs	r3, #0
 8009422:	3401      	adds	r4, #1
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	4619      	mov	r1, r3
 8009428:	f04f 0c0a 	mov.w	ip, #10
 800942c:	4620      	mov	r0, r4
 800942e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009432:	3a30      	subs	r2, #48	@ 0x30
 8009434:	2a09      	cmp	r2, #9
 8009436:	d903      	bls.n	8009440 <_vfiprintf_r+0x1cc>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0c6      	beq.n	80093ca <_vfiprintf_r+0x156>
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	e7c4      	b.n	80093ca <_vfiprintf_r+0x156>
 8009440:	fb0c 2101 	mla	r1, ip, r1, r2
 8009444:	4604      	mov	r4, r0
 8009446:	2301      	movs	r3, #1
 8009448:	e7f0      	b.n	800942c <_vfiprintf_r+0x1b8>
 800944a:	ab03      	add	r3, sp, #12
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	462a      	mov	r2, r5
 8009450:	4b12      	ldr	r3, [pc, #72]	@ (800949c <_vfiprintf_r+0x228>)
 8009452:	a904      	add	r1, sp, #16
 8009454:	4630      	mov	r0, r6
 8009456:	f7fd fbbb 	bl	8006bd0 <_printf_float>
 800945a:	4607      	mov	r7, r0
 800945c:	1c78      	adds	r0, r7, #1
 800945e:	d1d6      	bne.n	800940e <_vfiprintf_r+0x19a>
 8009460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	d405      	bmi.n	8009472 <_vfiprintf_r+0x1fe>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	059a      	lsls	r2, r3, #22
 800946a:	d402      	bmi.n	8009472 <_vfiprintf_r+0x1fe>
 800946c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800946e:	f7fe f925 	bl	80076bc <__retarget_lock_release_recursive>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	065b      	lsls	r3, r3, #25
 8009476:	f53f af1f 	bmi.w	80092b8 <_vfiprintf_r+0x44>
 800947a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800947c:	e71e      	b.n	80092bc <_vfiprintf_r+0x48>
 800947e:	ab03      	add	r3, sp, #12
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	462a      	mov	r2, r5
 8009484:	4b05      	ldr	r3, [pc, #20]	@ (800949c <_vfiprintf_r+0x228>)
 8009486:	a904      	add	r1, sp, #16
 8009488:	4630      	mov	r0, r6
 800948a:	f7fd fe39 	bl	8007100 <_printf_i>
 800948e:	e7e4      	b.n	800945a <_vfiprintf_r+0x1e6>
 8009490:	08009c56 	.word	0x08009c56
 8009494:	08009c60 	.word	0x08009c60
 8009498:	08006bd1 	.word	0x08006bd1
 800949c:	08009251 	.word	0x08009251
 80094a0:	08009c5c 	.word	0x08009c5c

080094a4 <__swbuf_r>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	460e      	mov	r6, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	4605      	mov	r5, r0
 80094ac:	b118      	cbz	r0, 80094b6 <__swbuf_r+0x12>
 80094ae:	6a03      	ldr	r3, [r0, #32]
 80094b0:	b90b      	cbnz	r3, 80094b6 <__swbuf_r+0x12>
 80094b2:	f7fd ffcf 	bl	8007454 <__sinit>
 80094b6:	69a3      	ldr	r3, [r4, #24]
 80094b8:	60a3      	str	r3, [r4, #8]
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	071a      	lsls	r2, r3, #28
 80094be:	d501      	bpl.n	80094c4 <__swbuf_r+0x20>
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	b943      	cbnz	r3, 80094d6 <__swbuf_r+0x32>
 80094c4:	4621      	mov	r1, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f82a 	bl	8009520 <__swsetup_r>
 80094cc:	b118      	cbz	r0, 80094d6 <__swbuf_r+0x32>
 80094ce:	f04f 37ff 	mov.w	r7, #4294967295
 80094d2:	4638      	mov	r0, r7
 80094d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	6922      	ldr	r2, [r4, #16]
 80094da:	1a98      	subs	r0, r3, r2
 80094dc:	6963      	ldr	r3, [r4, #20]
 80094de:	b2f6      	uxtb	r6, r6
 80094e0:	4283      	cmp	r3, r0
 80094e2:	4637      	mov	r7, r6
 80094e4:	dc05      	bgt.n	80094f2 <__swbuf_r+0x4e>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff fda7 	bl	800903c <_fflush_r>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d1ed      	bne.n	80094ce <__swbuf_r+0x2a>
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	60a3      	str	r3, [r4, #8]
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	6022      	str	r2, [r4, #0]
 80094fe:	701e      	strb	r6, [r3, #0]
 8009500:	6962      	ldr	r2, [r4, #20]
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	429a      	cmp	r2, r3
 8009506:	d004      	beq.n	8009512 <__swbuf_r+0x6e>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	07db      	lsls	r3, r3, #31
 800950c:	d5e1      	bpl.n	80094d2 <__swbuf_r+0x2e>
 800950e:	2e0a      	cmp	r6, #10
 8009510:	d1df      	bne.n	80094d2 <__swbuf_r+0x2e>
 8009512:	4621      	mov	r1, r4
 8009514:	4628      	mov	r0, r5
 8009516:	f7ff fd91 	bl	800903c <_fflush_r>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0d9      	beq.n	80094d2 <__swbuf_r+0x2e>
 800951e:	e7d6      	b.n	80094ce <__swbuf_r+0x2a>

08009520 <__swsetup_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <__swsetup_r+0xa8>)
 8009524:	4605      	mov	r5, r0
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	460c      	mov	r4, r1
 800952a:	b118      	cbz	r0, 8009534 <__swsetup_r+0x14>
 800952c:	6a03      	ldr	r3, [r0, #32]
 800952e:	b90b      	cbnz	r3, 8009534 <__swsetup_r+0x14>
 8009530:	f7fd ff90 	bl	8007454 <__sinit>
 8009534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009538:	0719      	lsls	r1, r3, #28
 800953a:	d422      	bmi.n	8009582 <__swsetup_r+0x62>
 800953c:	06da      	lsls	r2, r3, #27
 800953e:	d407      	bmi.n	8009550 <__swsetup_r+0x30>
 8009540:	2209      	movs	r2, #9
 8009542:	602a      	str	r2, [r5, #0]
 8009544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	e033      	b.n	80095b8 <__swsetup_r+0x98>
 8009550:	0758      	lsls	r0, r3, #29
 8009552:	d512      	bpl.n	800957a <__swsetup_r+0x5a>
 8009554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009556:	b141      	cbz	r1, 800956a <__swsetup_r+0x4a>
 8009558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800955c:	4299      	cmp	r1, r3
 800955e:	d002      	beq.n	8009566 <__swsetup_r+0x46>
 8009560:	4628      	mov	r0, r5
 8009562:	f7fe ff15 	bl	8008390 <_free_r>
 8009566:	2300      	movs	r3, #0
 8009568:	6363      	str	r3, [r4, #52]	@ 0x34
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009570:	81a3      	strh	r3, [r4, #12]
 8009572:	2300      	movs	r3, #0
 8009574:	6063      	str	r3, [r4, #4]
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f043 0308 	orr.w	r3, r3, #8
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	b94b      	cbnz	r3, 800959a <__swsetup_r+0x7a>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800958c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009590:	d003      	beq.n	800959a <__swsetup_r+0x7a>
 8009592:	4621      	mov	r1, r4
 8009594:	4628      	mov	r0, r5
 8009596:	f000 f883 	bl	80096a0 <__smakebuf_r>
 800959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959e:	f013 0201 	ands.w	r2, r3, #1
 80095a2:	d00a      	beq.n	80095ba <__swsetup_r+0x9a>
 80095a4:	2200      	movs	r2, #0
 80095a6:	60a2      	str	r2, [r4, #8]
 80095a8:	6962      	ldr	r2, [r4, #20]
 80095aa:	4252      	negs	r2, r2
 80095ac:	61a2      	str	r2, [r4, #24]
 80095ae:	6922      	ldr	r2, [r4, #16]
 80095b0:	b942      	cbnz	r2, 80095c4 <__swsetup_r+0xa4>
 80095b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095b6:	d1c5      	bne.n	8009544 <__swsetup_r+0x24>
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	0799      	lsls	r1, r3, #30
 80095bc:	bf58      	it	pl
 80095be:	6962      	ldrpl	r2, [r4, #20]
 80095c0:	60a2      	str	r2, [r4, #8]
 80095c2:	e7f4      	b.n	80095ae <__swsetup_r+0x8e>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e7f7      	b.n	80095b8 <__swsetup_r+0x98>
 80095c8:	20000054 	.word	0x20000054

080095cc <_raise_r>:
 80095cc:	291f      	cmp	r1, #31
 80095ce:	b538      	push	{r3, r4, r5, lr}
 80095d0:	4605      	mov	r5, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	d904      	bls.n	80095e0 <_raise_r+0x14>
 80095d6:	2316      	movs	r3, #22
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095e2:	b112      	cbz	r2, 80095ea <_raise_r+0x1e>
 80095e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095e8:	b94b      	cbnz	r3, 80095fe <_raise_r+0x32>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f830 	bl	8009650 <_getpid_r>
 80095f0:	4622      	mov	r2, r4
 80095f2:	4601      	mov	r1, r0
 80095f4:	4628      	mov	r0, r5
 80095f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095fa:	f000 b817 	b.w	800962c <_kill_r>
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d00a      	beq.n	8009618 <_raise_r+0x4c>
 8009602:	1c59      	adds	r1, r3, #1
 8009604:	d103      	bne.n	800960e <_raise_r+0x42>
 8009606:	2316      	movs	r3, #22
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	2001      	movs	r0, #1
 800960c:	e7e7      	b.n	80095de <_raise_r+0x12>
 800960e:	2100      	movs	r1, #0
 8009610:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009614:	4620      	mov	r0, r4
 8009616:	4798      	blx	r3
 8009618:	2000      	movs	r0, #0
 800961a:	e7e0      	b.n	80095de <_raise_r+0x12>

0800961c <raise>:
 800961c:	4b02      	ldr	r3, [pc, #8]	@ (8009628 <raise+0xc>)
 800961e:	4601      	mov	r1, r0
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f7ff bfd3 	b.w	80095cc <_raise_r>
 8009626:	bf00      	nop
 8009628:	20000054 	.word	0x20000054

0800962c <_kill_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	@ (800964c <_kill_r+0x20>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f7f8 fbeb 	bl	8001e14 <_kill>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_kill_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_kill_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	200007ac 	.word	0x200007ac

08009650 <_getpid_r>:
 8009650:	f7f8 bbd8 	b.w	8001e04 <_getpid>

08009654 <__swhatbuf_r>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	460c      	mov	r4, r1
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	2900      	cmp	r1, #0
 800965e:	b096      	sub	sp, #88	@ 0x58
 8009660:	4615      	mov	r5, r2
 8009662:	461e      	mov	r6, r3
 8009664:	da0d      	bge.n	8009682 <__swhatbuf_r+0x2e>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800966c:	f04f 0100 	mov.w	r1, #0
 8009670:	bf14      	ite	ne
 8009672:	2340      	movne	r3, #64	@ 0x40
 8009674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009678:	2000      	movs	r0, #0
 800967a:	6031      	str	r1, [r6, #0]
 800967c:	602b      	str	r3, [r5, #0]
 800967e:	b016      	add	sp, #88	@ 0x58
 8009680:	bd70      	pop	{r4, r5, r6, pc}
 8009682:	466a      	mov	r2, sp
 8009684:	f000 f848 	bl	8009718 <_fstat_r>
 8009688:	2800      	cmp	r0, #0
 800968a:	dbec      	blt.n	8009666 <__swhatbuf_r+0x12>
 800968c:	9901      	ldr	r1, [sp, #4]
 800968e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009696:	4259      	negs	r1, r3
 8009698:	4159      	adcs	r1, r3
 800969a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800969e:	e7eb      	b.n	8009678 <__swhatbuf_r+0x24>

080096a0 <__smakebuf_r>:
 80096a0:	898b      	ldrh	r3, [r1, #12]
 80096a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a4:	079d      	lsls	r5, r3, #30
 80096a6:	4606      	mov	r6, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	d507      	bpl.n	80096bc <__smakebuf_r+0x1c>
 80096ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	2301      	movs	r3, #1
 80096b6:	6163      	str	r3, [r4, #20]
 80096b8:	b003      	add	sp, #12
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096bc:	ab01      	add	r3, sp, #4
 80096be:	466a      	mov	r2, sp
 80096c0:	f7ff ffc8 	bl	8009654 <__swhatbuf_r>
 80096c4:	9f00      	ldr	r7, [sp, #0]
 80096c6:	4605      	mov	r5, r0
 80096c8:	4639      	mov	r1, r7
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7fe fed4 	bl	8008478 <_malloc_r>
 80096d0:	b948      	cbnz	r0, 80096e6 <__smakebuf_r+0x46>
 80096d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d6:	059a      	lsls	r2, r3, #22
 80096d8:	d4ee      	bmi.n	80096b8 <__smakebuf_r+0x18>
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	f043 0302 	orr.w	r3, r3, #2
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	e7e2      	b.n	80096ac <__smakebuf_r+0xc>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	6020      	str	r0, [r4, #0]
 80096ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096f6:	b15b      	cbz	r3, 8009710 <__smakebuf_r+0x70>
 80096f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096fc:	4630      	mov	r0, r6
 80096fe:	f000 f81d 	bl	800973c <_isatty_r>
 8009702:	b128      	cbz	r0, 8009710 <__smakebuf_r+0x70>
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	f023 0303 	bic.w	r3, r3, #3
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	81a3      	strh	r3, [r4, #12]
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	431d      	orrs	r5, r3
 8009714:	81a5      	strh	r5, [r4, #12]
 8009716:	e7cf      	b.n	80096b8 <__smakebuf_r+0x18>

08009718 <_fstat_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4d07      	ldr	r5, [pc, #28]	@ (8009738 <_fstat_r+0x20>)
 800971c:	2300      	movs	r3, #0
 800971e:	4604      	mov	r4, r0
 8009720:	4608      	mov	r0, r1
 8009722:	4611      	mov	r1, r2
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f7f8 fbd5 	bl	8001ed4 <_fstat>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	d102      	bne.n	8009734 <_fstat_r+0x1c>
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	b103      	cbz	r3, 8009734 <_fstat_r+0x1c>
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	bf00      	nop
 8009738:	200007ac 	.word	0x200007ac

0800973c <_isatty_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d06      	ldr	r5, [pc, #24]	@ (8009758 <_isatty_r+0x1c>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	602b      	str	r3, [r5, #0]
 8009748:	f7f8 fbd4 	bl	8001ef4 <_isatty>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_isatty_r+0x1a>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_isatty_r+0x1a>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	200007ac 	.word	0x200007ac

0800975c <_init>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr

08009768 <_fini>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr
 8009774:	0000      	movs	r0, r0
	...

08009778 <__FLASH_Program_Fast_veneer>:
 8009778:	f85f f000 	ldr.w	pc, [pc]	@ 800977c <__FLASH_Program_Fast_veneer+0x4>
 800977c:	20000211 	.word	0x20000211

Disassembly of section .data:

20000008 <detected_color>:
20000008:	00000009                                ....

2000000c <color_names.0>:
2000000c:	080099b4 080099b8 080099c0 080099c8     ................
2000001c:	080099d0 080099d8 080099e0 080099ec     ................
2000002c:	080099f8 08009a00 08009a08 08009a10     ................

2000003c <SystemCoreClock>:
2000003c:	003d0900                                ..=.

20000040 <uwTickPrio>:
20000040:	00000010                                ....

20000044 <uwTickFreq>:
20000044:	00000001                                ....

20000048 <__sglue>:
20000048:	00000000 00000003 20000670              ........p.. 

20000054 <_impure_ptr>:
20000054:	20000058                                X.. 

20000058 <_impure_data>:
20000058:	00000000 20000670 200006d8 20000740     ....p.. ... @.. 
	...

200000a4 <__global_locale>:
200000a4:	00000043 00000000 00000000 00000000     C...............
	...
200000c4:	00000043 00000000 00000000 00000000     C...............
	...
200000e4:	00000043 00000000 00000000 00000000     C...............
	...
20000104:	00000043 00000000 00000000 00000000     C...............
	...
20000124:	00000043 00000000 00000000 00000000     C...............
	...
20000144:	00000043 00000000 00000000 00000000     C...............
	...
20000164:	00000043 00000000 00000000 00000000     C...............
	...
20000184:	080091c5 08009145 00000000 08009db0     ....E...........
20000194:	08009c6f 08009cac 08009cac 08009cac     o...............
200001a4:	08009cac 08009cac 08009cac 08009cac     ................
200001b4:	08009cac 08009cac ffffffff ffffffff     ................
200001c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200001ec:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000210 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000210:	b480      	push	{r7}
20000212:	b089      	sub	sp, #36	@ 0x24
20000214:	af00      	add	r7, sp, #0
20000216:	6078      	str	r0, [r7, #4]
20000218:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000021a:	2380      	movs	r3, #128	@ 0x80
2000021c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000021e:	687b      	ldr	r3, [r7, #4]
20000220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000222:	683b      	ldr	r3, [r7, #0]
20000224:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000226:	4b18      	ldr	r3, [pc, #96]	@ (20000288 <FLASH_Program_Fast+0x78>)
20000228:	695b      	ldr	r3, [r3, #20]
2000022a:	4a17      	ldr	r2, [pc, #92]	@ (20000288 <FLASH_Program_Fast+0x78>)
2000022c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20000230:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000232:	f3ef 8310 	mrs	r3, PRIMASK
20000236:	60fb      	str	r3, [r7, #12]
  return(result);
20000238:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000023a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000023c:	b672      	cpsid	i
}
2000023e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000240:	697b      	ldr	r3, [r7, #20]
20000242:	681a      	ldr	r2, [r3, #0]
20000244:	69bb      	ldr	r3, [r7, #24]
20000246:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000248:	69bb      	ldr	r3, [r7, #24]
2000024a:	3304      	adds	r3, #4
2000024c:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000024e:	697b      	ldr	r3, [r7, #20]
20000250:	3304      	adds	r3, #4
20000252:	617b      	str	r3, [r7, #20]
    row_index--;
20000254:	7ffb      	ldrb	r3, [r7, #31]
20000256:	3b01      	subs	r3, #1
20000258:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000025a:	7ffb      	ldrb	r3, [r7, #31]
2000025c:	2b00      	cmp	r3, #0
2000025e:	d1ef      	bne.n	20000240 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
20000260:	bf00      	nop
20000262:	4b09      	ldr	r3, [pc, #36]	@ (20000288 <FLASH_Program_Fast+0x78>)
20000264:	691b      	ldr	r3, [r3, #16]
20000266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2000026a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000026e:	d0f8      	beq.n	20000262 <FLASH_Program_Fast+0x52>
20000270:	693b      	ldr	r3, [r7, #16]
20000272:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000274:	68bb      	ldr	r3, [r7, #8]
20000276:	f383 8810 	msr	PRIMASK, r3
}
2000027a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000027c:	bf00      	nop
2000027e:	3724      	adds	r7, #36	@ 0x24
20000280:	46bd      	mov	sp, r7
20000282:	f85d 7b04 	ldr.w	r7, [sp], #4
20000286:	4770      	bx	lr
20000288:	58004000 	.word	0x58004000
