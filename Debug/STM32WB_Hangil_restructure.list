
STM32WB_Hangil_restructure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  08009758  08009758  0000a758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e8c  08009e8c  0000ae8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  08009e94  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          00000578  200002f0  0800a178  0000b2f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000868  0800a178  0000b868  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b2ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d61d  00000000  00000000  0000b31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004523  00000000  00000000  00028939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d58  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001694  00000000  00000000  0002ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002338e  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023702  00000000  00000000  000535da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d07e8  00000000  00000000  00076cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001474c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c24  00000000  00000000  00147508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0015012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f0 	.word	0x200002f0
 800015c:	00000000 	.word	0x00000000
 8000160:	08009734 	.word	0x08009734

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f4 	.word	0x200002f4
 800017c:	08009734 	.word	0x08009734

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <ap_init>:
static void ap_task_color_calibration(void);
static void ap_task_color_detection(void);


void ap_init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	i2c_init();
 8000b5c:	f005 fdc6 	bl	80066ec <i2c_init>
	uart_init();
 8000b60:	f005 fecc 	bl	80068fc <uart_init>

	led_init();
 8000b64:	f000 fcaa 	bl	80014bc <led_init>
	rgb_init();
 8000b68:	f000 fcd4 	bl	8001514 <rgb_init>
	color_init();
 8000b6c:	f000 f9c3 	bl	8000ef6 <color_init>
//	step_motor_init();
	step_init_all();
 8000b70:	f005 fd7c 	bl	800666c <step_init_all>

	HAL_TIM_Base_Start_IT(&htim2);
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <ap_init+0x3c>)
 8000b76:	f004 fb55 	bl	8005224 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <ap_init+0x40>)
 8000b7c:	f004 fb52 	bl	8005224 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 8000b80:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <ap_init+0x44>)
 8000b82:	f004 fb4f 	bl	8005224 <HAL_TIM_Base_Start_IT>

	load_color_reference_table();
 8000b86:	f000 fb47 	bl	8001218 <load_color_reference_table>
	debug_print_color_reference_table();
 8000b8a:	f000 fb79 	bl	8001280 <debug_print_color_reference_table>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000584 	.word	0x20000584
 8000b98:	200005d0 	.word	0x200005d0
 8000b9c:	2000061c 	.word	0x2000061c

08000ba0 <ap_main>:



void ap_main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	while(1)
	{
		if(!color_calibration && input_is_long_pressed(INPUT_MODE))
 8000ba4:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <ap_main+0x50>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	f083 0301 	eor.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d011      	beq.n	8000bd8 <ap_main+0x38>
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fc6b 	bl	8001490 <input_is_long_pressed>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00b      	beq.n	8000bd8 <ap_main+0x38>
		{
			color_calibration = true;
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <ap_main+0x50>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
			color_seq = 0;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <ap_main+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
			init_printed = false;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <ap_main+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			uart_printf("[INFO] Entering color calibration mode...\r\n");
 8000bd2:	480a      	ldr	r0, [pc, #40]	@ (8000bfc <ap_main+0x5c>)
 8000bd4:	f005 fe9c 	bl	8006910 <uart_printf>
		}

		if (color_calibration)
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <ap_main+0x50>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <ap_main+0x48>
		{
			ap_task_color_calibration();
 8000be2:	f000 f80d 	bl	8000c00 <ap_task_color_calibration>
 8000be6:	e7dd      	b.n	8000ba4 <ap_main+0x4>
		}
		else
		{
			ap_task_color_detection();
 8000be8:	f000 f8a8 	bl	8000d3c <ap_task_color_detection>
		if(!color_calibration && input_is_long_pressed(INPUT_MODE))
 8000bec:	e7da      	b.n	8000ba4 <ap_main+0x4>
 8000bee:	bf00      	nop
 8000bf0:	2000030c 	.word	0x2000030c
 8000bf4:	2000030e 	.word	0x2000030e
 8000bf8:	2000030d 	.word	0x2000030d
 8000bfc:	08009758 	.word	0x08009758

08000c00 <ap_task_color_calibration>:
}



static void ap_task_color_calibration(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
	if(!check_color) return;
 8000c06:	4b43      	ldr	r3, [pc, #268]	@ (8000d14 <ap_task_color_calibration+0x114>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f083 0301 	eor.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d17a      	bne.n	8000d0c <ap_task_color_calibration+0x10c>

	if (!init_printed)
 8000c16:	4b40      	ldr	r3, [pc, #256]	@ (8000d18 <ap_task_color_calibration+0x118>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00b      	beq.n	8000c3c <ap_task_color_calibration+0x3c>
	{
		uart_printf("-------------COLOR SETTING-------------\r\n");
 8000c24:	483d      	ldr	r0, [pc, #244]	@ (8000d1c <ap_task_color_calibration+0x11c>)
 8000c26:	f005 fe73 	bl	8006910 <uart_printf>
		init_printed = true;
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d18 <ap_task_color_calibration+0x118>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
		flash_erase_color_table(BH1745_ADDR_LEFT);
 8000c30:	2038      	movs	r0, #56	@ 0x38
 8000c32:	f005 feff 	bl	8006a34 <flash_erase_color_table>
		flash_erase_color_table(BH1745_ADDR_RIGHT);
 8000c36:	2039      	movs	r0, #57	@ 0x39
 8000c38:	f005 fefc 	bl	8006a34 <flash_erase_color_table>
	}

	if (input_is_short_pressed(INPUT_MODE))
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 fc11 	bl	8001464 <input_is_short_pressed>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d062      	beq.n	8000d0e <ap_task_color_calibration+0x10e>
	{
		uart_printf("color set: [%s]\r\n", color_to_string(color_seq));
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 facb 	bl	80011e8 <color_to_string>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4619      	mov	r1, r3
 8000c56:	4833      	ldr	r0, [pc, #204]	@ (8000d24 <ap_task_color_calibration+0x124>)
 8000c58:	f005 fe5a 	bl	8006910 <uart_printf>

		bh1745_color_data_t left  = bh1745_read_rgbc(BH1745_ADDR_LEFT);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2138      	movs	r1, #56	@ 0x38
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f978 	bl	8000f58 <bh1745_read_rgbc>
		bh1745_color_data_t right = bh1745_read_rgbc(BH1745_ADDR_RIGHT);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2139      	movs	r1, #57	@ 0x39
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f973 	bl	8000f58 <bh1745_read_rgbc>

		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
					left.red, left.green, left.blue, left.clear);
 8000c72:	893b      	ldrh	r3, [r7, #8]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c74:	4619      	mov	r1, r3
					left.red, left.green, left.blue, left.clear);
 8000c76:	897b      	ldrh	r3, [r7, #10]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c78:	461a      	mov	r2, r3
					left.red, left.green, left.blue, left.clear);
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c7c:	4618      	mov	r0, r3
					left.red, left.green, left.blue, left.clear);
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	4603      	mov	r3, r0
 8000c84:	4828      	ldr	r0, [pc, #160]	@ (8000d28 <ap_task_color_calibration+0x128>)
 8000c86:	f005 fe43 	bl	8006910 <uart_printf>

		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
					right.red, right.green, right.blue, right.clear);
 8000c8a:	883b      	ldrh	r3, [r7, #0]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c8c:	4619      	mov	r1, r3
					right.red, right.green, right.blue, right.clear);
 8000c8e:	887b      	ldrh	r3, [r7, #2]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c90:	461a      	mov	r2, r3
					right.red, right.green, right.blue, right.clear);
 8000c92:	88bb      	ldrh	r3, [r7, #4]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c94:	4618      	mov	r0, r3
					right.red, right.green, right.blue, right.clear);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4823      	ldr	r0, [pc, #140]	@ (8000d2c <ap_task_color_calibration+0x12c>)
 8000c9e:	f005 fe37 	bl	8006910 <uart_printf>

		save_color_reference(BH1745_ADDR_LEFT,  color_seq, left.red, left.green, left.blue);
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000ca4:	7819      	ldrb	r1, [r3, #0]
 8000ca6:	893a      	ldrh	r2, [r7, #8]
 8000ca8:	8978      	ldrh	r0, [r7, #10]
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2038      	movs	r0, #56	@ 0x38
 8000cb2:	f000 f97f 	bl	8000fb4 <save_color_reference>
		save_color_reference(BH1745_ADDR_RIGHT, color_seq, right.red, right.green, right.blue);
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000cb8:	7819      	ldrb	r1, [r3, #0]
 8000cba:	883a      	ldrh	r2, [r7, #0]
 8000cbc:	8878      	ldrh	r0, [r7, #2]
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2039      	movs	r0, #57	@ 0x39
 8000cc6:	f000 f975 	bl	8000fb4 <save_color_reference>

		uart_printf("--------------------------------\r\n");
 8000cca:	4819      	ldr	r0, [pc, #100]	@ (8000d30 <ap_task_color_calibration+0x130>)
 8000ccc:	f005 fe20 	bl	8006910 <uart_printf>

		if (++color_seq > COLOR_GRAY)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b0b      	cmp	r3, #11
 8000ce2:	d914      	bls.n	8000d0e <ap_task_color_calibration+0x10e>
		{
			color_calibration = false;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <ap_task_color_calibration+0x134>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
			init_printed = false;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <ap_task_color_calibration+0x118>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			color_seq = 0;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <ap_task_color_calibration+0x120>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
			uart_printf("-------color set finished-------\r\n");
 8000cf6:	4810      	ldr	r0, [pc, #64]	@ (8000d38 <ap_task_color_calibration+0x138>)
 8000cf8:	f005 fe0a 	bl	8006910 <uart_printf>
			uart_printf("--------------------------------\r\n");
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <ap_task_color_calibration+0x130>)
 8000cfe:	f005 fe07 	bl	8006910 <uart_printf>
			load_color_reference_table();
 8000d02:	f000 fa89 	bl	8001218 <load_color_reference_table>
			debug_print_color_reference_table();
 8000d06:	f000 fabb 	bl	8001280 <debug_print_color_reference_table>
 8000d0a:	e000      	b.n	8000d0e <ap_task_color_calibration+0x10e>
	if(!check_color) return;
 8000d0c:	bf00      	nop
		}
	}
}
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000314 	.word	0x20000314
 8000d18:	2000030d 	.word	0x2000030d
 8000d1c:	08009784 	.word	0x08009784
 8000d20:	2000030e 	.word	0x2000030e
 8000d24:	080097b0 	.word	0x080097b0
 8000d28:	080097c4 	.word	0x080097c4
 8000d2c:	080097e4 	.word	0x080097e4
 8000d30:	08009804 	.word	0x08009804
 8000d34:	2000030c 	.word	0x2000030c
 8000d38:	08009828 	.word	0x08009828

08000d3c <ap_task_color_detection>:


// -------------------- 일반 색상 인식 루틴 --------------------
static void ap_task_color_detection(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
	if (!check_color) return;
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <ap_task_color_detection+0x88>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d133      	bne.n	8000dba <ap_task_color_detection+0x7e>

	uint8_t left  = classify_color_side(BH1745_ADDR_LEFT);
 8000d52:	2038      	movs	r0, #56	@ 0x38
 8000d54:	f000 fa28 	bl	80011a8 <classify_color_side>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t right = classify_color_side(BH1745_ADDR_RIGHT);
 8000d5c:	2039      	movs	r0, #57	@ 0x39
 8000d5e:	f000 fa23 	bl	80011a8 <classify_color_side>
 8000d62:	4603      	mov	r3, r0
 8000d64:	71bb      	strb	r3, [r7, #6]

	if (left == right)
 8000d66:	79fa      	ldrb	r2, [r7, #7]
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d10c      	bne.n	8000d88 <ap_task_color_detection+0x4c>
	{
		detected_color = left;
 8000d6e:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <ap_task_color_detection+0x8c>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	7013      	strb	r3, [r2, #0]
		uart_printf("cur_detected color: %s\r\n", color_to_string(left));
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fa36 	bl	80011e8 <color_to_string>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <ap_task_color_detection+0x90>)
 8000d82:	f005 fdc5 	bl	8006910 <uart_printf>
 8000d86:	e014      	b.n	8000db2 <ap_task_color_detection+0x76>
	}
	else
	{
		detected_color = COLOR_BLACK;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <ap_task_color_detection+0x8c>)
 8000d8a:	2209      	movs	r2, #9
 8000d8c:	701a      	strb	r2, [r3, #0]
		uart_printf("The colors on both sides do not match!!\r\n");
 8000d8e:	4810      	ldr	r0, [pc, #64]	@ (8000dd0 <ap_task_color_detection+0x94>)
 8000d90:	f005 fdbe 	bl	8006910 <uart_printf>
		uart_printf("[LEFT]: %s | [RIGHT]: %s\r\n", color_to_string(left), color_to_string(right));
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fa26 	bl	80011e8 <color_to_string>
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fa21 	bl	80011e8 <color_to_string>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4621      	mov	r1, r4
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <ap_task_color_detection+0x98>)
 8000dae:	f005 fdaf 	bl	8006910 <uart_printf>
	}

	check_color = false;
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <ap_task_color_detection+0x88>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e000      	b.n	8000dbc <ap_task_color_detection+0x80>
	if (!check_color) return;
 8000dba:	bf00      	nop
}
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000314 	.word	0x20000314
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	0800984c 	.word	0x0800984c
 8000dd0:	08009868 	.word	0x08009868
 8000dd4:	08009894 	.word	0x08009894

08000dd8 <HAL_GPIO_EXTI_Callback>:

extern volatile uint8_t detected_color;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d102      	bne.n	8000dee <HAL_GPIO_EXTI_Callback+0x16>
	{
		case GPIO_PIN_0:
			ap_exti0_callback();
 8000de8:	f000 f806 	bl	8000df8 <ap_exti0_callback>
			break;
 8000dec:	bf00      	nop
	}
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <ap_exti0_callback>:

void ap_exti0_callback(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	bool level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);  // Pull-up 기준
 8000dfe:	2101      	movs	r1, #1
 8000e00:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <ap_exti0_callback+0x38>)
 8000e02:	f002 fd11 	bl	8003828 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
	input_exti_triggered(INPUT_MODE, level);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4619      	mov	r1, r3
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 fac0 	bl	800139c <input_exti_triggered>

	if(level)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <ap_exti0_callback+0x30>
		check_color = true;
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <ap_exti0_callback+0x3c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	48000400 	.word	0x48000400
 8000e34:	20000314 	.word	0x20000314

08000e38 <ap_tim16_callback>:
{

}

void ap_tim16_callback(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	rgb_set_color(detected_color);
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <ap_tim16_callback+0x30>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fb70 	bl	8001528 <rgb_set_color>

	if(detected_color == COLOR_BLACK)
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <ap_tim16_callback+0x30>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b09      	cmp	r3, #9
 8000e50:	d007      	beq.n	8000e62 <ap_tim16_callback+0x2a>
		return;

	switch (detected_color)
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <ap_tim16_callback+0x30>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <ap_tim16_callback+0x2c>
	{
		case COLOR_RED :
//			step_drive(OP_FORWARD);
			step_tick_isr();
 8000e5c:	f005 fc22 	bl	80066a4 <step_tick_isr>
			break;
 8000e60:	e000      	b.n	8000e64 <ap_tim16_callback+0x2c>
		return;
 8000e62:	bf00      	nop
	}
}
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <ap_tim17_callback>:

void ap_tim17_callback(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	timer17_ms++;
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <ap_tim17_callback+0x18>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a03      	ldr	r2, [pc, #12]	@ (8000e84 <ap_tim17_callback+0x18>)
 8000e78:	6013      	str	r3, [r2, #0]

	input_update();
 8000e7a:	f000 faa3 	bl	80013c4 <input_update>


}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000310 	.word	0x20000310

08000e88 <bh1745_write_reg>:
uint8_t insert_index = 0;



void bh1745_write_reg(uint8_t dev_addr, uint8_t reg, uint8_t data)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
 8000e92:	460b      	mov	r3, r1
 8000e94:	71bb      	strb	r3, [r7, #6]
 8000e96:	4613      	mov	r3, r2
 8000e98:	717b      	strb	r3, [r7, #5]
    i2c_write(dev_addr, reg, data);
 8000e9a:	797a      	ldrb	r2, [r7, #5]
 8000e9c:	79b9      	ldrb	r1, [r7, #6]
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f005 fc7f 	bl	80067a4 <i2c_write>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <bh1745_init>:

void bh1745_init(uint8_t dev_addr)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
    // 1. SW Reset
    bh1745_write_reg(dev_addr, 0x40, 0x80);  // SYSTEM_CONTROL: Software Reset
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2280      	movs	r2, #128	@ 0x80
 8000ebc:	2140      	movs	r1, #64	@ 0x40
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffe2 	bl	8000e88 <bh1745_write_reg>
    HAL_Delay(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f001 f99d 	bl	8002204 <HAL_Delay>

    // 2. Measurement Time 설정 (MODE_CONTROL1)
    bh1745_write_reg(dev_addr, 0x41, 0x00);  // 160ms
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2141      	movs	r1, #65	@ 0x41
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ffd9 	bl	8000e88 <bh1745_write_reg>

    // 3. Gain 설정 + RGBC Enable (MODE_CONTROL2)
    bh1745_write_reg(dev_addr, 0x42, 0x12);  // GAIN = 1x, Bit4(RGBC_EN) = 1
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2212      	movs	r2, #18
 8000eda:	2142      	movs	r1, #66	@ 0x42
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ffd3 	bl	8000e88 <bh1745_write_reg>

    // 4. RGB 측정 트리거 (MODE_CONTROL3)
    bh1745_write_reg(dev_addr, 0x44, 0x02);  // RGB measurement start
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	2144      	movs	r1, #68	@ 0x44
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ffcd 	bl	8000e88 <bh1745_write_reg>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <color_init>:

void color_init(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
	bh1745_init(BH1745_ADDR_LEFT);
 8000efa:	2038      	movs	r0, #56	@ 0x38
 8000efc:	f7ff ffd7 	bl	8000eae <bh1745_init>
	bh1745_init(BH1745_ADDR_RIGHT);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f7ff ffd4 	bl	8000eae <bh1745_init>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <bh1745_read_u16>:

uint16_t bh1745_read_u16(uint8_t dev_addr, uint8_t lsb_reg)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b084      	sub	sp, #16
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	460a      	mov	r2, r1
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	4613      	mov	r3, r2
 8000f18:	71bb      	strb	r3, [r7, #6]
    uint8_t lsb = i2c_read(dev_addr, lsb_reg);
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 fc87 	bl	8006834 <i2c_read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
    uint8_t msb = i2c_read(dev_addr, lsb_reg + 1);
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f005 fc7d 	bl	8006834 <i2c_read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]
    return (msb << 8) | lsb;
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <bh1745_read_rgbc>:

bh1745_color_data_t bh1745_read_rgbc(uint8_t dev_addr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
    bh1745_color_data_t color;

    color.red   = bh1745_read_u16(dev_addr, 0x50);
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2150      	movs	r1, #80	@ 0x50
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ffce 	bl	8000f0a <bh1745_read_u16>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	813b      	strh	r3, [r7, #8]
    color.green = bh1745_read_u16(dev_addr, 0x52);
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	2152      	movs	r1, #82	@ 0x52
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ffc7 	bl	8000f0a <bh1745_read_u16>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	817b      	strh	r3, [r7, #10]
    color.blue  = bh1745_read_u16(dev_addr, 0x54);
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2154      	movs	r1, #84	@ 0x54
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ffc0 	bl	8000f0a <bh1745_read_u16>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	81bb      	strh	r3, [r7, #12]
    color.clear = bh1745_read_u16(dev_addr, 0x56);
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	2156      	movs	r1, #86	@ 0x56
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffb9 	bl	8000f0a <bh1745_read_u16>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	81fb      	strh	r3, [r7, #14]

    return color;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	cb03      	ldmia	r3!, {r0, r1}
 8000fa6:	6010      	str	r0, [r2, #0]
 8000fa8:	6051      	str	r1, [r2, #4]
}
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <save_color_reference>:


void save_color_reference(uint8_t sensor_side, color_t color, uint16_t r, uint16_t g, uint16_t b)
{
 8000fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb6:	b08d      	sub	sp, #52	@ 0x34
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4606      	mov	r6, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4633      	mov	r3, r6
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	807b      	strh	r3, [r7, #2]
	rgb_raw_t	raw		= {.red_raw = r, .green_raw = g, .blue_raw = b};
 8000fd2:	88bb      	ldrh	r3, [r7, #4]
 8000fd4:	833b      	strh	r3, [r7, #24]
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	837b      	strh	r3, [r7, #26]
 8000fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000fde:	83bb      	strh	r3, [r7, #28]
    uint64_t 	offset	= calculate_brightness(r, g, b);
 8000fe0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000fe4:	8879      	ldrh	r1, [r7, #2]
 8000fe6:	88bb      	ldrh	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f9b7 	bl	800135c <calculate_brightness>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	e9c7 4508 	strd	r4, r5, [r7, #32]

    reference_entry_t entry = { .raw = raw, .color = color, .offset = offset };
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	f107 0218 	add.w	r2, r7, #24
 8001010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001014:	6018      	str	r0, [r3, #0]
 8001016:	3304      	adds	r3, #4
 8001018:	8019      	strh	r1, [r3, #0]
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	73bb      	strb	r3, [r7, #14]
 800101e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001022:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (sensor_side == BH1745_ADDR_LEFT)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b38      	cmp	r3, #56	@ 0x38
 800102a:	d10a      	bne.n	8001042 <save_color_reference+0x8e>
    {
        color_reference_tbl_left[color] = entry;
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <save_color_reference+0xcc>)
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	461c      	mov	r4, r3
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001040:	e009      	b.n	8001056 <save_color_reference+0xa2>
    }
    else
    {
        color_reference_tbl_right[color] = entry;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	4a0f      	ldr	r2, [pc, #60]	@ (8001084 <save_color_reference+0xd0>)
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	4413      	add	r3, r2
 800104a:	461c      	mov	r4, r3
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // Flash에 저장!
    flash_write_color_reference(sensor_side, color, entry);
 8001056:	79bd      	ldrb	r5, [r7, #6]
 8001058:	79fc      	ldrb	r4, [r7, #7]
 800105a:	466a      	mov	r2, sp
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001064:	e882 0003 	stmia.w	r2, {r0, r1}
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	cb0c      	ldmia	r3, {r2, r3}
 800106e:	4629      	mov	r1, r5
 8001070:	4620      	mov	r0, r4
 8001072:	f005 fc73 	bl	800695c <flash_write_color_reference>
}
 8001076:	bf00      	nop
 8001078:	372c      	adds	r7, #44	@ 0x2c
 800107a:	46bd      	mov	sp, r7
 800107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800107e:	bf00      	nop
 8001080:	20000318 	.word	0x20000318
 8001084:	200003d8 	.word	0x200003d8

08001088 <classify_color>:


color_t classify_color(uint8_t left_right, uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 8001088:	b490      	push	{r4, r7}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	4604      	mov	r4, r0
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4623      	mov	r3, r4
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	4603      	mov	r3, r0
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	807b      	strh	r3, [r7, #2]
 80010a2:	4613      	mov	r3, r2
 80010a4:	803b      	strh	r3, [r7, #0]
	float min_dist = 1e9;
 80010a6:	4b3d      	ldr	r3, [pc, #244]	@ (800119c <classify_color+0x114>)
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	color_t best_match = COLOR_GRAY;
 80010aa:	230b      	movs	r3, #11
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    const reference_entry_t* table;
    int table_size = COLOR_COUNT;
 80010b0:	230c      	movs	r3, #12
 80010b2:	61fb      	str	r3, [r7, #28]

    if (left_right == BH1745_ADDR_LEFT)  // LEFT
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b38      	cmp	r3, #56	@ 0x38
 80010b8:	d102      	bne.n	80010c0 <classify_color+0x38>
    {
        table = color_reference_tbl_left;
 80010ba:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <classify_color+0x118>)
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010be:	e001      	b.n	80010c4 <classify_color+0x3c>
    }
    else // RIGHT
    {
        table = color_reference_tbl_right;
 80010c0:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <classify_color+0x11c>)
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    for (int i = 0; i < table_size; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	e05c      	b.n	8001184 <classify_color+0xfc>
    {
    	float dr = (float)r - table[i].raw.red_raw;
 80010ca:	88bb      	ldrh	r3, [r7, #4]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d4:	6a3b      	ldr	r3, [r7, #32]
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010da:	4413      	add	r3, r2
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ea:	edc7 7a06 	vstr	s15, [r7, #24]
		float dg = (float)g - table[i].raw.green_raw;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010fe:	4413      	add	r3, r2
 8001100:	885b      	ldrh	r3, [r3, #2]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110e:	edc7 7a05 	vstr	s15, [r7, #20]
		float db = (float)b - table[i].raw.blue_raw;
 8001112:	883b      	ldrh	r3, [r7, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001122:	4413      	add	r3, r2
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001132:	edc7 7a04 	vstr	s15, [r7, #16]

        float dist = dr * dr + dg * dg + db * db;
 8001136:	edd7 7a06 	vldr	s15, [r7, #24]
 800113a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800113e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001142:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800114a:	edd7 7a04 	vldr	s15, [r7, #16]
 800114e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001156:	edc7 7a03 	vstr	s15, [r7, #12]

        if (dist < min_dist)
 800115a:	ed97 7a03 	vldr	s14, [r7, #12]
 800115e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d508      	bpl.n	800117e <classify_color+0xf6>
        {
            min_dist = dist;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            best_match = table[i].color;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001176:	4413      	add	r3, r2
 8001178:	799b      	ldrb	r3, [r3, #6]
 800117a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    for (int i = 0; i < table_size; i++)
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	3301      	adds	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	6a3a      	ldr	r2, [r7, #32]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	429a      	cmp	r2, r3
 800118a:	db9e      	blt.n	80010ca <classify_color+0x42>
        }
    }

	return best_match;
 800118c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001190:	4618      	mov	r0, r3
 8001192:	3730      	adds	r7, #48	@ 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bc90      	pop	{r4, r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	4e6e6b28 	.word	0x4e6e6b28
 80011a0:	20000318 	.word	0x20000318
 80011a4:	200003d8 	.word	0x200003d8

080011a8 <classify_color_side>:

uint8_t classify_color_side(uint8_t color_side)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = color_side;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	75fb      	strb	r3, [r7, #23]

	bh1745_color_data_t color_rgbc;
	color_t detected = COLOR_BLACK;
 80011b6:	2309      	movs	r3, #9
 80011b8:	75bb      	strb	r3, [r7, #22]

	color_rgbc 	= bh1745_read_rgbc(addr);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	7dfa      	ldrb	r2, [r7, #23]
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fec8 	bl	8000f58 <bh1745_read_rgbc>

	detected =
			classify_color(addr, color_rgbc.red, color_rgbc.green, color_rgbc.blue, color_rgbc.clear);
 80011c8:	89b9      	ldrh	r1, [r7, #12]
 80011ca:	89fa      	ldrh	r2, [r7, #14]
 80011cc:	8a3c      	ldrh	r4, [r7, #16]
 80011ce:	8a7b      	ldrh	r3, [r7, #18]
 80011d0:	7df8      	ldrb	r0, [r7, #23]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4623      	mov	r3, r4
 80011d6:	f7ff ff57 	bl	8001088 <classify_color>
 80011da:	4603      	mov	r3, r0
 80011dc:	75bb      	strb	r3, [r7, #22]

	return (uint8_t) detected;
 80011de:	7dbb      	ldrb	r3, [r7, #22]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}

080011e8 <color_to_string>:

const char* color_to_string(color_t color)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
        "BLACK",
        "WHITE",
        "GRAY"
    };

    if (color < 0 || color >= COLOR_COUNT)
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b0b      	cmp	r3, #11
 80011f6:	d901      	bls.n	80011fc <color_to_string+0x14>
        return "UNKNOWN";
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <color_to_string+0x28>)
 80011fa:	e003      	b.n	8001204 <color_to_string+0x1c>

    return color_names[color];
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <color_to_string+0x2c>)
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	080098b0 	.word	0x080098b0
 8001214:	2000000c 	.word	0x2000000c

08001218 <load_color_reference_table>:

void load_color_reference_table(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
    for (int i = 0; i < COLOR_COUNT; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e020      	b.n	8001266 <load_color_reference_table+0x4e>
    {
        color_reference_tbl_left[i] = flash_read_color_reference(BH1745_ADDR_LEFT, i);
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4913      	ldr	r1, [pc, #76]	@ (8001278 <load_color_reference_table+0x60>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	18cc      	adds	r4, r1, r3
 8001230:	463b      	mov	r3, r7
 8001232:	2138      	movs	r1, #56	@ 0x38
 8001234:	4618      	mov	r0, r3
 8001236:	f005 fbd3 	bl	80069e0 <flash_read_color_reference>
 800123a:	463b      	mov	r3, r7
 800123c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        color_reference_tbl_right[i] = flash_read_color_reference(BH1745_ADDR_RIGHT, i);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	490d      	ldr	r1, [pc, #52]	@ (800127c <load_color_reference_table+0x64>)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	18cc      	adds	r4, r1, r3
 800124e:	463b      	mov	r3, r7
 8001250:	2139      	movs	r1, #57	@ 0x39
 8001252:	4618      	mov	r0, r3
 8001254:	f005 fbc4 	bl	80069e0 <flash_read_color_reference>
 8001258:	463b      	mov	r3, r7
 800125a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < COLOR_COUNT; i++)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b0b      	cmp	r3, #11
 800126a:	dddb      	ble.n	8001224 <load_color_reference_table+0xc>
    }
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	20000318 	.word	0x20000318
 800127c:	200003d8 	.word	0x200003d8

08001280 <debug_print_color_reference_table>:

void debug_print_color_reference_table(void)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08e      	sub	sp, #56	@ 0x38
 8001284:	af04      	add	r7, sp, #16
    uart_printf("=== LEFT COLOR REFERENCE TABLE ===\r\n");
 8001286:	482f      	ldr	r0, [pc, #188]	@ (8001344 <debug_print_color_reference_table+0xc4>)
 8001288:	f005 fb42 	bl	8006910 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001290:	e022      	b.n	80012d8 <debug_print_color_reference_table+0x58>
    {
        reference_entry_t e = color_reference_tbl_left[i];
 8001292:	4a2d      	ldr	r2, [pc, #180]	@ (8001348 <debug_print_color_reference_table+0xc8>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	f107 0410 	add.w	r4, r7, #16
 800129e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012a4:	7dbb      	ldrb	r3, [r7, #22]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff9e 	bl	80011e8 <color_to_string>
 80012ac:	4601      	mov	r1, r0
                    i, color_to_string(e.color),
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012ae:	8a3b      	ldrh	r3, [r7, #16]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012b0:	461d      	mov	r5, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012b2:	8a7b      	ldrh	r3, [r7, #18]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012b4:	4618      	mov	r0, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012b6:	8abb      	ldrh	r3, [r7, #20]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012b8:	461c      	mov	r4, r3
 80012ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012c2:	9401      	str	r4, [sp, #4]
 80012c4:	9000      	str	r0, [sp, #0]
 80012c6:	462b      	mov	r3, r5
 80012c8:	460a      	mov	r2, r1
 80012ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012cc:	481f      	ldr	r0, [pc, #124]	@ (800134c <debug_print_color_reference_table+0xcc>)
 80012ce:	f005 fb1f 	bl	8006910 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	3301      	adds	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	2b0b      	cmp	r3, #11
 80012dc:	ddd9      	ble.n	8001292 <debug_print_color_reference_table+0x12>
    }

    uart_printf("=== RIGHT COLOR REFERENCE TABLE ===\r\n");
 80012de:	481c      	ldr	r0, [pc, #112]	@ (8001350 <debug_print_color_reference_table+0xd0>)
 80012e0:	f005 fb16 	bl	8006910 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
 80012e8:	e021      	b.n	800132e <debug_print_color_reference_table+0xae>
    {
        reference_entry_t e = color_reference_tbl_right[i];
 80012ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001354 <debug_print_color_reference_table+0xd4>)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	463c      	mov	r4, r7
 80012f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff73 	bl	80011e8 <color_to_string>
 8001302:	4601      	mov	r1, r0
                    i, color_to_string(e.color),
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 8001304:	883b      	ldrh	r3, [r7, #0]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 8001306:	461d      	mov	r5, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 8001308:	887b      	ldrh	r3, [r7, #2]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 800130a:	4618      	mov	r0, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 800130c:	88bb      	ldrh	r3, [r7, #4]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 800130e:	461c      	mov	r4, r3
 8001310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001318:	9401      	str	r4, [sp, #4]
 800131a:	9000      	str	r0, [sp, #0]
 800131c:	462b      	mov	r3, r5
 800131e:	460a      	mov	r2, r1
 8001320:	6a39      	ldr	r1, [r7, #32]
 8001322:	480a      	ldr	r0, [pc, #40]	@ (800134c <debug_print_color_reference_table+0xcc>)
 8001324:	f005 faf4 	bl	8006910 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	3301      	adds	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	2b0b      	cmp	r3, #11
 8001332:	ddda      	ble.n	80012ea <debug_print_color_reference_table+0x6a>
    }
    uart_printf("=== BRIGHTNESS OFFSET TABLE ===\r\n");
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <debug_print_color_reference_table+0xd8>)
 8001336:	f005 faeb 	bl	8006910 <uart_printf>
//    uart_printf("offset_black: %d | offset_white: %d\r\n", offset_black, offset_white);
//	uart_printf("offset_aver: %d\r\n", offset_average);
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	@ 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	080098b8 	.word	0x080098b8
 8001348:	20000318 	.word	0x20000318
 800134c:	080098e0 	.word	0x080098e0
 8001350:	08009918 	.word	0x08009918
 8001354:	200003d8 	.word	0x200003d8
 8001358:	08009940 	.word	0x08009940

0800135c <calculate_brightness>:

uint32_t calculate_brightness(uint16_t r, uint16_t g, uint16_t b)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	460b      	mov	r3, r1
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	807b      	strh	r3, [r7, #2]
//    return 0.2126f * r + 0.7152f * g + 0.0722f * b;

    return (218 * r + 732 * g + 74 * b) >> 10;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	22da      	movs	r2, #218	@ 0xda
 8001372:	fb03 f202 	mul.w	r2, r3, r2
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 800137c:	fb01 f303 	mul.w	r3, r1, r3
 8001380:	441a      	add	r2, r3
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	214a      	movs	r1, #74	@ 0x4a
 8001386:	fb01 f303 	mul.w	r3, r1, r3
 800138a:	4413      	add	r3, r2
 800138c:	129b      	asrs	r3, r3, #10
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <input_exti_triggered>:




void input_exti_triggered(input_id_t id, bool level)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	4613      	mov	r3, r2
 80013aa:	71bb      	strb	r3, [r7, #6]
	is_pressed[id] = level;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4904      	ldr	r1, [pc, #16]	@ (80013c0 <input_exti_triggered+0x24>)
 80013b0:	79ba      	ldrb	r2, [r7, #6]
 80013b2:	54ca      	strb	r2, [r1, r3]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000498 	.word	0x20000498

080013c4 <input_update>:

void input_update(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_INPUTS; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	e037      	b.n	8001440 <input_update+0x7c>
	{
		if(is_pressed[i])
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <input_update+0x90>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d016      	beq.n	800140a <input_update+0x46>
		{
			press_time[i]++;
 80013dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001458 <input_update+0x94>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	491c      	ldr	r1, [pc, #112]	@ (8001458 <input_update+0x94>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(press_time[i] == 3000)
 80013ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001458 <input_update+0x94>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11d      	bne.n	800143a <input_update+0x76>
			{
				long_press_flag[i] = true;
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <input_update+0x98>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	e017      	b.n	800143a <input_update+0x76>
			}
		}
		else
		{
			if(press_time[i] > 0 && press_time[i] < 3000)
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <input_update+0x94>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <input_update+0x6c>
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <input_update+0x94>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001422:	4293      	cmp	r3, r2
 8001424:	d804      	bhi.n	8001430 <input_update+0x6c>
			{
				short_press_flag[i] = true;
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <input_update+0x9c>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
			}
			press_time[i] = 0;
 8001430:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <input_update+0x94>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2100      	movs	r1, #0
 8001436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_INPUTS; i++)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3301      	adds	r3, #1
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b06      	cmp	r3, #6
 8001444:	ddc4      	ble.n	80013d0 <input_update+0xc>
		}
	}
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20000498 	.word	0x20000498
 8001458:	200004a0 	.word	0x200004a0
 800145c:	200004c4 	.word	0x200004c4
 8001460:	200004bc 	.word	0x200004bc

08001464 <input_is_short_pressed>:

bool input_is_short_pressed(input_id_t id)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	bool ret = short_press_flag[id];
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4a06      	ldr	r2, [pc, #24]	@ (800148c <input_is_short_pressed+0x28>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	73fb      	strb	r3, [r7, #15]
	short_press_flag[id] = false;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <input_is_short_pressed+0x28>)
 800147a:	2100      	movs	r1, #0
 800147c:	54d1      	strb	r1, [r2, r3]
	return ret;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	200004bc 	.word	0x200004bc

08001490 <input_is_long_pressed>:

bool input_is_long_pressed(input_id_t id)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	bool ret = long_press_flag[id];
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <input_is_long_pressed+0x28>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	73fb      	strb	r3, [r7, #15]
	long_press_flag[id] = false;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <input_is_long_pressed+0x28>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	54d1      	strb	r1, [r2, r3]
	return ret;
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200004c4 	.word	0x200004c4

080014bc <led_init>:
};



void led_init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	led_on(_DEF_CH_1);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 f803 	bl	80014cc <led_on>
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <led_on>:

void led_on(uint8_t ch)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d814      	bhi.n	8001506 <led_on+0x3a>
		return;

	switch (ch)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d112      	bne.n	8001508 <led_on+0x3c>
	{
		case _DEF_CH_1:
			HAL_GPIO_WritePin(led[ch].port, led[ch].pin, led[ch].on_state);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <led_on+0x44>)
 80014e6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <led_on+0x44>)
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	8899      	ldrh	r1, [r3, #4]
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <led_on+0x44>)
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	799b      	ldrb	r3, [r3, #6]
 80014fe:	461a      	mov	r2, r3
 8001500:	f002 f9aa 	bl	8003858 <HAL_GPIO_WritePin>
			break;
 8001504:	e000      	b.n	8001508 <led_on+0x3c>
		return;
 8001506:	bf00      	nop
	}
}
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	080099e8 	.word	0x080099e8

08001514 <rgb_init>:
		[COLOR_GRAY]        = { 128, 128, 128 }
};


void rgb_init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RGB_CH1_R | RGB_CH1_G | RGB_CH1_B, GPIO_PIN_SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2170      	movs	r1, #112	@ 0x70
 800151c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001520:	f002 f99a 	bl	8003858 <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <rgb_set_color>:

void rgb_set_color(color_t color)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	if(color >= COLOR_COUNT)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b0b      	cmp	r3, #11
 8001536:	d81a      	bhi.n	800156e <rgb_set_color+0x46>
		return;

	rgb_set_pwm(led_map[color].r, led_map[color].g, led_map[color].b);
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	490f      	ldr	r1, [pc, #60]	@ (8001578 <rgb_set_color+0x50>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	440b      	add	r3, r1
 8001544:	7818      	ldrb	r0, [r3, #0]
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	490b      	ldr	r1, [pc, #44]	@ (8001578 <rgb_set_color+0x50>)
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	440b      	add	r3, r1
 8001552:	3301      	adds	r3, #1
 8001554:	7819      	ldrb	r1, [r3, #0]
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	4c07      	ldr	r4, [pc, #28]	@ (8001578 <rgb_set_color+0x50>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	4423      	add	r3, r4
 8001562:	3302      	adds	r3, #2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	f000 f808 	bl	800157c <rgb_set_pwm>
 800156c:	e000      	b.n	8001570 <rgb_set_color+0x48>
		return;
 800156e:	bf00      	nop
}
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
 8001576:	bf00      	nop
 8001578:	08009a00 	.word	0x08009a00

0800157c <rgb_set_pwm>:

void rgb_set_pwm(uint8_t r, uint8_t g, uint8_t b)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	460b      	mov	r3, r1
 8001588:	71bb      	strb	r3, [r7, #6]
 800158a:	4613      	mov	r3, r2
 800158c:	717b      	strb	r3, [r7, #5]
	static uint8_t pwm_period = 0;

	if(++pwm_period > 255)
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <rgb_set_pwm+0xa4>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <rgb_set_pwm+0xa4>)
 8001598:	701a      	strb	r2, [r3, #0]
		pwm_period = 0;

	if(pwm_period > 255 - r)
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <rgb_set_pwm+0xa4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dd06      	ble.n	80015b8 <rgb_set_pwm+0x3c>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_R, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b2:	f002 f951 	bl	8003858 <HAL_GPIO_WritePin>
 80015b6:	e005      	b.n	80015c4 <rgb_set_pwm+0x48>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_R, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2120      	movs	r1, #32
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f002 f94a 	bl	8003858 <HAL_GPIO_WritePin>
	}

	if(pwm_period > 255 - g)
 80015c4:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <rgb_set_pwm+0xa4>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dd06      	ble.n	80015e2 <rgb_set_pwm+0x66>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_G, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2140      	movs	r1, #64	@ 0x40
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f002 f93c 	bl	8003858 <HAL_GPIO_WritePin>
 80015e0:	e005      	b.n	80015ee <rgb_set_pwm+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_G, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2140      	movs	r1, #64	@ 0x40
 80015e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ea:	f002 f935 	bl	8003858 <HAL_GPIO_WritePin>
	}

	if(pwm_period > 255 - b)
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <rgb_set_pwm+0xa4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	797b      	ldrb	r3, [r7, #5]
 80015f6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dd06      	ble.n	800160c <rgb_set_pwm+0x90>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2110      	movs	r1, #16
 8001602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001606:	f002 f927 	bl	8003858 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_SET);
	}
}
 800160a:	e005      	b.n	8001618 <rgb_set_pwm+0x9c>
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2110      	movs	r1, #16
 8001610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001614:	f002 f920 	bl	8003858 <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200004cb 	.word	0x200004cb

08001624 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001630:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4313      	orrs	r3, r2
 800163a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165a:	f000 fd4d 	bl	80020f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165e:	f000 f814 	bl	800168a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001662:	f000 f9f1 	bl	8001a48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001666:	f000 f8c9 	bl	80017fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800166a:	f000 f9a1 	bl	80019b0 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800166e:	f000 f953 	bl	8001918 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001672:	f000 f977 	bl	8001964 <MX_TIM17_Init>
  MX_ADC1_Init();
 8001676:	f000 f85d 	bl	8001734 <MX_ADC1_Init>
  MX_TIM2_Init();
 800167a:	f000 f8ff 	bl	800187c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800167e:	f7ff fa6b 	bl	8000b58 <ap_init>
  ap_main();
 8001682:	f7ff fa8d 	bl	8000ba0 <ap_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001686:	bf00      	nop
 8001688:	e7fd      	b.n	8001686 <main+0x30>

0800168a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b09a      	sub	sp, #104	@ 0x68
 800168e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	2248      	movs	r2, #72	@ 0x48
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f005 ff7d 	bl	8007598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2340      	movs	r3, #64	@ 0x40
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c8:	2303      	movs	r3, #3
 80016ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80016cc:	2310      	movs	r3, #16
 80016ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016da:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fd90 	bl	8004210 <HAL_RCC_OscConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x70>
  {
    Error_Handler();
 80016f6:	f000 f9fd 	bl	8001af4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016fa:	236f      	movs	r3, #111	@ 0x6f
 80016fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2303      	movs	r3, #3
 8001700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2103      	movs	r1, #3
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f8e2 	bl	80048e4 <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001726:	f000 f9e5 	bl	8001af4 <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3768      	adds	r7, #104	@ 0x68
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 800174c:	4a29      	ldr	r2, [pc, #164]	@ (80017f4 <MX_ADC1_Init+0xc0>)
 800174e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175c:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 800176a:	2204      	movs	r2, #4
 800176c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001770:	2200      	movs	r2, #0
 8001772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001774:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001776:	2200      	movs	r2, #0
 8001778:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 800177c:	2201      	movs	r2, #1
 800177e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001790:	2200      	movs	r2, #0
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017aa:	4811      	ldr	r0, [pc, #68]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 80017ac:	f000 feda 	bl	8002564 <HAL_ADC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80017b6:	f000 f99d 	bl	8001af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <MX_ADC1_Init+0xc4>)
 80017bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017be:	2306      	movs	r3, #6
 80017c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80017c2:	2305      	movs	r3, #5
 80017c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c6:	237f      	movs	r3, #127	@ 0x7f
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017ca:	2304      	movs	r3, #4
 80017cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <MX_ADC1_Init+0xbc>)
 80017d8:	f001 f810 	bl	80027fc <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017e2:	f000 f987 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200004cc 	.word	0x200004cc
 80017f4:	50040000 	.word	0x50040000
 80017f8:	32601000 	.word	0x32601000

080017fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001802:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <MX_I2C1_Init+0x78>)
 8001804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001806:	4b1a      	ldr	r3, [pc, #104]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001808:	4a1b      	ldr	r2, [pc, #108]	@ (8001878 <MX_I2C1_Init+0x7c>)
 800180a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800180c:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001812:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001814:	2201      	movs	r2, #1
 8001816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <MX_I2C1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800181e:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_I2C1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001836:	480e      	ldr	r0, [pc, #56]	@ (8001870 <MX_I2C1_Init+0x74>)
 8001838:	f002 f83e 	bl	80038b8 <HAL_I2C_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001842:	f000 f957 	bl	8001af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001846:	2100      	movs	r1, #0
 8001848:	4809      	ldr	r0, [pc, #36]	@ (8001870 <MX_I2C1_Init+0x74>)
 800184a:	f002 f8d0 	bl	80039ee <HAL_I2CEx_ConfigAnalogFilter>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001854:	f000 f94e 	bl	8001af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001858:	2100      	movs	r1, #0
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <MX_I2C1_Init+0x74>)
 800185c:	f002 f912 	bl	8003a84 <HAL_I2CEx_ConfigDigitalFilter>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001866:	f000 f945 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000530 	.word	0x20000530
 8001874:	40005400 	.word	0x40005400
 8001878:	10b17db5 	.word	0x10b17db5

0800187c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <MX_TIM2_Init+0x98>)
 800189c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018a4:	223f      	movs	r2, #63	@ 0x3f
 80018a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018c2:	4814      	ldr	r0, [pc, #80]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018c4:	f003 fc57 	bl	8005176 <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ce:	f000 f911 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018e0:	f003 fdf5 	bl	80054ce <HAL_TIM_ConfigClockSource>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018ea:	f000 f903 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	@ (8001914 <MX_TIM2_Init+0x98>)
 80018fc:	f003 ffe8 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001906:	f000 f8f5 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000584 	.word	0x20000584

08001918 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_TIM16_Init+0x44>)
 800191e:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <MX_TIM16_Init+0x48>)
 8001920:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_TIM16_Init+0x44>)
 8001924:	223f      	movs	r2, #63	@ 0x3f
 8001926:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_TIM16_Init+0x44>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <MX_TIM16_Init+0x44>)
 8001930:	2209      	movs	r2, #9
 8001932:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_TIM16_Init+0x44>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <MX_TIM16_Init+0x44>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_TIM16_Init+0x44>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_TIM16_Init+0x44>)
 8001948:	f003 fc15 	bl	8005176 <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001952:	f000 f8cf 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200005d0 	.word	0x200005d0
 8001960:	40014400 	.word	0x40014400

08001964 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <MX_TIM17_Init+0x44>)
 800196a:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <MX_TIM17_Init+0x48>)
 800196c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <MX_TIM17_Init+0x44>)
 8001970:	223f      	movs	r2, #63	@ 0x3f
 8001972:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <MX_TIM17_Init+0x44>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <MX_TIM17_Init+0x44>)
 800197c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001980:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <MX_TIM17_Init+0x44>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <MX_TIM17_Init+0x44>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <MX_TIM17_Init+0x44>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	@ (80019a8 <MX_TIM17_Init+0x44>)
 8001996:	f003 fbee 	bl	8005176 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80019a0:	f000 f8a8 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000061c 	.word	0x2000061c
 80019ac:	40014800 	.word	0x40014800

080019b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019b6:	4a23      	ldr	r2, [pc, #140]	@ (8001a44 <MX_USART1_UART_Init+0x94>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ba:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019ec:	4b14      	ldr	r3, [pc, #80]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f8:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 80019fa:	f003 fff7 	bl	80059ec <HAL_UART_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a04:	f000 f876 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 8001a0c:	f004 fc60 	bl	80062d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a16:	f000 f86d 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4808      	ldr	r0, [pc, #32]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 8001a1e:	f004 fc95 	bl	800634c <HAL_UARTEx_SetRxFifoThreshold>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a28:	f000 f864 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MX_USART1_UART_Init+0x90>)
 8001a2e:	f004 fc16 	bl	800625e <HAL_UARTEx_DisableFifoMode>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a38:	f000 f85c 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000668 	.word	0x20000668
 8001a44:	40013800 	.word	0x40013800

08001a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff fde1 	bl	8001624 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2001      	movs	r0, #1
 8001a64:	f7ff fdde 	bl	8001624 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a68:	2201      	movs	r2, #1
 8001a6a:	217f      	movs	r1, #127	@ 0x7f
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a70:	f001 fef2 	bl	8003858 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2106      	movs	r1, #6
 8001a78:	481d      	ldr	r0, [pc, #116]	@ (8001af0 <MX_GPIO_Init+0xa8>)
 8001a7a:	f001 feed 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	21f0      	movs	r1, #240	@ 0xf0
 8001a82:	481b      	ldr	r0, [pc, #108]	@ (8001af0 <MX_GPIO_Init+0xa8>)
 8001a84:	f001 fee8 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a88:	237f      	movs	r3, #127	@ 0x7f
 8001a8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa0:	f001 fd5a 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001aa4:	23f6      	movs	r3, #246	@ 0xf6
 8001aa6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <MX_GPIO_Init+0xa8>)
 8001aba:	f001 fd4d 	bl	8003558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ac2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001ac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <MX_GPIO_Init+0xa8>)
 8001ad2:	f001 fd41 	bl	8003558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2006      	movs	r0, #6
 8001adc:	f001 fb2f 	bl	800313e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ae0:	2006      	movs	r0, #6
 8001ae2:	f001 fb46 	bl	8003172 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	48000400 	.word	0x48000400

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <LL_AHB2_GRP1_EnableClock>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4013      	ands	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b090      	sub	sp, #64	@ 0x40
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2224      	movs	r2, #36	@ 0x24
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f005 fce7 	bl	8007598 <memset>
  if(hadc->Instance==ADC1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <HAL_ADC_MspInit+0x80>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d123      	bne.n	8001c1c <HAL_ADC_MspInit+0x78>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bd8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001bda:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001bde:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 f9eb 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001bf0:	f7ff ff80 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001bf8:	f7ff ff82 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ff7f 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c06:	2303      	movs	r3, #3
 8001c08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c18:	f001 fc9e 	bl	8003558 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3740      	adds	r7, #64	@ 0x40
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	50040000 	.word	0x50040000

08001c28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	@ 0x40
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	2224      	movs	r2, #36	@ 0x24
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fca5 	bl	8007598 <memset>
  if(hi2c->Instance==I2C1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a17      	ldr	r2, [pc, #92]	@ (8001cb0 <HAL_I2C_MspInit+0x88>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d126      	bne.n	8001ca6 <HAL_I2C_MspInit+0x7e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c5c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001c60:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 f9aa 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c72:	f7ff ff3f 	bl	8001af4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff ff42 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c82:	2312      	movs	r3, #18
 8001c84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c8e:	2304      	movs	r3, #4
 8001c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4806      	ldr	r0, [pc, #24]	@ (8001cb4 <HAL_I2C_MspInit+0x8c>)
 8001c9a:	f001 fc5d 	bl	8003558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c9e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001ca2:	f7ff ff46 	bl	8001b32 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3740      	adds	r7, #64	@ 0x40
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	48000400 	.word	0x48000400

08001cb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc8:	d103      	bne.n	8001cd2 <HAL_TIM_Base_MspInit+0x1a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff ff31 	bl	8001b32 <LL_APB1_GRP1_EnableClock>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001cd0:	e022      	b.n	8001d18 <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM16)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10c      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cdc:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001ce0:	f7ff ff40 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2019      	movs	r0, #25
 8001cea:	f001 fa28 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cee:	2019      	movs	r0, #25
 8001cf0:	f001 fa3f 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8001cf4:	e010      	b.n	8001d18 <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM17)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_TIM_Base_MspInit+0x6c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10b      	bne.n	8001d18 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d00:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001d04:	f7ff ff2e 	bl	8001b64 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	201a      	movs	r0, #26
 8001d0e:	f001 fa16 	bl	800313e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d12:	201a      	movs	r0, #26
 8001d14:	f001 fa2d 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40014400 	.word	0x40014400
 8001d24:	40014800 	.word	0x40014800

08001d28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b090      	sub	sp, #64	@ 0x40
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2224      	movs	r2, #36	@ 0x24
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 fc25 	bl	8007598 <memset>
  if(huart->Instance==USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_UART_MspInit+0x88>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d126      	bne.n	8001da6 <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d60:	f107 0308 	add.w	r3, r7, #8
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 f92b 	bl	8004fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d70:	f7ff fec0 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d74:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d78:	f7ff fef4 	bl	8001b64 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff febf 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d94:	2307      	movs	r3, #7
 8001d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f001 fbd9 	bl	8003558 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001da6:	bf00      	nop
 8001da8:	3740      	adds	r7, #64	@ 0x40
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40013800 	.word	0x40013800

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <NMI_Handler+0x4>

08001dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e0a:	f000 f9cf 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f001 fd36 	bl	8003888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e24:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e26:	f003 fa4b 	bl	80052c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  ap_tim16_callback();
 8001e2a:	f7ff f805 	bl	8000e38 <ap_tim16_callback>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200005d0 	.word	0x200005d0

08001e38 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001e3c:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001e3e:	f003 fa3f 	bl	80052c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  ap_tim17_callback();
 8001e42:	f7ff f813 	bl	8000e6c <ap_tim17_callback>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000061c 	.word	0x2000061c

08001e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_kill>:

int _kill(int pid, int sig)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e6a:	f005 fbe7 	bl	800763c <__errno>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2216      	movs	r2, #22
 8001e72:	601a      	str	r2, [r3, #0]
  return -1;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_exit>:

void _exit (int status)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ffe7 	bl	8001e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e92:	bf00      	nop
 8001e94:	e7fd      	b.n	8001e92 <_exit+0x12>

08001e96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e00a      	b.n	8001ebe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ea8:	f3af 8000 	nop.w
 8001eac:	4601      	mov	r1, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	60ba      	str	r2, [r7, #8]
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	dbf0      	blt.n	8001ea8 <_read+0x12>
  }

  return len;
 8001ec6:	687b      	ldr	r3, [r7, #4]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e009      	b.n	8001ef6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf1      	blt.n	8001ee2 <_write+0x12>
  }
  return len;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_close>:

int _close(int file)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f30:	605a      	str	r2, [r3, #4]
  return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_isatty>:

int _isatty(int file)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f005 fb4c 	bl	800763c <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20010000 	.word	0x20010000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	200006fc 	.word	0x200006fc
 8001fd8:	20000868 	.word	0x20000868

08001fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <SystemInit+0x90>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	4a21      	ldr	r2, [pc, #132]	@ (800206c <SystemInit+0x90>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002004:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002008:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002014:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <SystemInit+0x94>)
 8002016:	4013      	ands	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002026:	f023 0305 	bic.w	r3, r3, #5
 800202a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002046:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <SystemInit+0x98>)
 8002048:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00
 8002070:	faf6fefb 	.word	0xfaf6fefb
 8002074:	22041000 	.word	0x22041000

08002078 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002078:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207c:	3304      	adds	r3, #4

0800207e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002080:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002082:	d3f9      	bcc.n	8002078 <CopyDataInit>
  bx lr
 8002084:	4770      	bx	lr

08002086 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002086:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002088:	3004      	adds	r0, #4

0800208a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800208a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800208c:	d3fb      	bcc.n	8002086 <FillZerobss>
  bx lr
 800208e:	4770      	bx	lr

08002090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002090:	480f      	ldr	r0, [pc, #60]	@ (80020d0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002092:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002094:	f7ff ffa2 	bl	8001fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002098:	480e      	ldr	r0, [pc, #56]	@ (80020d4 <LoopForever+0x8>)
 800209a:	490f      	ldr	r1, [pc, #60]	@ (80020d8 <LoopForever+0xc>)
 800209c:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <LoopForever+0x10>)
 800209e:	2300      	movs	r3, #0
 80020a0:	f7ff ffed 	bl	800207e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020a4:	480e      	ldr	r0, [pc, #56]	@ (80020e0 <LoopForever+0x14>)
 80020a6:	490f      	ldr	r1, [pc, #60]	@ (80020e4 <LoopForever+0x18>)
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <LoopForever+0x1c>)
 80020aa:	2300      	movs	r3, #0
 80020ac:	f7ff ffe7 	bl	800207e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80020b0:	480e      	ldr	r0, [pc, #56]	@ (80020ec <LoopForever+0x20>)
 80020b2:	490f      	ldr	r1, [pc, #60]	@ (80020f0 <LoopForever+0x24>)
 80020b4:	2300      	movs	r3, #0
 80020b6:	f7ff ffe8 	bl	800208a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80020ba:	4809      	ldr	r0, [pc, #36]	@ (80020e0 <LoopForever+0x14>)
 80020bc:	4909      	ldr	r1, [pc, #36]	@ (80020e4 <LoopForever+0x18>)
 80020be:	2300      	movs	r3, #0
 80020c0:	f7ff ffe3 	bl	800208a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020c4:	f005 fac0 	bl	8007648 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020c8:	f7ff fac5 	bl	8001656 <main>

080020cc <LoopForever>:

LoopForever:
  b LoopForever
 80020cc:	e7fe      	b.n	80020cc <LoopForever>
 80020ce:	0000      	.short	0x0000
  ldr   r0, =_estack
 80020d0:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 80020d4:	20000008 	.word	0x20000008
 80020d8:	200002ec 	.word	0x200002ec
 80020dc:	08009e94 	.word	0x08009e94
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80020e0:	20030000 	.word	0x20030000
 80020e4:	20030000 	.word	0x20030000
 80020e8:	0800a178 	.word	0x0800a178
  INIT_BSS _sbss, _ebss
 80020ec:	200002f0 	.word	0x200002f0
 80020f0:	20000868 	.word	0x20000868

080020f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC1_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <HAL_Init+0x3c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_Init+0x3c>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210e:	2003      	movs	r0, #3
 8002110:	f001 f80a 	bl	8003128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002114:	200f      	movs	r0, #15
 8002116:	f000 f80f 	bl	8002138 <HAL_InitTick>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	71fb      	strb	r3, [r7, #7]
 8002124:	e001      	b.n	800212a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002126:	f7ff fd36 	bl	8001b96 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212a:	79fb      	ldrb	r3, [r7, #7]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	58004000 	.word	0x58004000

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002144:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <HAL_InitTick+0x6c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d024      	beq.n	8002196 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800214c:	f002 fd76 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b14      	ldr	r3, [pc, #80]	@ (80021a4 <HAL_InitTick+0x6c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4619      	mov	r1, r3
 8002158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	4618      	mov	r0, r3
 8002166:	f001 f812 	bl	800318e <HAL_SYSTICK_Config>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10f      	bne.n	8002190 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	d809      	bhi.n	800218a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002176:	2200      	movs	r2, #0
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	f04f 30ff 	mov.w	r0, #4294967295
 800217e:	f000 ffde 	bl	800313e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <HAL_InitTick+0x70>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	e007      	b.n	800219a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	e004      	b.n	800219a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000044 	.word	0x20000044
 80021a8:	20000040 	.word	0x20000040

080021ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000044 	.word	0x20000044
 80021d0:	20000700 	.word	0x20000700

080021d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000700 	.word	0x20000700

080021ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_GetTickPrio+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000040 	.word	0x20000040

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffe2 	bl	80021d4 <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221e:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffd2 	bl	80021d4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000044 	.word	0x20000044

0800224c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3360      	adds	r3, #96	@ 0x60
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <LL_ADC_SetOffset+0x44>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	03fff000 	.word	0x03fff000

080022fc <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3360      	adds	r3, #96	@ 0x60
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3360      	adds	r3, #96	@ 0x60
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800235e:	b480      	push	{r7}
 8002360:	b087      	sub	sp, #28
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3330      	adds	r3, #48	@ 0x30
 800236e:	461a      	mov	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	211f      	movs	r1, #31
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	401a      	ands	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	f003 011f 	and.w	r1, r3, #31
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3314      	adds	r3, #20
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	0e5b      	lsrs	r3, r3, #25
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	0d1b      	lsrs	r3, r3, #20
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2107      	movs	r1, #7
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	401a      	ands	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	0d1b      	lsrs	r3, r3, #20
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	431a      	orrs	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0318 	and.w	r3, r3, #24
 800242e:	4908      	ldr	r1, [pc, #32]	@ (8002450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002430:	40d9      	lsrs	r1, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	400b      	ands	r3, r1
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	431a      	orrs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	0007ffff 	.word	0x0007ffff

08002454 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002464:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6093      	str	r3, [r2, #8]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800248c:	d101      	bne.n	8002492 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024dc:	d101      	bne.n	80024e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <LL_ADC_IsEnabled+0x18>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <LL_ADC_IsEnabled+0x1a>
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d101      	bne.n	800252e <LL_ADC_REG_IsConversionOngoing+0x18>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d101      	bne.n	8002554 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e12e      	b.n	80027e0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fb07 	bl	8001ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff65 	bl	8002478 <LL_ADC_IsDeepPowerDownEnabled>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff4b 	bl	8002454 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff80 	bl	80024c8 <LL_ADC_IsInternalRegulatorEnabled>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff64 	bl	80024a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d8:	4b83      	ldr	r3, [pc, #524]	@ (80027e8 <HAL_ADC_Init+0x284>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	4a83      	ldr	r2, [pc, #524]	@ (80027ec <HAL_ADC_Init+0x288>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	3301      	adds	r3, #1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff62 	bl	80024c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff73 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002630:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80c7 	bne.w	80027ce <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 80c3 	bne.w	80027ce <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002650:	f043 0202 	orr.w	r2, r3, #2
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff47 	bl	80024f0 <LL_ADC_IsEnabled>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10b      	bne.n	8002680 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002668:	4861      	ldr	r0, [pc, #388]	@ (80027f0 <HAL_ADC_Init+0x28c>)
 800266a:	f7ff ff41 	bl	80024f0 <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	485e      	ldr	r0, [pc, #376]	@ (80027f4 <HAL_ADC_Init+0x290>)
 800267c:	f7ff fde6 	bl	800224c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e5b      	ldrb	r3, [r3, #25]
 8002684:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800268a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002690:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002696:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80026a0:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d106      	bne.n	80026c0 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	3b01      	subs	r3, #1
 80026b8:	045b      	lsls	r3, r3, #17
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <HAL_ADC_Init+0x294>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	69b9      	ldr	r1, [r7, #24]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff0e 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 80026fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff1b 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8002706:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d13d      	bne.n	800278a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d13a      	bne.n	800278a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002718:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002720:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002730:	f023 0302 	bic.w	r3, r3, #2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	69b9      	ldr	r1, [r7, #24]
 800273a:	430b      	orrs	r3, r1
 800273c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002744:	2b01      	cmp	r3, #1
 8002746:	d118      	bne.n	800277a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800276a:	430a      	orrs	r2, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	611a      	str	r2, [r3, #16]
 8002778:	e007      	b.n	800278a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10c      	bne.n	80027ac <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	f023 010f 	bic.w	r1, r3, #15
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80027aa:	e007      	b.n	80027bc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 020f 	bic.w	r2, r2, #15
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f023 0303 	bic.w	r3, r3, #3
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80027cc:	e007      	b.n	80027de <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	f043 0210 	orr.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027de:	7ffb      	ldrb	r3, [r7, #31]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000003c 	.word	0x2000003c
 80027ec:	053e2d63 	.word	0x053e2d63
 80027f0:	50040000 	.word	0x50040000
 80027f4:	50040300 	.word	0x50040300
 80027f8:	fff0c007 	.word	0xfff0c007

080027fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_ADC_ConfigChannel+0x22>
 800281a:	2302      	movs	r3, #2
 800281c:	e39f      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x762>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fe73 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 8384 	bne.w	8002f40 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	f7ff fd8a 	bl	800235e <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fe61 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002854:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fe6d 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8002862:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002866:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800286a:	2b00      	cmp	r3, #0
 800286c:	f040 81a6 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 81a1 	bne.w	8002bbc <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	461a      	mov	r2, r3
 8002888:	f7ff fd95 	bl	80023b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d00a      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6919      	ldr	r1, [r3, #16]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028be:	f7ff fcf9 	bl	80022b4 <LL_ADC_SetOffset>
 80028c2:	e17b      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fd16 	bl	80022fc <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0xf4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fd0b 	bl	80022fc <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 021f 	and.w	r2, r3, #31
 80028ee:	e01e      	b.n	800292e <HAL_ADC_ConfigChannel+0x132>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fd00 	bl	80022fc <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800290e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002912:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e004      	b.n	800292c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x14a>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	e018      	b.n	8002978 <HAL_ADC_ConfigChannel+0x17c>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800295a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800295e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e004      	b.n	8002978 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800296e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	429a      	cmp	r2, r3
 800297a:	d106      	bne.n	800298a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fccf 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fcb3 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x1ba>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fca8 	bl	80022fc <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	0e9b      	lsrs	r3, r3, #26
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	e01e      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1f8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fc9d 	bl	80022fc <LL_ADC_GetOffsetChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e004      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80029e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x210>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	e018      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x242>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d106      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc6c 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2102      	movs	r1, #2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fc50 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x280>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fc45 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 021f 	and.w	r2, r3, #31
 8002a7a:	e01e      	b.n	8002aba <HAL_ADC_ConfigChannel+0x2be>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2102      	movs	r1, #2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fc3a 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e004      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x2d6>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	e016      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x304>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002af2:	2320      	movs	r3, #32
 8002af4:	e004      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d106      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fc0b 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2103      	movs	r1, #3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fbef 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x342>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2103      	movs	r1, #3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fbe4 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	0e9b      	lsrs	r3, r3, #26
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	e017      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x372>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2103      	movs	r1, #3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fbd9 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b58:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x38a>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	e011      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3ae>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e003      	b.n	8002baa <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d106      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2103      	movs	r1, #3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fbb6 	bl	8002328 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc95 	bl	80024f0 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 81c2 	bne.w	8002f52 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff fc16 	bl	800240c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a8e      	ldr	r2, [pc, #568]	@ (8002e20 <HAL_ADC_ConfigChannel+0x624>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	f040 8130 	bne.w	8002e4c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10b      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x418>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2b09      	cmp	r3, #9
 8002c0a:	bf94      	ite	ls
 8002c0c:	2301      	movls	r3, #1
 8002c0e:	2300      	movhi	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e019      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x44c>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002c30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	bf94      	ite	ls
 8002c42:	2301      	movls	r3, #1
 8002c44:	2300      	movhi	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d079      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d107      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x46c>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c66:	e015      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x498>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e003      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	069b      	lsls	r3, r3, #26
 8002c90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x4b8>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	e017      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x4e8>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2101      	movs	r1, #1
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	ea42 0103 	orr.w	r1, r2, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x50e>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	051b      	lsls	r3, r3, #20
 8002d08:	e018      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x540>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e003      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f003 021f 	and.w	r2, r3, #31
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	e080      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x560>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0e9b      	lsrs	r3, r3, #26
 8002d52:	3301      	adds	r3, #1
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d5a:	e015      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x58c>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e003      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	069b      	lsls	r3, r3, #26
 8002d84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x5ac>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	e017      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x5dc>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	61fb      	str	r3, [r7, #28]
  return result;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e003      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10d      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x608>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b1e      	subs	r3, #30
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	e01d      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x644>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	613b      	str	r3, [r7, #16]
  return result;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e005      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x630>
 8002e20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	051b      	lsls	r3, r3, #20
 8002e3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e40:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7ff fab5 	bl	80023b6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b45      	ldr	r3, [pc, #276]	@ (8002f68 <HAL_ADC_ConfigChannel+0x76c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d07c      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e58:	4844      	ldr	r0, [pc, #272]	@ (8002f6c <HAL_ADC_ConfigChannel+0x770>)
 8002e5a:	f7ff fa1d 	bl	8002298 <LL_ADC_GetCommonPathInternalCh>
 8002e5e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e62:	4843      	ldr	r0, [pc, #268]	@ (8002f70 <HAL_ADC_ConfigChannel+0x774>)
 8002e64:	f7ff fb44 	bl	80024f0 <LL_ADC_IsEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d15e      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a40      	ldr	r2, [pc, #256]	@ (8002f74 <HAL_ADC_ConfigChannel+0x778>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d127      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x6cc>
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d121      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a39      	ldr	r2, [pc, #228]	@ (8002f70 <HAL_ADC_ConfigChannel+0x774>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d161      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e96:	4619      	mov	r1, r3
 8002e98:	4834      	ldr	r0, [pc, #208]	@ (8002f6c <HAL_ADC_ConfigChannel+0x770>)
 8002e9a:	f7ff f9ea 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9e:	4b36      	ldr	r3, [pc, #216]	@ (8002f78 <HAL_ADC_ConfigChannel+0x77c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	4a35      	ldr	r2, [pc, #212]	@ (8002f7c <HAL_ADC_ConfigChannel+0x780>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f9      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec6:	e044      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8002f80 <HAL_ADC_ConfigChannel+0x784>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d113      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x6fe>
 8002ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a23      	ldr	r2, [pc, #140]	@ (8002f70 <HAL_ADC_ConfigChannel+0x774>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d134      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	481e      	ldr	r0, [pc, #120]	@ (8002f6c <HAL_ADC_ConfigChannel+0x770>)
 8002ef4:	f7ff f9bd 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ef8:	e02b      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <HAL_ADC_ConfigChannel+0x788>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d126      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d120      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <HAL_ADC_ConfigChannel+0x774>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d11b      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f22:	4619      	mov	r1, r3
 8002f24:	4811      	ldr	r0, [pc, #68]	@ (8002f6c <HAL_ADC_ConfigChannel+0x770>)
 8002f26:	f7ff f9a4 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
 8002f2a:	e012      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f3e:	e008      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	f043 0220 	orr.w	r2, r3, #32
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002f5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	37d8      	adds	r7, #216	@ 0xd8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	80080000 	.word	0x80080000
 8002f6c:	50040300 	.word	0x50040300
 8002f70:	50040000 	.word	0x50040000
 8002f74:	c7520000 	.word	0xc7520000
 8002f78:	2000003c 	.word	0x2000003c
 8002f7c:	053e2d63 	.word	0x053e2d63
 8002f80:	cb840000 	.word	0xcb840000
 8002f84:	80000001 	.word	0x80000001

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4907      	ldr	r1, [pc, #28]	@ (8003024 <__NVIC_EnableIRQ+0x38>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	@ (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	@ (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f4:	d301      	bcc.n	80030fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00f      	b.n	800311a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <SysTick_Config+0x40>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003102:	210f      	movs	r1, #15
 8003104:	f04f 30ff 	mov.w	r0, #4294967295
 8003108:	f7ff ff8e 	bl	8003028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <SysTick_Config+0x40>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003112:	4b04      	ldr	r3, [pc, #16]	@ (8003124 <SysTick_Config+0x40>)
 8003114:	2207      	movs	r2, #7
 8003116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	e000e010 	.word	0xe000e010

08003128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ff29 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff40 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff90 	bl	800307c <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5f 	bl	8003028 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff33 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa4 	bl	80030e4 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003228 <HAL_FLASH_Program+0x80>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_FLASH_Program+0x1a>
 80031be:	2302      	movs	r3, #2
 80031c0:	e02d      	b.n	800321e <HAL_FLASH_Program+0x76>
 80031c2:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <HAL_FLASH_Program+0x80>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031c8:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <HAL_FLASH_Program+0x80>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031d2:	f000 f869 	bl	80032a8 <FLASH_WaitForLastOperation>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11a      	bne.n	8003216 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80031e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f000 f8ca 	bl	8003384 <FLASH_Program_DoubleWord>
 80031f0:	e004      	b.n	80031fc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	68b8      	ldr	r0, [r7, #8]
 80031f8:	f006 faaa 	bl	8009750 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003200:	f000 f852 	bl	80032a8 <FLASH_WaitForLastOperation>
 8003204:	4603      	mov	r3, r0
 8003206:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_FLASH_Program+0x84>)
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	4906      	ldr	r1, [pc, #24]	@ (800322c <HAL_FLASH_Program+0x84>)
 8003212:	4013      	ands	r3, r2
 8003214:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003216:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <HAL_FLASH_Program+0x80>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000704 	.word	0x20000704
 800322c:	58004000 	.word	0x58004000

08003230 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800323a:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_FLASH_Unlock+0x38>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0b      	bge.n	800325a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_FLASH_Unlock+0x38>)
 8003244:	4a09      	ldr	r2, [pc, #36]	@ (800326c <HAL_FLASH_Unlock+0x3c>)
 8003246:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003248:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <HAL_FLASH_Unlock+0x38>)
 800324a:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <HAL_FLASH_Unlock+0x40>)
 800324c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_FLASH_Unlock+0x38>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da01      	bge.n	800325a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800325a:	79fb      	ldrb	r3, [r7, #7]
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	58004000 	.word	0x58004000
 800326c:	45670123 	.word	0x45670123
 8003270:	cdef89ab 	.word	0xcdef89ab

08003274 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_FLASH_Lock+0x30>)
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4a08      	ldr	r2, [pc, #32]	@ (80032a4 <HAL_FLASH_Lock+0x30>)
 8003284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003288:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_FLASH_Lock+0x30>)
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db01      	blt.n	8003296 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003296:	79fb      	ldrb	r3, [r7, #7]
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	58004000 	.word	0x58004000

080032a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80032b0:	f7fe ff90 	bl	80021d4 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80032b6:	e009      	b.n	80032cc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80032b8:	f7fe ff8c 	bl	80021d4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d801      	bhi.n	80032cc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e053      	b.n	8003374 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80032cc:	4b2b      	ldr	r3, [pc, #172]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d0ee      	beq.n	80032b8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80032da:	4b28      	ldr	r3, [pc, #160]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80032ea:	4b24      	ldr	r3, [pc, #144]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80032fa:	4b20      	ldr	r3, [pc, #128]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 80032fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003300:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003308:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331a:	d307      	bcc.n	800332c <FLASH_WaitForLastOperation+0x84>
 800331c:	4b17      	ldr	r3, [pc, #92]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003326:	4915      	ldr	r1, [pc, #84]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 8003328:	4313      	orrs	r3, r2
 800332a:	618b      	str	r3, [r1, #24]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <FLASH_WaitForLastOperation+0x98>
 8003336:	4a11      	ldr	r2, [pc, #68]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800333e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00e      	beq.n	8003364 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003346:	4a0e      	ldr	r2, [pc, #56]	@ (8003380 <FLASH_WaitForLastOperation+0xd8>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e011      	b.n	8003374 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003350:	f7fe ff40 	bl	80021d4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	429a      	cmp	r2, r3
 800335e:	d801      	bhi.n	8003364 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e007      	b.n	8003374 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <FLASH_WaitForLastOperation+0xd4>)
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003370:	d0ee      	beq.n	8003350 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	58004000 	.word	0x58004000
 8003380:	20000704 	.word	0x20000704

08003384 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <FLASH_Program_DoubleWord+0x48>)
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <FLASH_Program_DoubleWord+0x48>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80033a2:	f3bf 8f6f 	isb	sy
}
 80033a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80033a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	000a      	movs	r2, r1
 80033b6:	2300      	movs	r3, #0
 80033b8:	68f9      	ldr	r1, [r7, #12]
 80033ba:	3104      	adds	r1, #4
 80033bc:	4613      	mov	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	58004000 	.word	0x58004000

080033d0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033da:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_FLASHEx_Erase+0x9c>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_FLASHEx_Erase+0x16>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e03d      	b.n	8003462 <HAL_FLASHEx_Erase+0x92>
 80033e6:	4b21      	ldr	r3, [pc, #132]	@ (800346c <HAL_FLASHEx_Erase+0x9c>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033ec:	4b1f      	ldr	r3, [pc, #124]	@ (800346c <HAL_FLASHEx_Erase+0x9c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033f6:	f7ff ff57 	bl	80032a8 <FLASH_WaitForLastOperation>
 80033fa:	4603      	mov	r3, r0
 80033fc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12a      	bne.n	800345a <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d124      	bne.n	8003456 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f04f 32ff 	mov.w	r2, #4294967295
 8003412:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	e012      	b.n	8003442 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800341c:	68b8      	ldr	r0, [r7, #8]
 800341e:	f000 f827 	bl	8003470 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003422:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003426:	f7ff ff3f 	bl	80032a8 <FLASH_WaitForLastOperation>
 800342a:	4603      	mov	r3, r0
 800342c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	601a      	str	r2, [r3, #0]
          break;
 800343a:	e00a      	b.n	8003452 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d3e4      	bcc.n	800341c <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8003452:	f000 f86f 	bl	8003534 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003456:	f000 f825 	bl	80034a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <HAL_FLASHEx_Erase+0x9c>)
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]

  return status;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000704 	.word	0x20000704

08003470 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <FLASH_PageErase+0x30>)
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4313      	orrs	r3, r2
 8003486:	4a06      	ldr	r2, [pc, #24]	@ (80034a0 <FLASH_PageErase+0x30>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	6153      	str	r3, [r2, #20]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	58004000 	.word	0x58004000

080034a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80034a8:	4b21      	ldr	r3, [pc, #132]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034b4:	d117      	bne.n	80034e6 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80034b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034c0:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80034c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b18      	ldr	r3, [pc, #96]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034d8:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034da:	4b15      	ldr	r3, [pc, #84]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a14      	ldr	r2, [pc, #80]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034e4:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80034e6:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f2:	d117      	bne.n	8003524 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80034f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 80034fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003500:	4b0b      	ldr	r3, [pc, #44]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 8003506:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a07      	ldr	r2, [pc, #28]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 8003512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003516:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <FLASH_FlushCaches+0x8c>)
 800351e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003522:	6013      	str	r3, [r2, #0]
  }
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	58004000 	.word	0x58004000

08003534 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003538:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <FLASH_AcknowledgePageErase+0x20>)
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <FLASH_AcknowledgePageErase+0x20>)
 800353e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003542:	f023 0302 	bic.w	r3, r3, #2
 8003546:	6153      	str	r3, [r2, #20]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	58004000 	.word	0x58004000

08003558 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003566:	e146      	b.n	80037f6 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2101      	movs	r1, #1
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fa01 f303 	lsl.w	r3, r1, r3
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8138 	beq.w	80037f0 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d005      	beq.n	8003598 <HAL_GPIO_Init+0x40>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d130      	bne.n	80035fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	2203      	movs	r2, #3
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ce:	2201      	movs	r2, #1
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0201 	and.w	r2, r3, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b03      	cmp	r3, #3
 8003604:	d017      	beq.n	8003636 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	2203      	movs	r2, #3
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d123      	bne.n	800368a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	08da      	lsrs	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3208      	adds	r2, #8
 800364a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	08da      	lsrs	r2, r3, #3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3208      	adds	r2, #8
 8003684:	6939      	ldr	r1, [r7, #16]
 8003686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	2203      	movs	r2, #3
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f003 0203 	and.w	r2, r3, #3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8092 	beq.w	80037f0 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80036cc:	4a51      	ldr	r2, [pc, #324]	@ (8003814 <HAL_GPIO_Init+0x2bc>)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	3302      	adds	r3, #2
 80036d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	220f      	movs	r2, #15
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036f6:	d013      	beq.n	8003720 <HAL_GPIO_Init+0x1c8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a47      	ldr	r2, [pc, #284]	@ (8003818 <HAL_GPIO_Init+0x2c0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00d      	beq.n	800371c <HAL_GPIO_Init+0x1c4>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a46      	ldr	r2, [pc, #280]	@ (800381c <HAL_GPIO_Init+0x2c4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <HAL_GPIO_Init+0x1c0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a45      	ldr	r2, [pc, #276]	@ (8003820 <HAL_GPIO_Init+0x2c8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_GPIO_Init+0x1bc>
 8003710:	2304      	movs	r3, #4
 8003712:	e006      	b.n	8003722 <HAL_GPIO_Init+0x1ca>
 8003714:	2307      	movs	r3, #7
 8003716:	e004      	b.n	8003722 <HAL_GPIO_Init+0x1ca>
 8003718:	2302      	movs	r3, #2
 800371a:	e002      	b.n	8003722 <HAL_GPIO_Init+0x1ca>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_GPIO_Init+0x1ca>
 8003720:	2300      	movs	r3, #0
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	f002 0203 	and.w	r2, r2, #3
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	4093      	lsls	r3, r2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003732:	4938      	ldr	r1, [pc, #224]	@ (8003814 <HAL_GPIO_Init+0x2bc>)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3302      	adds	r3, #2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003740:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003764:	4a2f      	ldr	r2, [pc, #188]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800376a:	4b2e      	ldr	r3, [pc, #184]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800378e:	4a25      	ldr	r2, [pc, #148]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003794:	4b23      	ldr	r3, [pc, #140]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 80037c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003824 <HAL_GPIO_Init+0x2cc>)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	3301      	adds	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	f47f aeb1 	bne.w	8003568 <HAL_GPIO_Init+0x10>
  }
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40010000 	.word	0x40010000
 8003818:	48000400 	.word	0x48000400
 800381c:	48000800 	.word	0x48000800
 8003820:	48001000 	.word	0x48001000
 8003824:	58000800 	.word	0x58000800

08003828 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
 8003844:	e001      	b.n	800384a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003874:	e002      	b.n	800387c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003892:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389e:	4a05      	ldr	r2, [pc, #20]	@ (80038b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fa96 	bl	8000dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	58000800 	.word	0x58000800

080038b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e08d      	b.n	80039e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe f9a2 	bl	8001c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	@ 0x24
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003908:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003918:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	e006      	b.n	8003940 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800393e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d108      	bne.n	800395a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	e007      	b.n	800396a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003968:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800397c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800398c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69d9      	ldr	r1, [r3, #28]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d138      	bne.n	8003a76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e032      	b.n	8003a78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2224      	movs	r2, #36	@ 0x24
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6819      	ldr	r1, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e000      	b.n	8003a78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a76:	2302      	movs	r3, #2
  }
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d139      	bne.n	8003b0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e033      	b.n	8003b10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	@ 0x24
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a04      	ldr	r2, [pc, #16]	@ (8003b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	58000400 	.word	0x58000400

08003b3c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b4e:	d101      	bne.n	8003b54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bae:	d101      	bne.n	8003bb4 <LL_RCC_HSE_IsReady+0x18>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <LL_RCC_HSE_IsReady+0x1a>
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd2:	6013      	str	r3, [r2, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf0:	6013      	str	r3, [r2, #0]
}
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c0e:	d101      	bne.n	8003c14 <LL_RCC_HSI_IsReady+0x18>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <LL_RCC_HSI_IsReady+0x1a>
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003c62:	bf00      	nop
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d101      	bne.n	8003ca6 <LL_RCC_HSI48_IsReady+0x18>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <LL_RCC_HSI48_IsReady+0x1a>
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d06:	f043 0304 	orr.w	r3, r3, #4
 8003d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d101      	bne.n	8003d52 <LL_RCC_LSE_IsReady+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_RCC_LSE_IsReady+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003da2:	b480      	push	{r7}
 8003da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d101      	bne.n	8003dba <LL_RCC_LSI1_IsReady+0x18>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <LL_RCC_LSI1_IsReady+0x1a>
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df8:	f023 0304 	bic.w	r3, r3, #4
 8003dfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d101      	bne.n	8003e22 <LL_RCC_LSI2_IsReady+0x18>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_RCC_LSI2_IsReady+0x1a>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d101      	bne.n	8003eae <LL_RCC_MSI_IsReady+0x16>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_RCC_MSI_IsReady+0x18>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ecc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003ef8:	d901      	bls.n	8003efe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003efa:	23b0      	movs	r3, #176	@ 0xb0
 8003efc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003efe:	687b      	ldr	r3, [r7, #4]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 0203 	bic.w	r2, r3, #3
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003faa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003fda:	f023 020f 	bic.w	r2, r3, #15
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800404c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004056:	4618      	mov	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004068:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800408a:	4618      	mov	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c4:	6013      	str	r3, [r2, #0]
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040e2:	d101      	bne.n	80040e8 <LL_RCC_PLL_IsReady+0x18>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <LL_RCC_PLL_IsReady+0x1a>
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0303 	and.w	r3, r3, #3
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004168:	d101      	bne.n	800416e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800418e:	d101      	bne.n	8004194 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b4:	d101      	bne.n	80041ba <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80041c6:	b480      	push	{r7}
 80041c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041d8:	d101      	bne.n	80041de <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041fc:	d101      	bne.n	8004202 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b08d      	sub	sp, #52	@ 0x34
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e35c      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 808d 	beq.w	800434a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004230:	f7ff fe95 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004234:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004236:	f7ff ff82 	bl	800413e <LL_RCC_PLL_GetMainSource>
 800423a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800423c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_RCC_OscConfig+0x3e>
 8004242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d147      	bne.n	80042d8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	2b01      	cmp	r3, #1
 800424c:	d144      	bne.n	80042d8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e340      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800425e:	f7ff fe40 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004262:	4603      	mov	r3, r0
 8004264:	429c      	cmp	r4, r3
 8004266:	d914      	bls.n	8004292 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fd0f 	bl	8004c90 <RCC_SetFlashLatencyFromMSIRange>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e32f      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fe1a 	bl	8003eba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fe3e 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>
 8004290:	e013      	b.n	80042ba <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fe0f 	bl	8003eba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fe33 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fcf0 	bl	8004c90 <RCC_SetFlashLatencyFromMSIRange>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e310      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80042ba:	f000 fcbf 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 80042be:	4603      	mov	r3, r0
 80042c0:	4aa4      	ldr	r2, [pc, #656]	@ (8004554 <HAL_RCC_OscConfig+0x344>)
 80042c2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042c4:	4ba4      	ldr	r3, [pc, #656]	@ (8004558 <HAL_RCC_OscConfig+0x348>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fd ff35 	bl	8002138 <HAL_InitTick>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d039      	beq.n	8004348 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e301      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01e      	beq.n	800431e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042e0:	f7ff fdbc 	bl	8003e5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e4:	f7fd ff76 	bl	80021d4 <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ec:	f7fd ff72 	bl	80021d4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e2ee      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 80042fe:	f7ff fdcb 	bl	8003e98 <LL_RCC_MSI_IsReady>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f1      	beq.n	80042ec <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fdd4 	bl	8003eba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fdf8 	bl	8003f0c <LL_RCC_MSI_SetCalibTrimming>
 800431c:	e015      	b.n	800434a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800431e:	f7ff fdac 	bl	8003e7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004322:	f7fd ff57 	bl	80021d4 <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800432a:	f7fd ff53 	bl	80021d4 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e2cf      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 800433c:	f7ff fdac 	bl	8003e98 <LL_RCC_MSI_IsReady>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f1      	bne.n	800432a <HAL_RCC_OscConfig+0x11a>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004348:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d047      	beq.n	80043e6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004356:	f7ff fe02 	bl	8003f5e <LL_RCC_GetSysClkSource>
 800435a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800435c:	f7ff feef 	bl	800413e <LL_RCC_PLL_GetMainSource>
 8004360:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x164>
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d108      	bne.n	8004380 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d134      	bne.n	80043e6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e2ad      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004388:	d102      	bne.n	8004390 <HAL_RCC_OscConfig+0x180>
 800438a:	f7ff fbe9 	bl	8003b60 <LL_RCC_HSE_Enable>
 800438e:	e001      	b.n	8004394 <HAL_RCC_OscConfig+0x184>
 8004390:	f7ff fbf5 	bl	8003b7e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d012      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd ff1a 	bl	80021d4 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a4:	f7fd ff16 	bl	80021d4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	@ 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e292      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 80043b6:	f7ff fbf1 	bl	8003b9c <LL_RCC_HSE_IsReady>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f1      	beq.n	80043a4 <HAL_RCC_OscConfig+0x194>
 80043c0:	e011      	b.n	80043e6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fd ff07 	bl	80021d4 <HAL_GetTick>
 80043c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ca:	f7fd ff03 	bl	80021d4 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b64      	cmp	r3, #100	@ 0x64
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e27f      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 80043dc:	f7ff fbde 	bl	8003b9c <LL_RCC_HSE_IsReady>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f1      	bne.n	80043ca <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d04c      	beq.n	800448c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f2:	f7ff fdb4 	bl	8003f5e <LL_RCC_GetSysClkSource>
 80043f6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f8:	f7ff fea1 	bl	800413e <LL_RCC_PLL_GetMainSource>
 80043fc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d005      	beq.n	8004410 <HAL_RCC_OscConfig+0x200>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d10e      	bne.n	8004428 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e25f      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fbfd 	bl	8003c20 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004426:	e031      	b.n	800448c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d019      	beq.n	8004464 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	f7ff fbc6 	bl	8003bc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fece 	bl	80021d4 <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7fd feca 	bl	80021d4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e246      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 800444e:	f7ff fbd5 	bl	8003bfc <LL_RCC_HSI_IsReady>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f1      	beq.n	800443c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fbdf 	bl	8003c20 <LL_RCC_HSI_SetCalibTrimming>
 8004462:	e013      	b.n	800448c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004464:	f7ff fbbb 	bl	8003bde <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fd feb4 	bl	80021d4 <HAL_GetTick>
 800446c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004470:	f7fd feb0 	bl	80021d4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e22c      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004482:	f7ff fbbb 	bl	8003bfc <LL_RCC_HSI_IsReady>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f1      	bne.n	8004470 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a3 	beq.w	80045ec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d076      	beq.n	800459c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d046      	beq.n	8004548 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80044ba:	f7ff fc72 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d113      	bne.n	80044ec <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80044c4:	f7ff fc4b 	bl	8003d5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c8:	f7fd fe84 	bl	80021d4 <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044d0:	f7fd fe80 	bl	80021d4 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e1fc      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80044e2:	f7ff fc5e 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f1      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80044ec:	f7ff fc6b 	bl	8003dc6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fe70 	bl	80021d4 <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044f8:	f7fd fe6c 	bl	80021d4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b03      	cmp	r3, #3
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e1e8      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800450a:	f7ff fc7e 	bl	8003e0a <LL_RCC_LSI2_IsReady>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f1      	beq.n	80044f8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff fc88 	bl	8003e2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800451e:	f7ff fc2f 	bl	8003d80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fd fe57 	bl	80021d4 <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800452a:	f7fd fe53 	bl	80021d4 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e1cf      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800453c:	f7ff fc31 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f1      	bne.n	800452a <HAL_RCC_OscConfig+0x31a>
 8004546:	e051      	b.n	80045ec <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004548:	f7ff fc09 	bl	8003d5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fe42 	bl	80021d4 <HAL_GetTick>
 8004550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004552:	e00c      	b.n	800456e <HAL_RCC_OscConfig+0x35e>
 8004554:	2000003c 	.word	0x2000003c
 8004558:	20000040 	.word	0x20000040
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800455c:	f7fd fe3a 	bl	80021d4 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1b6      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800456e:	f7ff fc18 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f1      	beq.n	800455c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004578:	f7ff fc36 	bl	8003de8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800457e:	f7fd fe29 	bl	80021d4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b03      	cmp	r3, #3
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e1a5      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004590:	f7ff fc3b 	bl	8003e0a <LL_RCC_LSI2_IsReady>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f1      	bne.n	800457e <HAL_RCC_OscConfig+0x36e>
 800459a:	e027      	b.n	80045ec <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800459c:	f7ff fc24 	bl	8003de8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fe18 	bl	80021d4 <HAL_GetTick>
 80045a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045a8:	f7fd fe14 	bl	80021d4 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e190      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045ba:	f7ff fc26 	bl	8003e0a <LL_RCC_LSI2_IsReady>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f1      	bne.n	80045a8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80045c4:	f7ff fbdc 	bl	8003d80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fd fe04 	bl	80021d4 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045d0:	f7fd fe00 	bl	80021d4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e17c      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80045e2:	f7ff fbde 	bl	8003da2 <LL_RCC_LSI1_IsReady>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f1      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d05b      	beq.n	80046b0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f8:	4ba7      	ldr	r3, [pc, #668]	@ (8004898 <HAL_RCC_OscConfig+0x688>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d114      	bne.n	800462e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004604:	f7ff fa8a 	bl	8003b1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004608:	f7fd fde4 	bl	80021d4 <HAL_GetTick>
 800460c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fd fde0 	bl	80021d4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e15c      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004622:	4b9d      	ldr	r3, [pc, #628]	@ (8004898 <HAL_RCC_OscConfig+0x688>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d102      	bne.n	800463c <HAL_RCC_OscConfig+0x42c>
 8004636:	f7ff fb3c 	bl	8003cb2 <LL_RCC_LSE_Enable>
 800463a:	e00c      	b.n	8004656 <HAL_RCC_OscConfig+0x446>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b05      	cmp	r3, #5
 8004642:	d104      	bne.n	800464e <HAL_RCC_OscConfig+0x43e>
 8004644:	f7ff fb57 	bl	8003cf6 <LL_RCC_LSE_EnableBypass>
 8004648:	f7ff fb33 	bl	8003cb2 <LL_RCC_LSE_Enable>
 800464c:	e003      	b.n	8004656 <HAL_RCC_OscConfig+0x446>
 800464e:	f7ff fb41 	bl	8003cd4 <LL_RCC_LSE_Disable>
 8004652:	f7ff fb61 	bl	8003d18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d014      	beq.n	8004688 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465e:	f7fd fdb9 	bl	80021d4 <HAL_GetTick>
 8004662:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fd fdb5 	bl	80021d4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e12f      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 800467c:	f7ff fb5d 	bl	8003d3a <LL_RCC_LSE_IsReady>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ef      	beq.n	8004666 <HAL_RCC_OscConfig+0x456>
 8004686:	e013      	b.n	80046b0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fd fda4 	bl	80021d4 <HAL_GetTick>
 800468c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fd fda0 	bl	80021d4 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e11a      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 80046a6:	f7ff fb48 	bl	8003d3a <LL_RCC_LSE_IsReady>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ef      	bne.n	8004690 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02c      	beq.n	8004716 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d014      	beq.n	80046ee <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046c4:	f7ff fac1 	bl	8003c4a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fd84 	bl	80021d4 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d0:	f7fd fd80 	bl	80021d4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0fc      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80046e2:	f7ff fad4 	bl	8003c8e <LL_RCC_HSI48_IsReady>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f1      	beq.n	80046d0 <HAL_RCC_OscConfig+0x4c0>
 80046ec:	e013      	b.n	8004716 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ee:	f7ff fabd 	bl	8003c6c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fd fd6f 	bl	80021d4 <HAL_GetTick>
 80046f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046fa:	f7fd fd6b 	bl	80021d4 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0e7      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800470c:	f7ff fabf 	bl	8003c8e <LL_RCC_HSI48_IsReady>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f1      	bne.n	80046fa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80dd 	beq.w	80048da <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004720:	f7ff fc1d 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004724:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	2b02      	cmp	r3, #2
 8004734:	f040 80a6 	bne.w	8004884 <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	429a      	cmp	r2, r3
 8004744:	d123      	bne.n	800478e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d11c      	bne.n	800478e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d114      	bne.n	800478e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800476e:	429a      	cmp	r2, r3
 8004770:	d10d      	bne.n	800478e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d054      	beq.n	8004838 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	d04f      	beq.n	8004834 <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004794:	f7ff fc8d 	bl	80040b2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004798:	f7fd fd1c 	bl	80021d4 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fd18 	bl	80021d4 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e094      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1ef      	bne.n	80047a0 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	4b35      	ldr	r3, [pc, #212]	@ (800489c <HAL_RCC_OscConfig+0x68c>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047d2:	4311      	orrs	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047d8:	0212      	lsls	r2, r2, #8
 80047da:	4311      	orrs	r1, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047e0:	4311      	orrs	r1, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047e6:	4311      	orrs	r1, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80047ec:	430a      	orrs	r2, r1
 80047ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f6:	f7ff fc4d 	bl	8004094 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004808:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800480a:	f7fd fce3 	bl	80021d4 <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd fcdf 	bl	80021d4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e05b      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ef      	beq.n	8004812 <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004832:	e052      	b.n	80048da <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e051      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d149      	bne.n	80048da <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004846:	f7ff fc25 	bl	8004094 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004858:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800485a:	f7fd fcbb 	bl	80021d4 <HAL_GetTick>
 800485e:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004862:	f7fd fcb7 	bl	80021d4 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e033      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0ef      	beq.n	8004862 <HAL_RCC_OscConfig+0x652>
 8004882:	e02a      	b.n	80048da <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d025      	beq.n	80048d6 <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	f7ff fc12 	bl	80040b2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd fca1 	bl	80021d4 <HAL_GetTick>
 8004892:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004894:	e00d      	b.n	80048b2 <HAL_RCC_OscConfig+0x6a2>
 8004896:	bf00      	nop
 8004898:	58000400 	.word	0x58000400
 800489c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fd fc98 	bl	80021d4 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e014      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ef      	bne.n	80048a0 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	60d3      	str	r3, [r2, #12]
 80048d4:	e001      	b.n	80048da <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3734      	adds	r7, #52	@ 0x34
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd90      	pop	{r4, r7, pc}

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e12d      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b98      	ldr	r3, [pc, #608]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d91b      	bls.n	800493e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b95      	ldr	r3, [pc, #596]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 0207 	bic.w	r2, r3, #7
 800490e:	4993      	ldr	r1, [pc, #588]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004916:	f7fd fc5d 	bl	80021d4 <HAL_GetTick>
 800491a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491c:	e008      	b.n	8004930 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800491e:	f7fd fc59 	bl	80021d4 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e111      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004930:	4b8a      	ldr	r3, [pc, #552]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d1ef      	bne.n	800491e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fb11 	bl	8003f76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004954:	f7fd fc3e 	bl	80021d4 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800495c:	f7fd fc3a 	bl	80021d4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0f2      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800496e:	f7ff fbf2 	bl	8004156 <LL_RCC_IsActiveFlag_HPRE>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f1      	beq.n	800495c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b00      	cmp	r3, #0
 8004982:	d016      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fb08 	bl	8003f9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800498e:	f7fd fc21 	bl	80021d4 <HAL_GetTick>
 8004992:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004996:	f7fd fc1d 	bl	80021d4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e0d5      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80049a8:	f7ff fbe7 	bl	800417a <LL_RCC_IsActiveFlag_C2HPRE>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f1      	beq.n	8004996 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d016      	beq.n	80049ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff fb01 	bl	8003fca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fc04 	bl	80021d4 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049d0:	f7fd fc00 	bl	80021d4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e0b8      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80049e2:	f7ff fbdd 	bl	80041a0 <LL_RCC_IsActiveFlag_SHDHPRE>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f1      	beq.n	80049d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d016      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fafb 	bl	8003ff8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a02:	f7fd fbe7 	bl	80021d4 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a0a:	f7fd fbe3 	bl	80021d4 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e09b      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a1c:	f7ff fbd3 	bl	80041c6 <LL_RCC_IsActiveFlag_PPRE1>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f1      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d017      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff faf1 	bl	8004020 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a3e:	f7fd fbc9 	bl	80021d4 <HAL_GetTick>
 8004a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a46:	f7fd fbc5 	bl	80021d4 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e07d      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004a58:	f7ff fbc7 	bl	80041ea <LL_RCC_IsActiveFlag_PPRE2>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f1      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d043      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004a76:	f7ff f891 	bl	8003b9c <LL_RCC_HSE_IsReady>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11e      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e067      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004a8c:	f7ff fb20 	bl	80040d0 <LL_RCC_PLL_IsReady>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e05c      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004aa2:	f7ff f9f9 	bl	8003e98 <LL_RCC_MSI_IsReady>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e051      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ab0:	f7ff f8a4 	bl	8003bfc <LL_RCC_HSI_IsReady>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e04a      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fa37 	bl	8003f36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac8:	f7fd fb84 	bl	80021d4 <HAL_GetTick>
 8004acc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad0:	f7fd fb80 	bl	80021d4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e036      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	f7ff fa3a 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004aea:	4602      	mov	r2, r0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d1ec      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af6:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d21b      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b04:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 0207 	bic.w	r2, r3, #7
 8004b0c:	4913      	ldr	r1, [pc, #76]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b14:	f7fd fb5e 	bl	80021d4 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b1c:	f7fd fb5a 	bl	80021d4 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e012      	b.n	8004b54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <HAL_RCC_ClockConfig+0x278>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d1ef      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b3c:	f000 f87e 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4a07      	ldr	r2, [pc, #28]	@ (8004b60 <HAL_RCC_ClockConfig+0x27c>)
 8004b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004b46:	f7fd fb51 	bl	80021ec <HAL_GetTickPrio>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fd faf3 	bl	8002138 <HAL_InitTick>
 8004b52:	4603      	mov	r3, r0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	58004000 	.word	0x58004000
 8004b60:	2000003c 	.word	0x2000003c

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b6a:	f7ff f9f8 	bl	8003f5e <LL_RCC_GetSysClkSource>
 8004b6e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b76:	f7ff f9b4 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	4a2b      	ldr	r2, [pc, #172]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	e04b      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d102      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b92:	4b28      	ldr	r3, [pc, #160]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e045      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b08      	cmp	r3, #8
 8004b9c:	d10a      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b9e:	f7fe ffcd 	bl	8003b3c <LL_RCC_HSE_IsEnabledDiv2>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d102      	bne.n	8004bae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ba8:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e03a      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004bae:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e037      	b.n	8004c24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004bb4:	f7ff fac3 	bl	800413e <LL_RCC_PLL_GetMainSource>
 8004bb8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d003      	beq.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x64>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x6a>
 8004bc6:	e00d      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bca:	60bb      	str	r3, [r7, #8]
        break;
 8004bcc:	e015      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004bce:	f7fe ffb5 	bl	8003b3c <LL_RCC_HSE_IsEnabledDiv2>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d102      	bne.n	8004bde <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004bd8:	4b16      	ldr	r3, [pc, #88]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004bda:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004bdc:	e00d      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004bde:	4b16      	ldr	r3, [pc, #88]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004be0:	60bb      	str	r3, [r7, #8]
        break;
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004be4:	f7ff f97d 	bl	8003ee2 <LL_RCC_MSI_GetRange>
 8004be8:	4603      	mov	r3, r0
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf6:	60bb      	str	r3, [r7, #8]
        break;
 8004bf8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004bfa:	f7ff fa7b 	bl	80040f4 <LL_RCC_PLL_GetN>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	fb03 f402 	mul.w	r4, r3, r2
 8004c06:	f7ff fa8e 	bl	8004126 <LL_RCC_PLL_GetDivider>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	3301      	adds	r3, #1
 8004c10:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c14:	f7ff fa7b 	bl	800410e <LL_RCC_PLL_GetR>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	0f5b      	lsrs	r3, r3, #29
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c22:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004c24:	68fb      	ldr	r3, [r7, #12]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	08009a84 	.word	0x08009a84
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	01e84800 	.word	0x01e84800

08004c3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b598      	push	{r3, r4, r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004c40:	f7ff ff90 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004c44:	4604      	mov	r4, r0
 8004c46:	f7ff f9ff 	bl	8004048 <LL_RCC_GetAHBPrescaler>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	4a03      	ldr	r2, [pc, #12]	@ (8004c60 <HAL_RCC_GetHCLKFreq+0x24>)
 8004c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd98      	pop	{r3, r4, r7, pc}
 8004c60:	08009a24 	.word	0x08009a24

08004c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c64:	b598      	push	{r3, r4, r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004c68:	f7ff ffe8 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	f7ff fa05 	bl	800407c <LL_RCC_GetAPB2Prescaler>
 8004c72:	4603      	mov	r3, r0
 8004c74:	0adb      	lsrs	r3, r3, #11
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd98      	pop	{r3, r4, r7, pc}
 8004c8c:	08009a64 	.word	0x08009a64

08004c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2bb0      	cmp	r3, #176	@ 0xb0
 8004c9c:	d903      	bls.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004c9e:	4b14      	ldr	r3, [pc, #80]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e007      	b.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	4a10      	ldr	r2, [pc, #64]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004cb6:	f7ff f9d3 	bl	8004060 <LL_RCC_GetAHB4Prescaler>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f80c 	bl	8004cfc <RCC_SetFlashLatency>
 8004ce4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	08009a84 	.word	0x08009a84
 8004cf4:	08009a24 	.word	0x08009a24
 8004cf8:	431bde83 	.word	0x431bde83

08004cfc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b08f      	sub	sp, #60	@ 0x3c
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004d06:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <RCC_SetFlashLatency+0x9c>)
 8004d08:	f107 041c 	add.w	r4, r7, #28
 8004d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <RCC_SetFlashLatency+0xa0>)
 8004d14:	f107 040c 	add.w	r4, r7, #12
 8004d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d26:	e013      	b.n	8004d50 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	3338      	adds	r3, #56	@ 0x38
 8004d2e:	443b      	add	r3, r7
 8004d30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d807      	bhi.n	8004d4a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3338      	adds	r3, #56	@ 0x38
 8004d40:	443b      	add	r3, r7
 8004d42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d46:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8004d48:	e005      	b.n	8004d56 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d9e8      	bls.n	8004d28 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004d56:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <RCC_SetFlashLatency+0xa4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 0207 	bic.w	r2, r3, #7
 8004d5e:	4910      	ldr	r1, [pc, #64]	@ (8004da0 <RCC_SetFlashLatency+0xa4>)
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d66:	f7fd fa35 	bl	80021d4 <HAL_GetTick>
 8004d6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d6c:	e008      	b.n	8004d80 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d6e:	f7fd fa31 	bl	80021d4 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e007      	b.n	8004d90 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d80:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <RCC_SetFlashLatency+0xa4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d1ef      	bne.n	8004d6e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	373c      	adds	r7, #60	@ 0x3c
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}
 8004d98:	080099c8 	.word	0x080099c8
 8004d9c:	080099d8 	.word	0x080099d8
 8004da0:	58004000 	.word	0x58004000

08004da4 <LL_RCC_LSE_IsEnabled>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <LL_RCC_LSE_IsEnabled+0x18>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <LL_RCC_LSE_IsEnabled+0x1a>
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_LSE_IsReady>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d101      	bne.n	8004de0 <LL_RCC_LSE_IsReady+0x18>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <LL_RCC_LSE_IsReady+0x1a>
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <LL_RCC_SetRFWKPClockSource>:
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_SetUSARTClockSource>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e28:	f023 0203 	bic.w	r2, r3, #3
 8004e2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <LL_RCC_SetI2CClockSource>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	401a      	ands	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004e68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <LL_RCC_SetLPTIMClockSource>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	43db      	mvns	r3, r3
 8004e96:	401a      	ands	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_SetRNGClockSource>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ec6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_RCC_SetCLK48ClockSource>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ef2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_RCC_SetADCClockSource>:
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_RCC_SetRTCClockSource>:
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_GetRTCClockSource>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_RCC_ForceBackupDomainReset>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <LL_RCC_ReleaseBackupDomainReset>:
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004fb6:	bf00      	nop
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d046      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004fdc:	f7ff ffc1 	bl	8004f62 <LL_RCC_GetRTCClockSource>
 8004fe0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d03c      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fec:	f7fe fd96 	bl	8003b1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d105      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff ff9b 	bl	8004f36 <LL_RCC_SetRTCClockSource>
 8005000:	e02e      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800500c:	f7ff ffb6 	bl	8004f7c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005010:	f7ff ffc5 	bl	8004f9e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800502c:	f7ff feba 	bl	8004da4 <LL_RCC_LSE_IsEnabled>
 8005030:	4603      	mov	r3, r0
 8005032:	2b01      	cmp	r3, #1
 8005034:	d114      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005036:	f7fd f8cd 	bl	80021d4 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800503c:	e00b      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fd f8c9 	bl	80021d4 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d902      	bls.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	77fb      	strb	r3, [r7, #31]
              break;
 8005054:	e004      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005056:	f7ff feb7 	bl	8004dc8 <LL_RCC_LSE_IsReady>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d1ee      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005060:	7ffb      	ldrb	r3, [r7, #31]
 8005062:	77bb      	strb	r3, [r7, #30]
 8005064:	e001      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005066:	7ffb      	ldrb	r3, [r7, #31]
 8005068:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fecc 	bl	8004e18 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fef4 	bl	8004e7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fee9 	bl	8004e7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fec1 	bl	8004e44 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d6:	d008      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050e0:	d003      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fedf 	bl	8004eb2 <LL_RCC_SetRNGClockSource>
 80050f4:	e00a      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	2000      	movs	r0, #0
 8005102:	f7ff fed6 	bl	8004eb2 <LL_RCC_SetRNGClockSource>
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fee9 	bl	8004ede <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005114:	d107      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005124:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fee7 	bl	8004f0a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005144:	d107      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005154:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fe40 	bl	8004dec <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800516c:	7fbb      	ldrb	r3, [r7, #30]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e049      	b.n	800521c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fc fd8b 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 fa85 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d001      	beq.n	800523c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e036      	b.n	80052aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a17      	ldr	r2, [pc, #92]	@ (80052b8 <HAL_TIM_Base_Start_IT+0x94>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <HAL_TIM_Base_Start_IT+0x44>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d115      	bne.n	8005294 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	4b13      	ldr	r3, [pc, #76]	@ (80052bc <HAL_TIM_Base_Start_IT+0x98>)
 8005270:	4013      	ands	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b06      	cmp	r3, #6
 8005278:	d015      	beq.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005280:	d011      	beq.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	e008      	b.n	80052a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e000      	b.n	80052a8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	00010007 	.word	0x00010007

080052c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0202 	mvn.w	r2, #2
 80052f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9bc 	bl	8005688 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9ae 	bl	8005674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f9bf 	bl	800569c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	d020      	beq.n	8005370 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0204 	mvn.w	r2, #4
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f996 	bl	8005688 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f988 	bl	8005674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f999 	bl	800569c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d020      	beq.n	80053bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0208 	mvn.w	r2, #8
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f970 	bl	8005688 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f962 	bl	8005674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f973 	bl	800569c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d020      	beq.n	8005408 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01b      	beq.n	8005408 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0210 	mvn.w	r2, #16
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2208      	movs	r2, #8
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f94a 	bl	8005688 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f93c 	bl	8005674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f94d 	bl	800569c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0201 	mvn.w	r2, #1
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f91a 	bl	8005660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 faa5 	bl	80059a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fa9d 	bl	80059b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00c      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f907 	bl	80056b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0220 	mvn.w	r2, #32
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa65 	bl	8005990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_ConfigClockSource+0x1c>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e0b6      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x18a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005508:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800550c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005514:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005526:	d03e      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0xd8>
 8005528:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800552c:	f200 8087 	bhi.w	800563e <HAL_TIM_ConfigClockSource+0x170>
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005534:	f000 8086 	beq.w	8005644 <HAL_TIM_ConfigClockSource+0x176>
 8005538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553c:	d87f      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 800553e:	2b70      	cmp	r3, #112	@ 0x70
 8005540:	d01a      	beq.n	8005578 <HAL_TIM_ConfigClockSource+0xaa>
 8005542:	2b70      	cmp	r3, #112	@ 0x70
 8005544:	d87b      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 8005546:	2b60      	cmp	r3, #96	@ 0x60
 8005548:	d050      	beq.n	80055ec <HAL_TIM_ConfigClockSource+0x11e>
 800554a:	2b60      	cmp	r3, #96	@ 0x60
 800554c:	d877      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 800554e:	2b50      	cmp	r3, #80	@ 0x50
 8005550:	d03c      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xfe>
 8005552:	2b50      	cmp	r3, #80	@ 0x50
 8005554:	d873      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d058      	beq.n	800560c <HAL_TIM_ConfigClockSource+0x13e>
 800555a:	2b40      	cmp	r3, #64	@ 0x40
 800555c:	d86f      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 800555e:	2b30      	cmp	r3, #48	@ 0x30
 8005560:	d064      	beq.n	800562c <HAL_TIM_ConfigClockSource+0x15e>
 8005562:	2b30      	cmp	r3, #48	@ 0x30
 8005564:	d86b      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 8005566:	2b20      	cmp	r3, #32
 8005568:	d060      	beq.n	800562c <HAL_TIM_ConfigClockSource+0x15e>
 800556a:	2b20      	cmp	r3, #32
 800556c:	d867      	bhi.n	800563e <HAL_TIM_ConfigClockSource+0x170>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d05c      	beq.n	800562c <HAL_TIM_ConfigClockSource+0x15e>
 8005572:	2b10      	cmp	r3, #16
 8005574:	d05a      	beq.n	800562c <HAL_TIM_ConfigClockSource+0x15e>
 8005576:	e062      	b.n	800563e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005588:	f000 f982 	bl	8005890 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800559a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]
      break;
 80055a4:	e04f      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055b6:	f000 f96b 	bl	8005890 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055c8:	609a      	str	r2, [r3, #8]
      break;
 80055ca:	e03c      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d8:	461a      	mov	r2, r3
 80055da:	f000 f8dd 	bl	8005798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2150      	movs	r1, #80	@ 0x50
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 f936 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 80055ea:	e02c      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f8:	461a      	mov	r2, r3
 80055fa:	f000 f8fc 	bl	80057f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2160      	movs	r1, #96	@ 0x60
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f926 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 800560a:	e01c      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005618:	461a      	mov	r2, r3
 800561a:	f000 f8bd 	bl	8005798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2140      	movs	r1, #64	@ 0x40
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f916 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 800562a:	e00c      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f000 f90d 	bl	8005856 <TIM_ITRx_SetConfig>
      break;
 800563c:	e003      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
      break;
 8005642:	e000      	b.n	8005646 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005644:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <TIM_Base_SetConfig+0xc8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_Base_SetConfig+0x20>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d108      	bne.n	80056f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a24      	ldr	r2, [pc, #144]	@ (800578c <TIM_Base_SetConfig+0xc8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0x52>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0x52>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <TIM_Base_SetConfig+0xcc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0x52>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a20      	ldr	r2, [pc, #128]	@ (8005794 <TIM_Base_SetConfig+0xd0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a10      	ldr	r2, [pc, #64]	@ (800578c <TIM_Base_SetConfig+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a0f      	ldr	r2, [pc, #60]	@ (8005790 <TIM_Base_SetConfig+0xcc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a0e      	ldr	r2, [pc, #56]	@ (8005794 <TIM_Base_SetConfig+0xd0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d103      	bne.n	8005766 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f043 0204 	orr.w	r2, r3, #4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800

08005798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 030a 	bic.w	r3, r3, #10
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	621a      	str	r2, [r3, #32]
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f023 0210 	bic.w	r2, r3, #16
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	031b      	lsls	r3, r3, #12
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800586c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	021a      	lsls	r2, r3, #8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e04a      	b.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1f      	ldr	r2, [pc, #124]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005918:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a12      	ldr	r2, [pc, #72]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005950:	d10c      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4313      	orrs	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00

08005990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_RCC_GetUSARTClockSource>:
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4013      	ands	r3, r2
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e042      	b.n	8005a84 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fc f989 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2224      	movs	r2, #36	@ 0x24
 8005a1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0201 	bic.w	r2, r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9f2 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f8b3 	bl	8005ba8 <UART_SetConfig>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e01b      	b.n	8005a84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa71 	bl	8005f64 <UART_CheckIdleState>
 8005a82:	4603      	mov	r3, r0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d17b      	bne.n	8005b9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_UART_Transmit+0x26>
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e074      	b.n	8005ba0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2221      	movs	r2, #33	@ 0x21
 8005ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ac6:	f7fc fb85 	bl	80021d4 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae4:	d108      	bne.n	8005af8 <HAL_UART_Transmit+0x6c>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b00:	e030      	b.n	8005b64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	@ 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fad3 	bl	80060b8 <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e03d      	b.n	8005ba0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e007      	b.n	8005b52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1c8      	bne.n	8005b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	2200      	movs	r2, #0
 8005b78:	2140      	movs	r1, #64	@ 0x40
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa9c 	bl	80060b8 <UART_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e006      	b.n	8005ba0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005e10 <UART_SetConfig+0x268>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c10:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	6979      	ldr	r1, [r7, #20]
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	f023 010f 	bic.w	r1, r3, #15
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a76      	ldr	r2, [pc, #472]	@ (8005e14 <UART_SetConfig+0x26c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d11f      	bne.n	8005c7e <UART_SetConfig+0xd6>
 8005c3e:	2003      	movs	r0, #3
 8005c40:	f7ff fec4 	bl	80059cc <LL_RCC_GetUSARTClockSource>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d816      	bhi.n	8005c78 <UART_SetConfig+0xd0>
 8005c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <UART_SetConfig+0xa8>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005c67 	.word	0x08005c67
 8005c5c:	08005c73 	.word	0x08005c73
 8005c60:	2301      	movs	r3, #1
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e00d      	b.n	8005c82 <UART_SetConfig+0xda>
 8005c66:	2302      	movs	r3, #2
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e00a      	b.n	8005c82 <UART_SetConfig+0xda>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e007      	b.n	8005c82 <UART_SetConfig+0xda>
 8005c72:	2308      	movs	r3, #8
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e004      	b.n	8005c82 <UART_SetConfig+0xda>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	77fb      	strb	r3, [r7, #31]
 8005c7c:	e001      	b.n	8005c82 <UART_SetConfig+0xda>
 8005c7e:	2310      	movs	r3, #16
 8005c80:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8a:	d15e      	bne.n	8005d4a <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005c8c:	7ffb      	ldrb	r3, [r7, #31]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	2b07      	cmp	r3, #7
 8005c92:	d822      	bhi.n	8005cda <UART_SetConfig+0x132>
 8005c94:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <UART_SetConfig+0xf4>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005cbd 	.word	0x08005cbd
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005cdb 	.word	0x08005cdb
 8005ca8:	08005ccb 	.word	0x08005ccb
 8005cac:	08005cdb 	.word	0x08005cdb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005cdb 	.word	0x08005cdb
 8005cb8:	08005cd3 	.word	0x08005cd3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7fe ffd2 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 8005cc0:	61b8      	str	r0, [r7, #24]
        break;
 8005cc2:	e00f      	b.n	8005ce4 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cc4:	4b54      	ldr	r3, [pc, #336]	@ (8005e18 <UART_SetConfig+0x270>)
 8005cc6:	61bb      	str	r3, [r7, #24]
        break;
 8005cc8:	e00c      	b.n	8005ce4 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cca:	f7fe ff4b 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8005cce:	61b8      	str	r0, [r7, #24]
        break;
 8005cd0:	e008      	b.n	8005ce4 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd6:	61bb      	str	r3, [r7, #24]
        break;
 8005cd8:	e004      	b.n	8005ce4 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ce2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d07e      	beq.n	8005de8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	4a4b      	ldr	r2, [pc, #300]	@ (8005e1c <UART_SetConfig+0x274>)
 8005cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d916      	bls.n	8005d44 <UART_SetConfig+0x19c>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1c:	d212      	bcs.n	8005d44 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f023 030f 	bic.w	r3, r3, #15
 8005d26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	89fa      	ldrh	r2, [r7, #14]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e051      	b.n	8005de8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77bb      	strb	r3, [r7, #30]
 8005d48:	e04e      	b.n	8005de8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4a:	7ffb      	ldrb	r3, [r7, #31]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	2b07      	cmp	r3, #7
 8005d50:	d821      	bhi.n	8005d96 <UART_SetConfig+0x1ee>
 8005d52:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <UART_SetConfig+0x1b0>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d79 	.word	0x08005d79
 8005d5c:	08005d81 	.word	0x08005d81
 8005d60:	08005d97 	.word	0x08005d97
 8005d64:	08005d87 	.word	0x08005d87
 8005d68:	08005d97 	.word	0x08005d97
 8005d6c:	08005d97 	.word	0x08005d97
 8005d70:	08005d97 	.word	0x08005d97
 8005d74:	08005d8f 	.word	0x08005d8f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d78:	f7fe ff74 	bl	8004c64 <HAL_RCC_GetPCLK2Freq>
 8005d7c:	61b8      	str	r0, [r7, #24]
        break;
 8005d7e:	e00f      	b.n	8005da0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b25      	ldr	r3, [pc, #148]	@ (8005e18 <UART_SetConfig+0x270>)
 8005d82:	61bb      	str	r3, [r7, #24]
        break;
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d86:	f7fe feed 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8005d8a:	61b8      	str	r0, [r7, #24]
        break;
 8005d8c:	e008      	b.n	8005da0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d92:	61bb      	str	r3, [r7, #24]
        break;
 8005d94:	e004      	b.n	8005da0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d9e:	bf00      	nop
    }

    if (pclk != 0U)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d020      	beq.n	8005de8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	4a1c      	ldr	r2, [pc, #112]	@ (8005e1c <UART_SetConfig+0x274>)
 8005dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db0:	461a      	mov	r2, r3
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	441a      	add	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d909      	bls.n	8005de4 <UART_SetConfig+0x23c>
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd6:	d205      	bcs.n	8005de4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	e001      	b.n	8005de8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e04:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	cfff69f3 	.word	0xcfff69f3
 8005e14:	40013800 	.word	0x40013800
 8005e18:	00f42400 	.word	0x00f42400
 8005e1c:	08009ac4 	.word	0x08009ac4

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b098      	sub	sp, #96	@ 0x60
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f74:	f7fc f92e 	bl	80021d4 <HAL_GetTick>
 8005f78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d12f      	bne.n	8005fe8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f90:	2200      	movs	r2, #0
 8005f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f88e 	bl	80060b8 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d022      	beq.n	8005fe8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e063      	b.n	80060b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d149      	bne.n	800608a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffe:	2200      	movs	r2, #0
 8006000:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f857 	bl	80060b8 <UART_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d03c      	beq.n	800608a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	623b      	str	r3, [r7, #32]
   return(result);
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006024:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006030:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e6      	bne.n	8006010 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	60fb      	str	r3, [r7, #12]
   return(result);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006062:	61fa      	str	r2, [r7, #28]
 8006064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	617b      	str	r3, [r7, #20]
   return(result);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e5      	bne.n	8006042 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e012      	b.n	80060b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3758      	adds	r7, #88	@ 0x58
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c8:	e04f      	b.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d04b      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d2:	f7fc f87f 	bl	80021d4 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d302      	bcc.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e04e      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d037      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b80      	cmp	r3, #128	@ 0x80
 80060fe:	d034      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d031      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d110      	bne.n	8006136 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2208      	movs	r2, #8
 800611a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f838 	bl	8006192 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2208      	movs	r2, #8
 8006126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e029      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006140:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006144:	d111      	bne.n	800616a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800614e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f81e 	bl	8006192 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e00f      	b.n	800618a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d0a0      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b095      	sub	sp, #84	@ 0x54
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e6      	bne.n	800619a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	61fb      	str	r3, [r7, #28]
   return(result);
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e3      	bne.n	80061cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d118      	bne.n	800623e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	60bb      	str	r3, [r7, #8]
   return(result);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f023 0310 	bic.w	r3, r3, #16
 8006220:	647b      	str	r3, [r7, #68]	@ 0x44
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	613b      	str	r3, [r7, #16]
   return(result);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e6      	bne.n	800620c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006252:	bf00      	nop
 8006254:	3754      	adds	r7, #84	@ 0x54
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_UARTEx_DisableFifoMode+0x16>
 8006270:	2302      	movs	r3, #2
 8006272:	e027      	b.n	80062c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2224      	movs	r2, #36	@ 0x24
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e02d      	b.n	8006344 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	@ 0x24
 80062f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f84f 	bl	80063c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006360:	2302      	movs	r3, #2
 8006362:	e02d      	b.n	80063c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	@ 0x24
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f811 	bl	80063c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d108      	bne.n	80063ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063e8:	e031      	b.n	800644e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063ea:	2308      	movs	r3, #8
 80063ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ee:	2308      	movs	r3, #8
 80063f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	0e5b      	lsrs	r3, r3, #25
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	0f5b      	lsrs	r3, r3, #29
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	7b3a      	ldrb	r2, [r7, #12]
 8006416:	4911      	ldr	r1, [pc, #68]	@ (800645c <UARTEx_SetNbDataToProcess+0x94>)
 8006418:	5c8a      	ldrb	r2, [r1, r2]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800641e:	7b3a      	ldrb	r2, [r7, #12]
 8006420:	490f      	ldr	r1, [pc, #60]	@ (8006460 <UARTEx_SetNbDataToProcess+0x98>)
 8006422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006424:	fb93 f3f2 	sdiv	r3, r3, r2
 8006428:	b29a      	uxth	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	7b7a      	ldrb	r2, [r7, #13]
 8006434:	4909      	ldr	r1, [pc, #36]	@ (800645c <UARTEx_SetNbDataToProcess+0x94>)
 8006436:	5c8a      	ldrb	r2, [r1, r2]
 8006438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800643c:	7b7a      	ldrb	r2, [r7, #13]
 800643e:	4908      	ldr	r1, [pc, #32]	@ (8006460 <UARTEx_SetNbDataToProcess+0x98>)
 8006440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006442:	fb93 f3f2 	sdiv	r3, r3, r2
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	08009adc 	.word	0x08009adc
 8006460:	08009ae4 	.word	0x08009ae4

08006464 <read_tick32>:


#define TIM_PWM_CNT ((uint32_t)(TIM2->CNT))
#define TIM_TICK_CNT (read_tick32())

static inline uint32_t read_tick32(void){ return TIM2->CNT; }
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
 8006468:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <diff_u32>:
#endif


// ---- Helpers ----
static inline uint32_t diff_u32(uint32_t a, uint32_t b)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	return (uint32_t)(a-b);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1ad3      	subs	r3, r2, r3
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <gpio_pwm4>:
	GPIO_TypeDef* p1, uint16_t b1,
	GPIO_TypeDef* p2, uint16_t b2,
	GPIO_TypeDef* p3, uint16_t b3,
	GPIO_TypeDef* p4, uint16_t b4,
	uint8_t now, uint8_t vA, uint8_t vB)
{
 8006494:	b480      	push	{r7}
 8006496:	b08d      	sub	sp, #52	@ 0x34
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	460b      	mov	r3, r1
 80064a2:	817b      	strh	r3, [r7, #10]
 80064a4:	4613      	mov	r3, r2
 80064a6:	813b      	strh	r3, [r7, #8]
	uint32_t set1 = (now < vA) ? b1 : 0, rst1 = (now < vA) ? 0 : ((uint32_t)b1 << 16);
 80064a8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80064ac:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d201      	bcs.n	80064b8 <gpio_pwm4+0x24>
 80064b4:	897b      	ldrh	r3, [r7, #10]
 80064b6:	e000      	b.n	80064ba <gpio_pwm4+0x26>
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064bc:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80064c0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d302      	bcc.n	80064ce <gpio_pwm4+0x3a>
 80064c8:	897b      	ldrh	r3, [r7, #10]
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	e000      	b.n	80064d0 <gpio_pwm4+0x3c>
 80064ce:	2300      	movs	r3, #0
 80064d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t set2 = (now < (uint8_t)(255 - vA)) ? b2 : 0, rst2 = (now < (uint8_t)(255 - vA)) ? 0 : ((uint32_t)b2 << 16);
 80064d2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80064d6:	43db      	mvns	r3, r3
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80064de:	429a      	cmp	r2, r3
 80064e0:	d201      	bcs.n	80064e6 <gpio_pwm4+0x52>
 80064e2:	893b      	ldrh	r3, [r7, #8]
 80064e4:	e000      	b.n	80064e8 <gpio_pwm4+0x54>
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80064ee:	43db      	mvns	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <gpio_pwm4+0x6c>
 80064fa:	893b      	ldrh	r3, [r7, #8]
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	e000      	b.n	8006502 <gpio_pwm4+0x6e>
 8006500:	2300      	movs	r3, #0
 8006502:	623b      	str	r3, [r7, #32]
	uint32_t set3 = (now < vB) ? b3 : 0, rst3 = (now < vB) ? 0 : ((uint32_t)b3 << 16);
 8006504:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8006508:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800650c:	429a      	cmp	r2, r3
 800650e:	d201      	bcs.n	8006514 <gpio_pwm4+0x80>
 8006510:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006512:	e000      	b.n	8006516 <gpio_pwm4+0x82>
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800651c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <gpio_pwm4+0x96>
 8006524:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006526:	041b      	lsls	r3, r3, #16
 8006528:	e000      	b.n	800652c <gpio_pwm4+0x98>
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
	uint32_t set4 = (now < (uint8_t)(255 - vB)) ? b4 : 0, rst4 = (now < (uint8_t)(255 - vB)) ? 0 : ((uint32_t)b4 << 16);
 800652e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8006532:	43db      	mvns	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800653a:	429a      	cmp	r2, r3
 800653c:	d202      	bcs.n	8006544 <gpio_pwm4+0xb0>
 800653e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006542:	e000      	b.n	8006546 <gpio_pwm4+0xb2>
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800654c:	43db      	mvns	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8006554:	429a      	cmp	r2, r3
 8006556:	d303      	bcc.n	8006560 <gpio_pwm4+0xcc>
 8006558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	e000      	b.n	8006562 <gpio_pwm4+0xce>
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]

	p1->BSRR = set1 | rst1;
 8006564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	431a      	orrs	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	619a      	str	r2, [r3, #24]
	p2->BSRR = set2 | rst2;
 800656e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	619a      	str	r2, [r3, #24]
	p3->BSRR = set3 | rst3;
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	431a      	orrs	r2, r3
 800657e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006580:	619a      	str	r2, [r3, #24]
	p4->BSRR = set4 | rst4;
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	431a      	orrs	r2, r3
 8006588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800658a:	619a      	str	r2, [r3, #24]
}
 800658c:	bf00      	nop
 800658e:	3734      	adds	r7, #52	@ 0x34
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <apply_pwm_micro>:


static inline void apply_pwm_micro(StepLL* m, uint8_t now)
{
 8006598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659a:	b08f      	sub	sp, #60	@ 0x3c
 800659c:	af08      	add	r7, sp, #32
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	460b      	mov	r3, r1
 80065a2:	72fb      	strb	r3, [r7, #11]
#if (_USE_STEP_MODE == _STEP_MODE_MICRO)
	uint8_t vA = step_table[m->step_idx & STEP_MASK];
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8bdb      	ldrh	r3, [r3, #30]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	4a19      	ldr	r2, [pc, #100]	@ (8006614 <apply_pwm_micro+0x7c>)
 80065b0:	5cd3      	ldrb	r3, [r2, r3]
 80065b2:	75fb      	strb	r3, [r7, #23]
	uint8_t vB = step_table[(m->step_idx + (STEP_TABLE_SIZE >> 2)) & STEP_MASK];
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8bdb      	ldrh	r3, [r3, #30]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3308      	adds	r3, #8
 80065bc:	f003 031f 	and.w	r3, r3, #31
 80065c0:	4a14      	ldr	r2, [pc, #80]	@ (8006614 <apply_pwm_micro+0x7c>)
 80065c2:	5cd3      	ldrb	r3, [r2, r3]
 80065c4:	75bb      	strb	r3, [r7, #22]

	gpio_pwm4(m->in1p, m->in1b, m->in2p, m->in2b, m->in3p, m->in3b, m->in4p, m->in4b, now, vA, vB);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	889e      	ldrh	r6, [r3, #4]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	8a92      	ldrh	r2, [r2, #20]
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	6989      	ldr	r1, [r1, #24]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	8b80      	ldrh	r0, [r0, #28]
 80065ea:	7dbc      	ldrb	r4, [r7, #22]
 80065ec:	9406      	str	r4, [sp, #24]
 80065ee:	7dfc      	ldrb	r4, [r7, #23]
 80065f0:	9405      	str	r4, [sp, #20]
 80065f2:	7afc      	ldrb	r4, [r7, #11]
 80065f4:	9404      	str	r4, [sp, #16]
 80065f6:	9003      	str	r0, [sp, #12]
 80065f8:	9102      	str	r1, [sp, #8]
 80065fa:	9201      	str	r2, [sp, #4]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4663      	mov	r3, ip
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4631      	mov	r1, r6
 8006604:	4628      	mov	r0, r5
 8006606:	f7ff ff45 	bl	8006494 <gpio_pwm4>
#else
	(void)now; // silent
#endif
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006612:	bf00      	nop
 8006614:	08009aec 	.word	0x08009aec

08006618 <try_advance>:
#endif
}


static inline void try_advance(StepLL* m, uint32_t now_tick)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
	if (diff_u32(now_tick, m->prev_tick) >= m->period_ticks)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	4619      	mov	r1, r3
 8006628:	6838      	ldr	r0, [r7, #0]
 800662a:	f7ff ff25 	bl	8006478 <diff_u32>
 800662e:	4602      	mov	r2, r0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	429a      	cmp	r2, r3
 8006636:	d315      	bcc.n	8006664 <try_advance+0x4c>
	{
		m->prev_tick = now_tick;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	625a      	str	r2, [r3, #36]	@ 0x24
		m->total_step++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	@ 0x28
		m->step_idx = (uint16_t)((m->step_idx + m->dir_sign) & STEP_MASK);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8bdb      	ldrh	r3, [r3, #30]
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8006654:	b29b      	uxth	r3, r3
 8006656:	4413      	add	r3, r2
 8006658:	b29b      	uxth	r3, r3
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	b29a      	uxth	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	83da      	strh	r2, [r3, #30]
	}
}
 8006664:	bf00      	nop
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <step_init_all>:

// ---- Public Impl ----
void step_init_all(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
	left.step_idx = right.step_idx = 0;
 8006670:	2100      	movs	r1, #0
 8006672:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <step_init_all+0x30>)
 8006674:	460a      	mov	r2, r1
 8006676:	83da      	strh	r2, [r3, #30]
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <step_init_all+0x34>)
 800667a:	460a      	mov	r2, r1
 800667c:	83da      	strh	r2, [r3, #30]
	left.prev_tick = right.prev_tick = read_tick32();
 800667e:	f7ff fef1 	bl	8006464 <read_tick32>
 8006682:	4603      	mov	r3, r0
 8006684:	4a05      	ldr	r2, [pc, #20]	@ (800669c <step_init_all+0x30>)
 8006686:	6253      	str	r3, [r2, #36]	@ 0x24
 8006688:	4a05      	ldr	r2, [pc, #20]	@ (80066a0 <step_init_all+0x34>)
 800668a:	6253      	str	r3, [r2, #36]	@ 0x24
	left.total_step = right.total_step = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	4a03      	ldr	r2, [pc, #12]	@ (800669c <step_init_all+0x30>)
 8006690:	6293      	str	r3, [r2, #40]	@ 0x28
 8006692:	4a03      	ldr	r2, [pc, #12]	@ (80066a0 <step_init_all+0x34>)
 8006694:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000078 	.word	0x20000078
 80066a0:	20000048 	.word	0x20000048

080066a4 <step_tick_isr>:
	left.step_idx = right.step_idx = 0;
}


void step_tick_isr(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
	// Call this from your actual ISR (e.g., TIM16 IRQ) at ~10us period
	uint8_t pwm_now = (uint8_t)TIM_PWM_CNT; // (uint8_t) -> 'pwm_now' must be 0-255
 80066aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b0:	71fb      	strb	r3, [r7, #7]
	uint32_t tick_now = read_tick32(); // free‑running tick (wraps) | tim2
 80066b2:	f7ff fed7 	bl	8006464 <read_tick32>
 80066b6:	6038      	str	r0, [r7, #0]


	#if (_USE_STEP_MODE == _STEP_MODE_MICRO)
	apply_pwm_micro(&left, pwm_now);
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	4619      	mov	r1, r3
 80066bc:	4809      	ldr	r0, [pc, #36]	@ (80066e4 <step_tick_isr+0x40>)
 80066be:	f7ff ff6b 	bl	8006598 <apply_pwm_micro>
	apply_pwm_micro(&right, pwm_now);
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	4619      	mov	r1, r3
 80066c6:	4808      	ldr	r0, [pc, #32]	@ (80066e8 <step_tick_isr+0x44>)
 80066c8:	f7ff ff66 	bl	8006598 <apply_pwm_micro>
	#else
	apply_coils_table(&left);
	apply_coils_table(&right);
	#endif
	try_advance(&left, tick_now);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	4805      	ldr	r0, [pc, #20]	@ (80066e4 <step_tick_isr+0x40>)
 80066d0:	f7ff ffa2 	bl	8006618 <try_advance>
	try_advance(&right, tick_now);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	4804      	ldr	r0, [pc, #16]	@ (80066e8 <step_tick_isr+0x44>)
 80066d8:	f7ff ff9e 	bl	8006618 <try_advance>
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000048 	.word	0x20000048
 80066e8:	20000078 	.word	0x20000078

080066ec <i2c_init>:
#include "i2c.h"



void i2c_init(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
    // 1. I2C1 클럭 Enable
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 80066f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066fe:	6593      	str	r3, [r2, #88]	@ 0x58

    // 2. GPIOB 클럭 Enable
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8006700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // 3. PB8 (SCL), PB9 (SDA) Alternate Function 설정
    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));      // MODER clear
 8006710:	4b21      	ldr	r3, [pc, #132]	@ (8006798 <i2c_init+0xac>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a20      	ldr	r2, [pc, #128]	@ (8006798 <i2c_init+0xac>)
 8006716:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800671a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2 << (8 * 2)) | (2 << (9 * 2)));       // AF mode
 800671c:	4b1e      	ldr	r3, [pc, #120]	@ (8006798 <i2c_init+0xac>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1d      	ldr	r2, [pc, #116]	@ (8006798 <i2c_init+0xac>)
 8006722:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8006726:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (1 << 8) | (1 << 9);                    // Open-drain
 8006728:	4b1b      	ldr	r3, [pc, #108]	@ (8006798 <i2c_init+0xac>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a1a      	ldr	r2, [pc, #104]	@ (8006798 <i2c_init+0xac>)
 800672e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006732:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (8 * 2)) | (3 << (9 * 2));       // High speed
 8006734:	4b18      	ldr	r3, [pc, #96]	@ (8006798 <i2c_init+0xac>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a17      	ldr	r2, [pc, #92]	@ (8006798 <i2c_init+0xac>)
 800673a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800673e:	6093      	str	r3, [r2, #8]

    GPIOB->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8006740:	4b15      	ldr	r3, [pc, #84]	@ (8006798 <i2c_init+0xac>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <i2c_init+0xac>)
 8006746:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800674a:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1 << (8 * 2)) | (1 << (9 * 2)));       // Pull-up
 800674c:	4b12      	ldr	r3, [pc, #72]	@ (8006798 <i2c_init+0xac>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4a11      	ldr	r2, [pc, #68]	@ (8006798 <i2c_init+0xac>)
 8006752:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8006756:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
 8006758:	4b0f      	ldr	r3, [pc, #60]	@ (8006798 <i2c_init+0xac>)
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	4a0e      	ldr	r2, [pc, #56]	@ (8006798 <i2c_init+0xac>)
 800675e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006762:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4)));  // AF4 for I2C1
 8006764:	4b0c      	ldr	r3, [pc, #48]	@ (8006798 <i2c_init+0xac>)
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	4a0b      	ldr	r2, [pc, #44]	@ (8006798 <i2c_init+0xac>)
 800676a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800676e:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. I2C1 Disable before config
    I2C1->CR1 &= ~I2C_CR1_PE;
 8006770:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <i2c_init+0xb0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a09      	ldr	r2, [pc, #36]	@ (800679c <i2c_init+0xb0>)
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	6013      	str	r3, [r2, #0]

    // 5. TIMINGR: Standard mode 100kHz @ 64MHz
    I2C1->TIMINGR = 0x106133FF;
 800677c:	4b07      	ldr	r3, [pc, #28]	@ (800679c <i2c_init+0xb0>)
 800677e:	4a08      	ldr	r2, [pc, #32]	@ (80067a0 <i2c_init+0xb4>)
 8006780:	611a      	str	r2, [r3, #16]

    // 6. Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8006782:	4b06      	ldr	r3, [pc, #24]	@ (800679c <i2c_init+0xb0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a05      	ldr	r2, [pc, #20]	@ (800679c <i2c_init+0xb0>)
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	6013      	str	r3, [r2, #0]
}
 800678e:	bf00      	nop
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	48000400 	.word	0x48000400
 800679c:	40005400 	.word	0x40005400
 80067a0:	106133ff 	.word	0x106133ff

080067a4 <i2c_write>:

void i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	71fb      	strb	r3, [r7, #7]
 80067ae:	460b      	mov	r3, r1
 80067b0:	71bb      	strb	r3, [r7, #6]
 80067b2:	4613      	mov	r3, r2
 80067b4:	717b      	strb	r3, [r7, #5]
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006830 <i2c_write+0x8c>)
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);   // 레지스터 + 데이터 = 2바이트
 80067be:	4b1c      	ldr	r3, [pc, #112]	@ (8006830 <i2c_write+0x8c>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006830 <i2c_write+0x8c>)
 80067c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c8:	6053      	str	r3, [r2, #4]
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;             // Write
 80067ca:	4b19      	ldr	r3, [pc, #100]	@ (8006830 <i2c_write+0x8c>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4a18      	ldr	r2, [pc, #96]	@ (8006830 <i2c_write+0x8c>)
 80067d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067d4:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START | I2C_CR2_AUTOEND;
 80067d6:	4b16      	ldr	r3, [pc, #88]	@ (8006830 <i2c_write+0x8c>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4a15      	ldr	r2, [pc, #84]	@ (8006830 <i2c_write+0x8c>)
 80067dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80067e4:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 80067e6:	bf00      	nop
 80067e8:	4b11      	ldr	r3, [pc, #68]	@ (8006830 <i2c_write+0x8c>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f9      	beq.n	80067e8 <i2c_write+0x44>
    I2C1->TXDR = reg_addr;
 80067f4:	4a0e      	ldr	r2, [pc, #56]	@ (8006830 <i2c_write+0x8c>)
 80067f6:	79bb      	ldrb	r3, [r7, #6]
 80067f8:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 80067fa:	bf00      	nop
 80067fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006830 <i2c_write+0x8c>)
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f9      	beq.n	80067fc <i2c_write+0x58>
    I2C1->TXDR = data;
 8006808:	4a09      	ldr	r2, [pc, #36]	@ (8006830 <i2c_write+0x8c>)
 800680a:	797b      	ldrb	r3, [r7, #5]
 800680c:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_STOPF));
 800680e:	bf00      	nop
 8006810:	4b07      	ldr	r3, [pc, #28]	@ (8006830 <i2c_write+0x8c>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f9      	beq.n	8006810 <i2c_write+0x6c>
    I2C1->ICR = I2C_ICR_STOPCF;
 800681c:	4b04      	ldr	r3, [pc, #16]	@ (8006830 <i2c_write+0x8c>)
 800681e:	2220      	movs	r2, #32
 8006820:	61da      	str	r2, [r3, #28]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40005400 	.word	0x40005400

08006834 <i2c_read>:

uint8_t i2c_read(uint8_t slave_addr, uint8_t reg_addr)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	460a      	mov	r2, r1
 800683e:	71fb      	strb	r3, [r7, #7]
 8006840:	4613      	mov	r3, r2
 8006842:	71bb      	strb	r3, [r7, #6]
    uint8_t data;

    // Write phase: 레지스터 주소 보내기
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <i2c_read+0xc4>)
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 800684c:	4b2a      	ldr	r3, [pc, #168]	@ (80068f8 <i2c_read+0xc4>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	4a29      	ldr	r2, [pc, #164]	@ (80068f8 <i2c_read+0xc4>)
 8006852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006856:	6053      	str	r3, [r2, #4]
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;            // Write
 8006858:	4b27      	ldr	r3, [pc, #156]	@ (80068f8 <i2c_read+0xc4>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	4a26      	ldr	r2, [pc, #152]	@ (80068f8 <i2c_read+0xc4>)
 800685e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006862:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START;
 8006864:	4b24      	ldr	r3, [pc, #144]	@ (80068f8 <i2c_read+0xc4>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a23      	ldr	r2, [pc, #140]	@ (80068f8 <i2c_read+0xc4>)
 800686a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800686e:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 8006870:	bf00      	nop
 8006872:	4b21      	ldr	r3, [pc, #132]	@ (80068f8 <i2c_read+0xc4>)
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f9      	beq.n	8006872 <i2c_read+0x3e>
    I2C1->TXDR = reg_addr;
 800687e:	4a1e      	ldr	r2, [pc, #120]	@ (80068f8 <i2c_read+0xc4>)
 8006880:	79bb      	ldrb	r3, [r7, #6]
 8006882:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_TC));
 8006884:	bf00      	nop
 8006886:	4b1c      	ldr	r3, [pc, #112]	@ (80068f8 <i2c_read+0xc4>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f9      	beq.n	8006886 <i2c_read+0x52>

    // Read phase: 데이터 1바이트 읽기
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 8006892:	79fb      	ldrb	r3, [r7, #7]
 8006894:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <i2c_read+0xc4>)
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 800689a:	4b17      	ldr	r3, [pc, #92]	@ (80068f8 <i2c_read+0xc4>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4a16      	ldr	r2, [pc, #88]	@ (80068f8 <i2c_read+0xc4>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068a4:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_RD_WRN;            // Read
 80068a6:	4b14      	ldr	r3, [pc, #80]	@ (80068f8 <i2c_read+0xc4>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	4a13      	ldr	r2, [pc, #76]	@ (80068f8 <i2c_read+0xc4>)
 80068ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068b0:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START | I2C_CR2_AUTOEND;
 80068b2:	4b11      	ldr	r3, [pc, #68]	@ (80068f8 <i2c_read+0xc4>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a10      	ldr	r2, [pc, #64]	@ (80068f8 <i2c_read+0xc4>)
 80068b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80068bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80068c0:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_RXNE));
 80068c2:	bf00      	nop
 80068c4:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <i2c_read+0xc4>)
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f9      	beq.n	80068c4 <i2c_read+0x90>
    data = I2C1->RXDR;
 80068d0:	4b09      	ldr	r3, [pc, #36]	@ (80068f8 <i2c_read+0xc4>)
 80068d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d4:	73fb      	strb	r3, [r7, #15]

    while (!(I2C1->ISR & I2C_ISR_STOPF));
 80068d6:	bf00      	nop
 80068d8:	4b07      	ldr	r3, [pc, #28]	@ (80068f8 <i2c_read+0xc4>)
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f9      	beq.n	80068d8 <i2c_read+0xa4>
    I2C1->ICR = I2C_ICR_STOPCF;
 80068e4:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <i2c_read+0xc4>)
 80068e6:	2220      	movs	r2, #32
 80068e8:	61da      	str	r2, [r3, #28]

    return data;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40005400 	.word	0x40005400

080068fc <uart_init>:
extern UART_HandleTypeDef huart1;



void uart_init(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
	HAL_UART_Init(&huart1);
 8006900:	4802      	ldr	r0, [pc, #8]	@ (800690c <uart_init+0x10>)
 8006902:	f7ff f873 	bl	80059ec <HAL_UART_Init>
}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000668 	.word	0x20000668

08006910 <uart_printf>:


void uart_printf(const char *fmt, ...)
{
 8006910:	b40f      	push	{r0, r1, r2, r3}
 8006912:	b580      	push	{r7, lr}
 8006914:	b0a2      	sub	sp, #136	@ 0x88
 8006916:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;
    va_start(args, fmt);
 8006918:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800691c:	607b      	str	r3, [r7, #4]
    vsnprintf(buf, sizeof(buf), fmt, args);
 800691e:	f107 0008 	add.w	r0, r7, #8
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8006928:	2180      	movs	r1, #128	@ 0x80
 800692a:	f000 fe27 	bl	800757c <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 800692e:	f107 0308 	add.w	r3, r7, #8
 8006932:	4618      	mov	r0, r3
 8006934:	f7f9 fc74 	bl	8000220 <strlen>
 8006938:	4603      	mov	r3, r0
 800693a:	b29a      	uxth	r2, r3
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	f04f 33ff 	mov.w	r3, #4294967295
 8006944:	4804      	ldr	r0, [pc, #16]	@ (8006958 <uart_printf+0x48>)
 8006946:	f7ff f8a1 	bl	8005a8c <HAL_UART_Transmit>
}
 800694a:	bf00      	nop
 800694c:	3788      	adds	r7, #136	@ 0x88
 800694e:	46bd      	mov	sp, r7
 8006950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006954:	b004      	add	sp, #16
 8006956:	4770      	bx	lr
 8006958:	20000668 	.word	0x20000668

0800695c <flash_write_color_reference>:

#include "flash.h"


void flash_write_color_reference(uint8_t sensor_side, uint8_t color_index, reference_entry_t entry)
{
 800695c:	b082      	sub	sp, #8
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	f107 0c20 	add.w	ip, r7, #32
 8006968:	e88c 000c 	stmia.w	ip, {r2, r3}
 800696c:	4603      	mov	r3, r0
 800696e:	71fb      	strb	r3, [r7, #7]
 8006970:	460b      	mov	r3, r1
 8006972:	71bb      	strb	r3, [r7, #6]
    uint32_t base_addr = (sensor_side == BH1745_ADDR_LEFT) ? FLASH_COLOR_TABLE_ADDR_LEFT : FLASH_COLOR_TABLE_ADDR_RIGHT;
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b38      	cmp	r3, #56	@ 0x38
 8006978:	d101      	bne.n	800697e <flash_write_color_reference+0x22>
 800697a:	4b17      	ldr	r3, [pc, #92]	@ (80069d8 <flash_write_color_reference+0x7c>)
 800697c:	e000      	b.n	8006980 <flash_write_color_reference+0x24>
 800697e:	4b17      	ldr	r3, [pc, #92]	@ (80069dc <flash_write_color_reference+0x80>)
 8006980:	613b      	str	r3, [r7, #16]
    uint32_t addr = base_addr + color_index * FLASH_COLOR_ENTRY_SIZE;
 8006982:	79bb      	ldrb	r3, [r7, #6]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

    HAL_FLASH_Unlock();
 800698c:	f7fc fc50 	bl	8003230 <HAL_FLASH_Unlock>

    // struct를 4바이트씩 나눠서 저장
    uint64_t* data = (uint64_t*)&entry;
 8006990:	f107 0320 	add.w	r3, r7, #32
 8006994:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(reference_entry_t) / 8; i++) {
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e010      	b.n	80069be <flash_write_color_reference+0x62>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i * 8, data[i]);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	461a      	mov	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	18d1      	adds	r1, r2, r3
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	2001      	movs	r0, #1
 80069b4:	f7fc fbf8 	bl	80031a8 <HAL_FLASH_Program>
    for (int i = 0; i < sizeof(reference_entry_t) / 8; i++) {
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	3301      	adds	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d9eb      	bls.n	800699c <flash_write_color_reference+0x40>
    }

    HAL_FLASH_Lock();
 80069c4:	f7fc fc56 	bl	8003274 <HAL_FLASH_Lock>
}
 80069c8:	bf00      	nop
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d2:	b002      	add	sp, #8
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	0807f800 	.word	0x0807f800
 80069dc:	0807f000 	.word	0x0807f000

080069e0 <flash_read_color_reference>:

reference_entry_t flash_read_color_reference(uint8_t sensor_side, uint8_t color_index)
{
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b089      	sub	sp, #36	@ 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
 80069ec:	4613      	mov	r3, r2
 80069ee:	70bb      	strb	r3, [r7, #2]
    uint32_t base_addr = (sensor_side == BH1745_ADDR_LEFT) ? FLASH_COLOR_TABLE_ADDR_LEFT : FLASH_COLOR_TABLE_ADDR_RIGHT;
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	2b38      	cmp	r3, #56	@ 0x38
 80069f4:	d101      	bne.n	80069fa <flash_read_color_reference+0x1a>
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <flash_read_color_reference+0x4c>)
 80069f8:	e000      	b.n	80069fc <flash_read_color_reference+0x1c>
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <flash_read_color_reference+0x50>)
 80069fc:	61fb      	str	r3, [r7, #28]
    uint32_t addr = base_addr + color_index * FLASH_COLOR_ENTRY_SIZE;
 80069fe:	78bb      	ldrb	r3, [r7, #2]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]

    reference_entry_t entry;
    memcpy(&entry, (void*)addr, FLASH_COLOR_ENTRY_SIZE);
 8006a08:	69b9      	ldr	r1, [r7, #24]
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	2210      	movs	r2, #16
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fe40 	bl	8007696 <memcpy>

    return entry;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	461c      	mov	r4, r3
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	3724      	adds	r7, #36	@ 0x24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd90      	pop	{r4, r7, pc}
 8006a2c:	0807f800 	.word	0x0807f800
 8006a30:	0807f000 	.word	0x0807f000

08006a34 <flash_erase_color_table>:

void flash_erase_color_table(uint8_t sensor_side)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	60fb      	str	r3, [r7, #12]
    erase_init.Page      = (sensor_side == BH1745_ADDR_LEFT) ? (FLASH_COLOR_TABLE_ADDR_LEFT - 0x08000000) / FLASH_PAGE_SIZE : (FLASH_COLOR_TABLE_ADDR_RIGHT - 0x08000000) / FLASH_PAGE_SIZE;
 8006a42:	237f      	movs	r3, #127	@ 0x7f
 8006a44:	613b      	str	r3, [r7, #16]
    erase_init.NbPages   = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 8006a4a:	f7fc fbf1 	bl	8003230 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 8006a4e:	f107 0208 	add.w	r2, r7, #8
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fc fcb9 	bl	80033d0 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8006a5e:	f7fc fc09 	bl	8003274 <HAL_FLASH_Lock>
}
 8006a62:	bf00      	nop
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <__cvt>:
 8006a6a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6e:	ec57 6b10 	vmov	r6, r7, d0
 8006a72:	2f00      	cmp	r7, #0
 8006a74:	460c      	mov	r4, r1
 8006a76:	4619      	mov	r1, r3
 8006a78:	463b      	mov	r3, r7
 8006a7a:	bfbb      	ittet	lt
 8006a7c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a80:	461f      	movlt	r7, r3
 8006a82:	2300      	movge	r3, #0
 8006a84:	232d      	movlt	r3, #45	@ 0x2d
 8006a86:	700b      	strb	r3, [r1, #0]
 8006a88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a8a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a8e:	4691      	mov	r9, r2
 8006a90:	f023 0820 	bic.w	r8, r3, #32
 8006a94:	bfbc      	itt	lt
 8006a96:	4632      	movlt	r2, r6
 8006a98:	4616      	movlt	r6, r2
 8006a9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a9e:	d005      	beq.n	8006aac <__cvt+0x42>
 8006aa0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aa4:	d100      	bne.n	8006aa8 <__cvt+0x3e>
 8006aa6:	3401      	adds	r4, #1
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	e000      	b.n	8006aae <__cvt+0x44>
 8006aac:	2103      	movs	r1, #3
 8006aae:	ab03      	add	r3, sp, #12
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	ab02      	add	r3, sp, #8
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	ec47 6b10 	vmov	d0, r6, r7
 8006aba:	4653      	mov	r3, sl
 8006abc:	4622      	mov	r2, r4
 8006abe:	f000 fe83 	bl	80077c8 <_dtoa_r>
 8006ac2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	d119      	bne.n	8006afe <__cvt+0x94>
 8006aca:	f019 0f01 	tst.w	r9, #1
 8006ace:	d00e      	beq.n	8006aee <__cvt+0x84>
 8006ad0:	eb00 0904 	add.w	r9, r0, r4
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	f7f9 ffcc 	bl	8000a78 <__aeabi_dcmpeq>
 8006ae0:	b108      	cbz	r0, 8006ae6 <__cvt+0x7c>
 8006ae2:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ae6:	2230      	movs	r2, #48	@ 0x30
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	454b      	cmp	r3, r9
 8006aec:	d31e      	bcc.n	8006b2c <__cvt+0xc2>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006af2:	1b5b      	subs	r3, r3, r5
 8006af4:	4628      	mov	r0, r5
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	b004      	add	sp, #16
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b02:	eb00 0904 	add.w	r9, r0, r4
 8006b06:	d1e5      	bne.n	8006ad4 <__cvt+0x6a>
 8006b08:	7803      	ldrb	r3, [r0, #0]
 8006b0a:	2b30      	cmp	r3, #48	@ 0x30
 8006b0c:	d10a      	bne.n	8006b24 <__cvt+0xba>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2300      	movs	r3, #0
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 ffaf 	bl	8000a78 <__aeabi_dcmpeq>
 8006b1a:	b918      	cbnz	r0, 8006b24 <__cvt+0xba>
 8006b1c:	f1c4 0401 	rsb	r4, r4, #1
 8006b20:	f8ca 4000 	str.w	r4, [sl]
 8006b24:	f8da 3000 	ldr.w	r3, [sl]
 8006b28:	4499      	add	r9, r3
 8006b2a:	e7d3      	b.n	8006ad4 <__cvt+0x6a>
 8006b2c:	1c59      	adds	r1, r3, #1
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	e7d9      	b.n	8006ae8 <__cvt+0x7e>

08006b34 <__exponent>:
 8006b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b36:	2900      	cmp	r1, #0
 8006b38:	bfba      	itte	lt
 8006b3a:	4249      	neglt	r1, r1
 8006b3c:	232d      	movlt	r3, #45	@ 0x2d
 8006b3e:	232b      	movge	r3, #43	@ 0x2b
 8006b40:	2909      	cmp	r1, #9
 8006b42:	7002      	strb	r2, [r0, #0]
 8006b44:	7043      	strb	r3, [r0, #1]
 8006b46:	dd29      	ble.n	8006b9c <__exponent+0x68>
 8006b48:	f10d 0307 	add.w	r3, sp, #7
 8006b4c:	461d      	mov	r5, r3
 8006b4e:	270a      	movs	r7, #10
 8006b50:	461a      	mov	r2, r3
 8006b52:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b56:	fb07 1416 	mls	r4, r7, r6, r1
 8006b5a:	3430      	adds	r4, #48	@ 0x30
 8006b5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b60:	460c      	mov	r4, r1
 8006b62:	2c63      	cmp	r4, #99	@ 0x63
 8006b64:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b68:	4631      	mov	r1, r6
 8006b6a:	dcf1      	bgt.n	8006b50 <__exponent+0x1c>
 8006b6c:	3130      	adds	r1, #48	@ 0x30
 8006b6e:	1e94      	subs	r4, r2, #2
 8006b70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b74:	1c41      	adds	r1, r0, #1
 8006b76:	4623      	mov	r3, r4
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	d30a      	bcc.n	8006b92 <__exponent+0x5e>
 8006b7c:	f10d 0309 	add.w	r3, sp, #9
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	42ac      	cmp	r4, r5
 8006b84:	bf88      	it	hi
 8006b86:	2300      	movhi	r3, #0
 8006b88:	3302      	adds	r3, #2
 8006b8a:	4403      	add	r3, r0
 8006b8c:	1a18      	subs	r0, r3, r0
 8006b8e:	b003      	add	sp, #12
 8006b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b9a:	e7ed      	b.n	8006b78 <__exponent+0x44>
 8006b9c:	2330      	movs	r3, #48	@ 0x30
 8006b9e:	3130      	adds	r1, #48	@ 0x30
 8006ba0:	7083      	strb	r3, [r0, #2]
 8006ba2:	70c1      	strb	r1, [r0, #3]
 8006ba4:	1d03      	adds	r3, r0, #4
 8006ba6:	e7f1      	b.n	8006b8c <__exponent+0x58>

08006ba8 <_printf_float>:
 8006ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	b08d      	sub	sp, #52	@ 0x34
 8006bae:	460c      	mov	r4, r1
 8006bb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	4605      	mov	r5, r0
 8006bba:	f000 fcf5 	bl	80075a8 <_localeconv_r>
 8006bbe:	6803      	ldr	r3, [r0, #0]
 8006bc0:	9304      	str	r3, [sp, #16]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7f9 fb2c 	bl	8000220 <strlen>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd0:	9005      	str	r0, [sp, #20]
 8006bd2:	3307      	adds	r3, #7
 8006bd4:	f023 0307 	bic.w	r3, r3, #7
 8006bd8:	f103 0208 	add.w	r2, r3, #8
 8006bdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006be0:	f8d4 b000 	ldr.w	fp, [r4]
 8006be4:	f8c8 2000 	str.w	r2, [r8]
 8006be8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bf0:	9307      	str	r3, [sp, #28]
 8006bf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8006e70 <_printf_float+0x2c8>)
 8006c00:	f04f 32ff 	mov.w	r2, #4294967295
 8006c04:	f7f9 ff6a 	bl	8000adc <__aeabi_dcmpun>
 8006c08:	bb70      	cbnz	r0, 8006c68 <_printf_float+0xc0>
 8006c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c0e:	4b98      	ldr	r3, [pc, #608]	@ (8006e70 <_printf_float+0x2c8>)
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	f7f9 ff44 	bl	8000aa0 <__aeabi_dcmple>
 8006c18:	bb30      	cbnz	r0, 8006c68 <_printf_float+0xc0>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7f9 ff33 	bl	8000a8c <__aeabi_dcmplt>
 8006c26:	b110      	cbz	r0, 8006c2e <_printf_float+0x86>
 8006c28:	232d      	movs	r3, #45	@ 0x2d
 8006c2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c2e:	4a91      	ldr	r2, [pc, #580]	@ (8006e74 <_printf_float+0x2cc>)
 8006c30:	4b91      	ldr	r3, [pc, #580]	@ (8006e78 <_printf_float+0x2d0>)
 8006c32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c36:	bf8c      	ite	hi
 8006c38:	4690      	movhi	r8, r2
 8006c3a:	4698      	movls	r8, r3
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	6123      	str	r3, [r4, #16]
 8006c40:	f02b 0304 	bic.w	r3, fp, #4
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	f04f 0900 	mov.w	r9, #0
 8006c4a:	9700      	str	r7, [sp, #0]
 8006c4c:	4633      	mov	r3, r6
 8006c4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c50:	4621      	mov	r1, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 f9d2 	bl	8006ffc <_printf_common>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f040 808d 	bne.w	8006d78 <_printf_float+0x1d0>
 8006c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c62:	b00d      	add	sp, #52	@ 0x34
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	4642      	mov	r2, r8
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	4649      	mov	r1, r9
 8006c70:	f7f9 ff34 	bl	8000adc <__aeabi_dcmpun>
 8006c74:	b140      	cbz	r0, 8006c88 <_printf_float+0xe0>
 8006c76:	464b      	mov	r3, r9
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bfbc      	itt	lt
 8006c7c:	232d      	movlt	r3, #45	@ 0x2d
 8006c7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c82:	4a7e      	ldr	r2, [pc, #504]	@ (8006e7c <_printf_float+0x2d4>)
 8006c84:	4b7e      	ldr	r3, [pc, #504]	@ (8006e80 <_printf_float+0x2d8>)
 8006c86:	e7d4      	b.n	8006c32 <_printf_float+0x8a>
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c8e:	9206      	str	r2, [sp, #24]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	d13b      	bne.n	8006d0c <_printf_float+0x164>
 8006c94:	2306      	movs	r3, #6
 8006c96:	6063      	str	r3, [r4, #4]
 8006c98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6022      	str	r2, [r4, #0]
 8006ca0:	9303      	str	r3, [sp, #12]
 8006ca2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ca4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ca8:	ab09      	add	r3, sp, #36	@ 0x24
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	ec49 8b10 	vmov	d0, r8, r9
 8006cb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f7ff fed7 	bl	8006a6a <__cvt>
 8006cbc:	9b06      	ldr	r3, [sp, #24]
 8006cbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006cc0:	2b47      	cmp	r3, #71	@ 0x47
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	d129      	bne.n	8006d1a <_printf_float+0x172>
 8006cc6:	1cc8      	adds	r0, r1, #3
 8006cc8:	db02      	blt.n	8006cd0 <_printf_float+0x128>
 8006cca:	6863      	ldr	r3, [r4, #4]
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	dd41      	ble.n	8006d54 <_printf_float+0x1ac>
 8006cd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cd4:	fa5f fa8a 	uxtb.w	sl, sl
 8006cd8:	3901      	subs	r1, #1
 8006cda:	4652      	mov	r2, sl
 8006cdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ce0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ce2:	f7ff ff27 	bl	8006b34 <__exponent>
 8006ce6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ce8:	1813      	adds	r3, r2, r0
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	4681      	mov	r9, r0
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	dc02      	bgt.n	8006cf8 <_printf_float+0x150>
 8006cf2:	6822      	ldr	r2, [r4, #0]
 8006cf4:	07d2      	lsls	r2, r2, #31
 8006cf6:	d501      	bpl.n	8006cfc <_printf_float+0x154>
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0a2      	beq.n	8006c4a <_printf_float+0xa2>
 8006d04:	232d      	movs	r3, #45	@ 0x2d
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0a:	e79e      	b.n	8006c4a <_printf_float+0xa2>
 8006d0c:	9a06      	ldr	r2, [sp, #24]
 8006d0e:	2a47      	cmp	r2, #71	@ 0x47
 8006d10:	d1c2      	bne.n	8006c98 <_printf_float+0xf0>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1c0      	bne.n	8006c98 <_printf_float+0xf0>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e7bd      	b.n	8006c96 <_printf_float+0xee>
 8006d1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d1e:	d9db      	bls.n	8006cd8 <_printf_float+0x130>
 8006d20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d24:	d118      	bne.n	8006d58 <_printf_float+0x1b0>
 8006d26:	2900      	cmp	r1, #0
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	dd0b      	ble.n	8006d44 <_printf_float+0x19c>
 8006d2c:	6121      	str	r1, [r4, #16]
 8006d2e:	b913      	cbnz	r3, 8006d36 <_printf_float+0x18e>
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	07d0      	lsls	r0, r2, #31
 8006d34:	d502      	bpl.n	8006d3c <_printf_float+0x194>
 8006d36:	3301      	adds	r3, #1
 8006d38:	440b      	add	r3, r1
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d3e:	f04f 0900 	mov.w	r9, #0
 8006d42:	e7db      	b.n	8006cfc <_printf_float+0x154>
 8006d44:	b913      	cbnz	r3, 8006d4c <_printf_float+0x1a4>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	07d2      	lsls	r2, r2, #31
 8006d4a:	d501      	bpl.n	8006d50 <_printf_float+0x1a8>
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	e7f4      	b.n	8006d3a <_printf_float+0x192>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e7f2      	b.n	8006d3a <_printf_float+0x192>
 8006d54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	db05      	blt.n	8006d6a <_printf_float+0x1c2>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	6121      	str	r1, [r4, #16]
 8006d62:	07d8      	lsls	r0, r3, #31
 8006d64:	d5ea      	bpl.n	8006d3c <_printf_float+0x194>
 8006d66:	1c4b      	adds	r3, r1, #1
 8006d68:	e7e7      	b.n	8006d3a <_printf_float+0x192>
 8006d6a:	2900      	cmp	r1, #0
 8006d6c:	bfd4      	ite	le
 8006d6e:	f1c1 0202 	rsble	r2, r1, #2
 8006d72:	2201      	movgt	r2, #1
 8006d74:	4413      	add	r3, r2
 8006d76:	e7e0      	b.n	8006d3a <_printf_float+0x192>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	055a      	lsls	r2, r3, #21
 8006d7c:	d407      	bmi.n	8006d8e <_printf_float+0x1e6>
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	4642      	mov	r2, r8
 8006d82:	4631      	mov	r1, r6
 8006d84:	4628      	mov	r0, r5
 8006d86:	47b8      	blx	r7
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d12b      	bne.n	8006de4 <_printf_float+0x23c>
 8006d8c:	e767      	b.n	8006c5e <_printf_float+0xb6>
 8006d8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d92:	f240 80dd 	bls.w	8006f50 <_printf_float+0x3a8>
 8006d96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f7f9 fe6b 	bl	8000a78 <__aeabi_dcmpeq>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	d033      	beq.n	8006e0e <_printf_float+0x266>
 8006da6:	4a37      	ldr	r2, [pc, #220]	@ (8006e84 <_printf_float+0x2dc>)
 8006da8:	2301      	movs	r3, #1
 8006daa:	4631      	mov	r1, r6
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b8      	blx	r7
 8006db0:	3001      	adds	r0, #1
 8006db2:	f43f af54 	beq.w	8006c5e <_printf_float+0xb6>
 8006db6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006dba:	4543      	cmp	r3, r8
 8006dbc:	db02      	blt.n	8006dc4 <_printf_float+0x21c>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	07d8      	lsls	r0, r3, #31
 8006dc2:	d50f      	bpl.n	8006de4 <_printf_float+0x23c>
 8006dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af45 	beq.w	8006c5e <_printf_float+0xb6>
 8006dd4:	f04f 0900 	mov.w	r9, #0
 8006dd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ddc:	f104 0a1a 	add.w	sl, r4, #26
 8006de0:	45c8      	cmp	r8, r9
 8006de2:	dc09      	bgt.n	8006df8 <_printf_float+0x250>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	079b      	lsls	r3, r3, #30
 8006de8:	f100 8103 	bmi.w	8006ff2 <_printf_float+0x44a>
 8006dec:	68e0      	ldr	r0, [r4, #12]
 8006dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006df0:	4298      	cmp	r0, r3
 8006df2:	bfb8      	it	lt
 8006df4:	4618      	movlt	r0, r3
 8006df6:	e734      	b.n	8006c62 <_printf_float+0xba>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af2b 	beq.w	8006c5e <_printf_float+0xb6>
 8006e08:	f109 0901 	add.w	r9, r9, #1
 8006e0c:	e7e8      	b.n	8006de0 <_printf_float+0x238>
 8006e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dc39      	bgt.n	8006e88 <_printf_float+0x2e0>
 8006e14:	4a1b      	ldr	r2, [pc, #108]	@ (8006e84 <_printf_float+0x2dc>)
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af1d 	beq.w	8006c5e <_printf_float+0xb6>
 8006e24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e28:	ea59 0303 	orrs.w	r3, r9, r3
 8006e2c:	d102      	bne.n	8006e34 <_printf_float+0x28c>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	07d9      	lsls	r1, r3, #31
 8006e32:	d5d7      	bpl.n	8006de4 <_printf_float+0x23c>
 8006e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af0d 	beq.w	8006c5e <_printf_float+0xb6>
 8006e44:	f04f 0a00 	mov.w	sl, #0
 8006e48:	f104 0b1a 	add.w	fp, r4, #26
 8006e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4e:	425b      	negs	r3, r3
 8006e50:	4553      	cmp	r3, sl
 8006e52:	dc01      	bgt.n	8006e58 <_printf_float+0x2b0>
 8006e54:	464b      	mov	r3, r9
 8006e56:	e793      	b.n	8006d80 <_printf_float+0x1d8>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	465a      	mov	r2, fp
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f aefb 	beq.w	8006c5e <_printf_float+0xb6>
 8006e68:	f10a 0a01 	add.w	sl, sl, #1
 8006e6c:	e7ee      	b.n	8006e4c <_printf_float+0x2a4>
 8006e6e:	bf00      	nop
 8006e70:	7fefffff 	.word	0x7fefffff
 8006e74:	08009b10 	.word	0x08009b10
 8006e78:	08009b0c 	.word	0x08009b0c
 8006e7c:	08009b18 	.word	0x08009b18
 8006e80:	08009b14 	.word	0x08009b14
 8006e84:	08009b1c 	.word	0x08009b1c
 8006e88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e8e:	4553      	cmp	r3, sl
 8006e90:	bfa8      	it	ge
 8006e92:	4653      	movge	r3, sl
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	4699      	mov	r9, r3
 8006e98:	dc36      	bgt.n	8006f08 <_printf_float+0x360>
 8006e9a:	f04f 0b00 	mov.w	fp, #0
 8006e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea2:	f104 021a 	add.w	r2, r4, #26
 8006ea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ea8:	9306      	str	r3, [sp, #24]
 8006eaa:	eba3 0309 	sub.w	r3, r3, r9
 8006eae:	455b      	cmp	r3, fp
 8006eb0:	dc31      	bgt.n	8006f16 <_printf_float+0x36e>
 8006eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eb4:	459a      	cmp	sl, r3
 8006eb6:	dc3a      	bgt.n	8006f2e <_printf_float+0x386>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07da      	lsls	r2, r3, #31
 8006ebc:	d437      	bmi.n	8006f2e <_printf_float+0x386>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	ebaa 0903 	sub.w	r9, sl, r3
 8006ec4:	9b06      	ldr	r3, [sp, #24]
 8006ec6:	ebaa 0303 	sub.w	r3, sl, r3
 8006eca:	4599      	cmp	r9, r3
 8006ecc:	bfa8      	it	ge
 8006ece:	4699      	movge	r9, r3
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	dc33      	bgt.n	8006f3e <_printf_float+0x396>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ede:	f104 0b1a 	add.w	fp, r4, #26
 8006ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ee8:	eba3 0309 	sub.w	r3, r3, r9
 8006eec:	4543      	cmp	r3, r8
 8006eee:	f77f af79 	ble.w	8006de4 <_printf_float+0x23c>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	465a      	mov	r2, fp
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f aeae 	beq.w	8006c5e <_printf_float+0xb6>
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	e7ec      	b.n	8006ee2 <_printf_float+0x33a>
 8006f08:	4642      	mov	r2, r8
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	d1c2      	bne.n	8006e9a <_printf_float+0x2f2>
 8006f14:	e6a3      	b.n	8006c5e <_printf_float+0xb6>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	9206      	str	r2, [sp, #24]
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	f43f ae9c 	beq.w	8006c5e <_printf_float+0xb6>
 8006f26:	9a06      	ldr	r2, [sp, #24]
 8006f28:	f10b 0b01 	add.w	fp, fp, #1
 8006f2c:	e7bb      	b.n	8006ea6 <_printf_float+0x2fe>
 8006f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f32:	4631      	mov	r1, r6
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b8      	blx	r7
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d1c0      	bne.n	8006ebe <_printf_float+0x316>
 8006f3c:	e68f      	b.n	8006c5e <_printf_float+0xb6>
 8006f3e:	9a06      	ldr	r2, [sp, #24]
 8006f40:	464b      	mov	r3, r9
 8006f42:	4442      	add	r2, r8
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d1c3      	bne.n	8006ed6 <_printf_float+0x32e>
 8006f4e:	e686      	b.n	8006c5e <_printf_float+0xb6>
 8006f50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f54:	f1ba 0f01 	cmp.w	sl, #1
 8006f58:	dc01      	bgt.n	8006f5e <_printf_float+0x3b6>
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d536      	bpl.n	8006fcc <_printf_float+0x424>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4642      	mov	r2, r8
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae78 	beq.w	8006c5e <_printf_float+0xb6>
 8006f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f72:	4631      	mov	r1, r6
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f43f ae70 	beq.w	8006c5e <_printf_float+0xb6>
 8006f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f82:	2200      	movs	r2, #0
 8006f84:	2300      	movs	r3, #0
 8006f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f8a:	f7f9 fd75 	bl	8000a78 <__aeabi_dcmpeq>
 8006f8e:	b9c0      	cbnz	r0, 8006fc2 <_printf_float+0x41a>
 8006f90:	4653      	mov	r3, sl
 8006f92:	f108 0201 	add.w	r2, r8, #1
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d10c      	bne.n	8006fba <_printf_float+0x412>
 8006fa0:	e65d      	b.n	8006c5e <_printf_float+0xb6>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	465a      	mov	r2, fp
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	f43f ae56 	beq.w	8006c5e <_printf_float+0xb6>
 8006fb2:	f108 0801 	add.w	r8, r8, #1
 8006fb6:	45d0      	cmp	r8, sl
 8006fb8:	dbf3      	blt.n	8006fa2 <_printf_float+0x3fa>
 8006fba:	464b      	mov	r3, r9
 8006fbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fc0:	e6df      	b.n	8006d82 <_printf_float+0x1da>
 8006fc2:	f04f 0800 	mov.w	r8, #0
 8006fc6:	f104 0b1a 	add.w	fp, r4, #26
 8006fca:	e7f4      	b.n	8006fb6 <_printf_float+0x40e>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4642      	mov	r2, r8
 8006fd0:	e7e1      	b.n	8006f96 <_printf_float+0x3ee>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	464a      	mov	r2, r9
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	f43f ae3e 	beq.w	8006c5e <_printf_float+0xb6>
 8006fe2:	f108 0801 	add.w	r8, r8, #1
 8006fe6:	68e3      	ldr	r3, [r4, #12]
 8006fe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fea:	1a5b      	subs	r3, r3, r1
 8006fec:	4543      	cmp	r3, r8
 8006fee:	dcf0      	bgt.n	8006fd2 <_printf_float+0x42a>
 8006ff0:	e6fc      	b.n	8006dec <_printf_float+0x244>
 8006ff2:	f04f 0800 	mov.w	r8, #0
 8006ff6:	f104 0919 	add.w	r9, r4, #25
 8006ffa:	e7f4      	b.n	8006fe6 <_printf_float+0x43e>

08006ffc <_printf_common>:
 8006ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	4616      	mov	r6, r2
 8007002:	4698      	mov	r8, r3
 8007004:	688a      	ldr	r2, [r1, #8]
 8007006:	690b      	ldr	r3, [r1, #16]
 8007008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800700c:	4293      	cmp	r3, r2
 800700e:	bfb8      	it	lt
 8007010:	4613      	movlt	r3, r2
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007018:	4607      	mov	r7, r0
 800701a:	460c      	mov	r4, r1
 800701c:	b10a      	cbz	r2, 8007022 <_printf_common+0x26>
 800701e:	3301      	adds	r3, #1
 8007020:	6033      	str	r3, [r6, #0]
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	0699      	lsls	r1, r3, #26
 8007026:	bf42      	ittt	mi
 8007028:	6833      	ldrmi	r3, [r6, #0]
 800702a:	3302      	addmi	r3, #2
 800702c:	6033      	strmi	r3, [r6, #0]
 800702e:	6825      	ldr	r5, [r4, #0]
 8007030:	f015 0506 	ands.w	r5, r5, #6
 8007034:	d106      	bne.n	8007044 <_printf_common+0x48>
 8007036:	f104 0a19 	add.w	sl, r4, #25
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	6832      	ldr	r2, [r6, #0]
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	42ab      	cmp	r3, r5
 8007042:	dc26      	bgt.n	8007092 <_printf_common+0x96>
 8007044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	3b00      	subs	r3, #0
 800704c:	bf18      	it	ne
 800704e:	2301      	movne	r3, #1
 8007050:	0692      	lsls	r2, r2, #26
 8007052:	d42b      	bmi.n	80070ac <_printf_common+0xb0>
 8007054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007058:	4641      	mov	r1, r8
 800705a:	4638      	mov	r0, r7
 800705c:	47c8      	blx	r9
 800705e:	3001      	adds	r0, #1
 8007060:	d01e      	beq.n	80070a0 <_printf_common+0xa4>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	6922      	ldr	r2, [r4, #16]
 8007066:	f003 0306 	and.w	r3, r3, #6
 800706a:	2b04      	cmp	r3, #4
 800706c:	bf02      	ittt	eq
 800706e:	68e5      	ldreq	r5, [r4, #12]
 8007070:	6833      	ldreq	r3, [r6, #0]
 8007072:	1aed      	subeq	r5, r5, r3
 8007074:	68a3      	ldr	r3, [r4, #8]
 8007076:	bf0c      	ite	eq
 8007078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800707c:	2500      	movne	r5, #0
 800707e:	4293      	cmp	r3, r2
 8007080:	bfc4      	itt	gt
 8007082:	1a9b      	subgt	r3, r3, r2
 8007084:	18ed      	addgt	r5, r5, r3
 8007086:	2600      	movs	r6, #0
 8007088:	341a      	adds	r4, #26
 800708a:	42b5      	cmp	r5, r6
 800708c:	d11a      	bne.n	80070c4 <_printf_common+0xc8>
 800708e:	2000      	movs	r0, #0
 8007090:	e008      	b.n	80070a4 <_printf_common+0xa8>
 8007092:	2301      	movs	r3, #1
 8007094:	4652      	mov	r2, sl
 8007096:	4641      	mov	r1, r8
 8007098:	4638      	mov	r0, r7
 800709a:	47c8      	blx	r9
 800709c:	3001      	adds	r0, #1
 800709e:	d103      	bne.n	80070a8 <_printf_common+0xac>
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a8:	3501      	adds	r5, #1
 80070aa:	e7c6      	b.n	800703a <_printf_common+0x3e>
 80070ac:	18e1      	adds	r1, r4, r3
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	2030      	movs	r0, #48	@ 0x30
 80070b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070b6:	4422      	add	r2, r4
 80070b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070c0:	3302      	adds	r3, #2
 80070c2:	e7c7      	b.n	8007054 <_printf_common+0x58>
 80070c4:	2301      	movs	r3, #1
 80070c6:	4622      	mov	r2, r4
 80070c8:	4641      	mov	r1, r8
 80070ca:	4638      	mov	r0, r7
 80070cc:	47c8      	blx	r9
 80070ce:	3001      	adds	r0, #1
 80070d0:	d0e6      	beq.n	80070a0 <_printf_common+0xa4>
 80070d2:	3601      	adds	r6, #1
 80070d4:	e7d9      	b.n	800708a <_printf_common+0x8e>
	...

080070d8 <_printf_i>:
 80070d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070dc:	7e0f      	ldrb	r7, [r1, #24]
 80070de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070e0:	2f78      	cmp	r7, #120	@ 0x78
 80070e2:	4691      	mov	r9, r2
 80070e4:	4680      	mov	r8, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	469a      	mov	sl, r3
 80070ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070ee:	d807      	bhi.n	8007100 <_printf_i+0x28>
 80070f0:	2f62      	cmp	r7, #98	@ 0x62
 80070f2:	d80a      	bhi.n	800710a <_printf_i+0x32>
 80070f4:	2f00      	cmp	r7, #0
 80070f6:	f000 80d1 	beq.w	800729c <_printf_i+0x1c4>
 80070fa:	2f58      	cmp	r7, #88	@ 0x58
 80070fc:	f000 80b8 	beq.w	8007270 <_printf_i+0x198>
 8007100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007108:	e03a      	b.n	8007180 <_printf_i+0xa8>
 800710a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800710e:	2b15      	cmp	r3, #21
 8007110:	d8f6      	bhi.n	8007100 <_printf_i+0x28>
 8007112:	a101      	add	r1, pc, #4	@ (adr r1, 8007118 <_printf_i+0x40>)
 8007114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007118:	08007171 	.word	0x08007171
 800711c:	08007185 	.word	0x08007185
 8007120:	08007101 	.word	0x08007101
 8007124:	08007101 	.word	0x08007101
 8007128:	08007101 	.word	0x08007101
 800712c:	08007101 	.word	0x08007101
 8007130:	08007185 	.word	0x08007185
 8007134:	08007101 	.word	0x08007101
 8007138:	08007101 	.word	0x08007101
 800713c:	08007101 	.word	0x08007101
 8007140:	08007101 	.word	0x08007101
 8007144:	08007283 	.word	0x08007283
 8007148:	080071af 	.word	0x080071af
 800714c:	0800723d 	.word	0x0800723d
 8007150:	08007101 	.word	0x08007101
 8007154:	08007101 	.word	0x08007101
 8007158:	080072a5 	.word	0x080072a5
 800715c:	08007101 	.word	0x08007101
 8007160:	080071af 	.word	0x080071af
 8007164:	08007101 	.word	0x08007101
 8007168:	08007101 	.word	0x08007101
 800716c:	08007245 	.word	0x08007245
 8007170:	6833      	ldr	r3, [r6, #0]
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6032      	str	r2, [r6, #0]
 8007178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800717c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007180:	2301      	movs	r3, #1
 8007182:	e09c      	b.n	80072be <_printf_i+0x1e6>
 8007184:	6833      	ldr	r3, [r6, #0]
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	1d19      	adds	r1, r3, #4
 800718a:	6031      	str	r1, [r6, #0]
 800718c:	0606      	lsls	r6, r0, #24
 800718e:	d501      	bpl.n	8007194 <_printf_i+0xbc>
 8007190:	681d      	ldr	r5, [r3, #0]
 8007192:	e003      	b.n	800719c <_printf_i+0xc4>
 8007194:	0645      	lsls	r5, r0, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0xb8>
 8007198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800719c:	2d00      	cmp	r5, #0
 800719e:	da03      	bge.n	80071a8 <_printf_i+0xd0>
 80071a0:	232d      	movs	r3, #45	@ 0x2d
 80071a2:	426d      	negs	r5, r5
 80071a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071a8:	4858      	ldr	r0, [pc, #352]	@ (800730c <_printf_i+0x234>)
 80071aa:	230a      	movs	r3, #10
 80071ac:	e011      	b.n	80071d2 <_printf_i+0xfa>
 80071ae:	6821      	ldr	r1, [r4, #0]
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	0608      	lsls	r0, r1, #24
 80071b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071b8:	d402      	bmi.n	80071c0 <_printf_i+0xe8>
 80071ba:	0649      	lsls	r1, r1, #25
 80071bc:	bf48      	it	mi
 80071be:	b2ad      	uxthmi	r5, r5
 80071c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071c2:	4852      	ldr	r0, [pc, #328]	@ (800730c <_printf_i+0x234>)
 80071c4:	6033      	str	r3, [r6, #0]
 80071c6:	bf14      	ite	ne
 80071c8:	230a      	movne	r3, #10
 80071ca:	2308      	moveq	r3, #8
 80071cc:	2100      	movs	r1, #0
 80071ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071d2:	6866      	ldr	r6, [r4, #4]
 80071d4:	60a6      	str	r6, [r4, #8]
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	db05      	blt.n	80071e6 <_printf_i+0x10e>
 80071da:	6821      	ldr	r1, [r4, #0]
 80071dc:	432e      	orrs	r6, r5
 80071de:	f021 0104 	bic.w	r1, r1, #4
 80071e2:	6021      	str	r1, [r4, #0]
 80071e4:	d04b      	beq.n	800727e <_printf_i+0x1a6>
 80071e6:	4616      	mov	r6, r2
 80071e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80071ec:	fb03 5711 	mls	r7, r3, r1, r5
 80071f0:	5dc7      	ldrb	r7, [r0, r7]
 80071f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071f6:	462f      	mov	r7, r5
 80071f8:	42bb      	cmp	r3, r7
 80071fa:	460d      	mov	r5, r1
 80071fc:	d9f4      	bls.n	80071e8 <_printf_i+0x110>
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d10b      	bne.n	800721a <_printf_i+0x142>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	07df      	lsls	r7, r3, #31
 8007206:	d508      	bpl.n	800721a <_printf_i+0x142>
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	6861      	ldr	r1, [r4, #4]
 800720c:	4299      	cmp	r1, r3
 800720e:	bfde      	ittt	le
 8007210:	2330      	movle	r3, #48	@ 0x30
 8007212:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007216:	f106 36ff 	addle.w	r6, r6, #4294967295
 800721a:	1b92      	subs	r2, r2, r6
 800721c:	6122      	str	r2, [r4, #16]
 800721e:	f8cd a000 	str.w	sl, [sp]
 8007222:	464b      	mov	r3, r9
 8007224:	aa03      	add	r2, sp, #12
 8007226:	4621      	mov	r1, r4
 8007228:	4640      	mov	r0, r8
 800722a:	f7ff fee7 	bl	8006ffc <_printf_common>
 800722e:	3001      	adds	r0, #1
 8007230:	d14a      	bne.n	80072c8 <_printf_i+0x1f0>
 8007232:	f04f 30ff 	mov.w	r0, #4294967295
 8007236:	b004      	add	sp, #16
 8007238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	f043 0320 	orr.w	r3, r3, #32
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	4832      	ldr	r0, [pc, #200]	@ (8007310 <_printf_i+0x238>)
 8007246:	2778      	movs	r7, #120	@ 0x78
 8007248:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	6831      	ldr	r1, [r6, #0]
 8007250:	061f      	lsls	r7, r3, #24
 8007252:	f851 5b04 	ldr.w	r5, [r1], #4
 8007256:	d402      	bmi.n	800725e <_printf_i+0x186>
 8007258:	065f      	lsls	r7, r3, #25
 800725a:	bf48      	it	mi
 800725c:	b2ad      	uxthmi	r5, r5
 800725e:	6031      	str	r1, [r6, #0]
 8007260:	07d9      	lsls	r1, r3, #31
 8007262:	bf44      	itt	mi
 8007264:	f043 0320 	orrmi.w	r3, r3, #32
 8007268:	6023      	strmi	r3, [r4, #0]
 800726a:	b11d      	cbz	r5, 8007274 <_printf_i+0x19c>
 800726c:	2310      	movs	r3, #16
 800726e:	e7ad      	b.n	80071cc <_printf_i+0xf4>
 8007270:	4826      	ldr	r0, [pc, #152]	@ (800730c <_printf_i+0x234>)
 8007272:	e7e9      	b.n	8007248 <_printf_i+0x170>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	f023 0320 	bic.w	r3, r3, #32
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	e7f6      	b.n	800726c <_printf_i+0x194>
 800727e:	4616      	mov	r6, r2
 8007280:	e7bd      	b.n	80071fe <_printf_i+0x126>
 8007282:	6833      	ldr	r3, [r6, #0]
 8007284:	6825      	ldr	r5, [r4, #0]
 8007286:	6961      	ldr	r1, [r4, #20]
 8007288:	1d18      	adds	r0, r3, #4
 800728a:	6030      	str	r0, [r6, #0]
 800728c:	062e      	lsls	r6, r5, #24
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	d501      	bpl.n	8007296 <_printf_i+0x1be>
 8007292:	6019      	str	r1, [r3, #0]
 8007294:	e002      	b.n	800729c <_printf_i+0x1c4>
 8007296:	0668      	lsls	r0, r5, #25
 8007298:	d5fb      	bpl.n	8007292 <_printf_i+0x1ba>
 800729a:	8019      	strh	r1, [r3, #0]
 800729c:	2300      	movs	r3, #0
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	4616      	mov	r6, r2
 80072a2:	e7bc      	b.n	800721e <_printf_i+0x146>
 80072a4:	6833      	ldr	r3, [r6, #0]
 80072a6:	1d1a      	adds	r2, r3, #4
 80072a8:	6032      	str	r2, [r6, #0]
 80072aa:	681e      	ldr	r6, [r3, #0]
 80072ac:	6862      	ldr	r2, [r4, #4]
 80072ae:	2100      	movs	r1, #0
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7f8 ff65 	bl	8000180 <memchr>
 80072b6:	b108      	cbz	r0, 80072bc <_printf_i+0x1e4>
 80072b8:	1b80      	subs	r0, r0, r6
 80072ba:	6060      	str	r0, [r4, #4]
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	2300      	movs	r3, #0
 80072c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072c6:	e7aa      	b.n	800721e <_printf_i+0x146>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	4632      	mov	r2, r6
 80072cc:	4649      	mov	r1, r9
 80072ce:	4640      	mov	r0, r8
 80072d0:	47d0      	blx	sl
 80072d2:	3001      	adds	r0, #1
 80072d4:	d0ad      	beq.n	8007232 <_printf_i+0x15a>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	079b      	lsls	r3, r3, #30
 80072da:	d413      	bmi.n	8007304 <_printf_i+0x22c>
 80072dc:	68e0      	ldr	r0, [r4, #12]
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	4298      	cmp	r0, r3
 80072e2:	bfb8      	it	lt
 80072e4:	4618      	movlt	r0, r3
 80072e6:	e7a6      	b.n	8007236 <_printf_i+0x15e>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4632      	mov	r2, r6
 80072ec:	4649      	mov	r1, r9
 80072ee:	4640      	mov	r0, r8
 80072f0:	47d0      	blx	sl
 80072f2:	3001      	adds	r0, #1
 80072f4:	d09d      	beq.n	8007232 <_printf_i+0x15a>
 80072f6:	3501      	adds	r5, #1
 80072f8:	68e3      	ldr	r3, [r4, #12]
 80072fa:	9903      	ldr	r1, [sp, #12]
 80072fc:	1a5b      	subs	r3, r3, r1
 80072fe:	42ab      	cmp	r3, r5
 8007300:	dcf2      	bgt.n	80072e8 <_printf_i+0x210>
 8007302:	e7eb      	b.n	80072dc <_printf_i+0x204>
 8007304:	2500      	movs	r5, #0
 8007306:	f104 0619 	add.w	r6, r4, #25
 800730a:	e7f5      	b.n	80072f8 <_printf_i+0x220>
 800730c:	08009b1e 	.word	0x08009b1e
 8007310:	08009b2f 	.word	0x08009b2f

08007314 <std>:
 8007314:	2300      	movs	r3, #0
 8007316:	b510      	push	{r4, lr}
 8007318:	4604      	mov	r4, r0
 800731a:	e9c0 3300 	strd	r3, r3, [r0]
 800731e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007322:	6083      	str	r3, [r0, #8]
 8007324:	8181      	strh	r1, [r0, #12]
 8007326:	6643      	str	r3, [r0, #100]	@ 0x64
 8007328:	81c2      	strh	r2, [r0, #14]
 800732a:	6183      	str	r3, [r0, #24]
 800732c:	4619      	mov	r1, r3
 800732e:	2208      	movs	r2, #8
 8007330:	305c      	adds	r0, #92	@ 0x5c
 8007332:	f000 f931 	bl	8007598 <memset>
 8007336:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <std+0x58>)
 8007338:	6263      	str	r3, [r4, #36]	@ 0x24
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <std+0x5c>)
 800733c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <std+0x60>)
 8007340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007342:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <std+0x64>)
 8007344:	6323      	str	r3, [r4, #48]	@ 0x30
 8007346:	4b0d      	ldr	r3, [pc, #52]	@ (800737c <std+0x68>)
 8007348:	6224      	str	r4, [r4, #32]
 800734a:	429c      	cmp	r4, r3
 800734c:	d006      	beq.n	800735c <std+0x48>
 800734e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007352:	4294      	cmp	r4, r2
 8007354:	d002      	beq.n	800735c <std+0x48>
 8007356:	33d0      	adds	r3, #208	@ 0xd0
 8007358:	429c      	cmp	r4, r3
 800735a:	d105      	bne.n	8007368 <std+0x54>
 800735c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007364:	f000 b994 	b.w	8007690 <__retarget_lock_init_recursive>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	bf00      	nop
 800736c:	08007499 	.word	0x08007499
 8007370:	080074bb 	.word	0x080074bb
 8007374:	080074f3 	.word	0x080074f3
 8007378:	08007517 	.word	0x08007517
 800737c:	2000071c 	.word	0x2000071c

08007380 <stdio_exit_handler>:
 8007380:	4a02      	ldr	r2, [pc, #8]	@ (800738c <stdio_exit_handler+0xc>)
 8007382:	4903      	ldr	r1, [pc, #12]	@ (8007390 <stdio_exit_handler+0x10>)
 8007384:	4803      	ldr	r0, [pc, #12]	@ (8007394 <stdio_exit_handler+0x14>)
 8007386:	f000 b869 	b.w	800745c <_fwalk_sglue>
 800738a:	bf00      	nop
 800738c:	200000a8 	.word	0x200000a8
 8007390:	08009015 	.word	0x08009015
 8007394:	200000b8 	.word	0x200000b8

08007398 <cleanup_stdio>:
 8007398:	6841      	ldr	r1, [r0, #4]
 800739a:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <cleanup_stdio+0x34>)
 800739c:	4299      	cmp	r1, r3
 800739e:	b510      	push	{r4, lr}
 80073a0:	4604      	mov	r4, r0
 80073a2:	d001      	beq.n	80073a8 <cleanup_stdio+0x10>
 80073a4:	f001 fe36 	bl	8009014 <_fflush_r>
 80073a8:	68a1      	ldr	r1, [r4, #8]
 80073aa:	4b09      	ldr	r3, [pc, #36]	@ (80073d0 <cleanup_stdio+0x38>)
 80073ac:	4299      	cmp	r1, r3
 80073ae:	d002      	beq.n	80073b6 <cleanup_stdio+0x1e>
 80073b0:	4620      	mov	r0, r4
 80073b2:	f001 fe2f 	bl	8009014 <_fflush_r>
 80073b6:	68e1      	ldr	r1, [r4, #12]
 80073b8:	4b06      	ldr	r3, [pc, #24]	@ (80073d4 <cleanup_stdio+0x3c>)
 80073ba:	4299      	cmp	r1, r3
 80073bc:	d004      	beq.n	80073c8 <cleanup_stdio+0x30>
 80073be:	4620      	mov	r0, r4
 80073c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c4:	f001 be26 	b.w	8009014 <_fflush_r>
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	bf00      	nop
 80073cc:	2000071c 	.word	0x2000071c
 80073d0:	20000784 	.word	0x20000784
 80073d4:	200007ec 	.word	0x200007ec

080073d8 <global_stdio_init.part.0>:
 80073d8:	b510      	push	{r4, lr}
 80073da:	4b0b      	ldr	r3, [pc, #44]	@ (8007408 <global_stdio_init.part.0+0x30>)
 80073dc:	4c0b      	ldr	r4, [pc, #44]	@ (800740c <global_stdio_init.part.0+0x34>)
 80073de:	4a0c      	ldr	r2, [pc, #48]	@ (8007410 <global_stdio_init.part.0+0x38>)
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	4620      	mov	r0, r4
 80073e4:	2200      	movs	r2, #0
 80073e6:	2104      	movs	r1, #4
 80073e8:	f7ff ff94 	bl	8007314 <std>
 80073ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073f0:	2201      	movs	r2, #1
 80073f2:	2109      	movs	r1, #9
 80073f4:	f7ff ff8e 	bl	8007314 <std>
 80073f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073fc:	2202      	movs	r2, #2
 80073fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007402:	2112      	movs	r1, #18
 8007404:	f7ff bf86 	b.w	8007314 <std>
 8007408:	20000854 	.word	0x20000854
 800740c:	2000071c 	.word	0x2000071c
 8007410:	08007381 	.word	0x08007381

08007414 <__sfp_lock_acquire>:
 8007414:	4801      	ldr	r0, [pc, #4]	@ (800741c <__sfp_lock_acquire+0x8>)
 8007416:	f000 b93c 	b.w	8007692 <__retarget_lock_acquire_recursive>
 800741a:	bf00      	nop
 800741c:	2000085d 	.word	0x2000085d

08007420 <__sfp_lock_release>:
 8007420:	4801      	ldr	r0, [pc, #4]	@ (8007428 <__sfp_lock_release+0x8>)
 8007422:	f000 b937 	b.w	8007694 <__retarget_lock_release_recursive>
 8007426:	bf00      	nop
 8007428:	2000085d 	.word	0x2000085d

0800742c <__sinit>:
 800742c:	b510      	push	{r4, lr}
 800742e:	4604      	mov	r4, r0
 8007430:	f7ff fff0 	bl	8007414 <__sfp_lock_acquire>
 8007434:	6a23      	ldr	r3, [r4, #32]
 8007436:	b11b      	cbz	r3, 8007440 <__sinit+0x14>
 8007438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800743c:	f7ff bff0 	b.w	8007420 <__sfp_lock_release>
 8007440:	4b04      	ldr	r3, [pc, #16]	@ (8007454 <__sinit+0x28>)
 8007442:	6223      	str	r3, [r4, #32]
 8007444:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <__sinit+0x2c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1f5      	bne.n	8007438 <__sinit+0xc>
 800744c:	f7ff ffc4 	bl	80073d8 <global_stdio_init.part.0>
 8007450:	e7f2      	b.n	8007438 <__sinit+0xc>
 8007452:	bf00      	nop
 8007454:	08007399 	.word	0x08007399
 8007458:	20000854 	.word	0x20000854

0800745c <_fwalk_sglue>:
 800745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007460:	4607      	mov	r7, r0
 8007462:	4688      	mov	r8, r1
 8007464:	4614      	mov	r4, r2
 8007466:	2600      	movs	r6, #0
 8007468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800746c:	f1b9 0901 	subs.w	r9, r9, #1
 8007470:	d505      	bpl.n	800747e <_fwalk_sglue+0x22>
 8007472:	6824      	ldr	r4, [r4, #0]
 8007474:	2c00      	cmp	r4, #0
 8007476:	d1f7      	bne.n	8007468 <_fwalk_sglue+0xc>
 8007478:	4630      	mov	r0, r6
 800747a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d907      	bls.n	8007494 <_fwalk_sglue+0x38>
 8007484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007488:	3301      	adds	r3, #1
 800748a:	d003      	beq.n	8007494 <_fwalk_sglue+0x38>
 800748c:	4629      	mov	r1, r5
 800748e:	4638      	mov	r0, r7
 8007490:	47c0      	blx	r8
 8007492:	4306      	orrs	r6, r0
 8007494:	3568      	adds	r5, #104	@ 0x68
 8007496:	e7e9      	b.n	800746c <_fwalk_sglue+0x10>

08007498 <__sread>:
 8007498:	b510      	push	{r4, lr}
 800749a:	460c      	mov	r4, r1
 800749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a0:	f000 f8a8 	bl	80075f4 <_read_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	bfab      	itete	ge
 80074a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074aa:	89a3      	ldrhlt	r3, [r4, #12]
 80074ac:	181b      	addge	r3, r3, r0
 80074ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074b2:	bfac      	ite	ge
 80074b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074b6:	81a3      	strhlt	r3, [r4, #12]
 80074b8:	bd10      	pop	{r4, pc}

080074ba <__swrite>:
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	461f      	mov	r7, r3
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	05db      	lsls	r3, r3, #23
 80074c4:	4605      	mov	r5, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4616      	mov	r6, r2
 80074ca:	d505      	bpl.n	80074d8 <__swrite+0x1e>
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	2302      	movs	r3, #2
 80074d2:	2200      	movs	r2, #0
 80074d4:	f000 f87c 	bl	80075d0 <_lseek_r>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	4632      	mov	r2, r6
 80074e6:	463b      	mov	r3, r7
 80074e8:	4628      	mov	r0, r5
 80074ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	f000 b893 	b.w	8007618 <_write_r>

080074f2 <__sseek>:
 80074f2:	b510      	push	{r4, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 f869 	bl	80075d0 <_lseek_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	bf15      	itete	ne
 8007504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800750a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800750e:	81a3      	strheq	r3, [r4, #12]
 8007510:	bf18      	it	ne
 8007512:	81a3      	strhne	r3, [r4, #12]
 8007514:	bd10      	pop	{r4, pc}

08007516 <__sclose>:
 8007516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751a:	f000 b849 	b.w	80075b0 <_close_r>

0800751e <_vsniprintf_r>:
 800751e:	b530      	push	{r4, r5, lr}
 8007520:	4614      	mov	r4, r2
 8007522:	2c00      	cmp	r4, #0
 8007524:	b09b      	sub	sp, #108	@ 0x6c
 8007526:	4605      	mov	r5, r0
 8007528:	461a      	mov	r2, r3
 800752a:	da05      	bge.n	8007538 <_vsniprintf_r+0x1a>
 800752c:	238b      	movs	r3, #139	@ 0x8b
 800752e:	6003      	str	r3, [r0, #0]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	b01b      	add	sp, #108	@ 0x6c
 8007536:	bd30      	pop	{r4, r5, pc}
 8007538:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800753c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007540:	f04f 0300 	mov.w	r3, #0
 8007544:	9319      	str	r3, [sp, #100]	@ 0x64
 8007546:	bf14      	ite	ne
 8007548:	f104 33ff 	addne.w	r3, r4, #4294967295
 800754c:	4623      	moveq	r3, r4
 800754e:	9302      	str	r3, [sp, #8]
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007556:	9100      	str	r1, [sp, #0]
 8007558:	9104      	str	r1, [sp, #16]
 800755a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800755e:	4669      	mov	r1, sp
 8007560:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007562:	f001 fbd7 	bl	8008d14 <_svfiprintf_r>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	bfbc      	itt	lt
 800756a:	238b      	movlt	r3, #139	@ 0x8b
 800756c:	602b      	strlt	r3, [r5, #0]
 800756e:	2c00      	cmp	r4, #0
 8007570:	d0e0      	beq.n	8007534 <_vsniprintf_r+0x16>
 8007572:	9b00      	ldr	r3, [sp, #0]
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	e7dc      	b.n	8007534 <_vsniprintf_r+0x16>
	...

0800757c <vsniprintf>:
 800757c:	b507      	push	{r0, r1, r2, lr}
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4613      	mov	r3, r2
 8007582:	460a      	mov	r2, r1
 8007584:	4601      	mov	r1, r0
 8007586:	4803      	ldr	r0, [pc, #12]	@ (8007594 <vsniprintf+0x18>)
 8007588:	6800      	ldr	r0, [r0, #0]
 800758a:	f7ff ffc8 	bl	800751e <_vsniprintf_r>
 800758e:	b003      	add	sp, #12
 8007590:	f85d fb04 	ldr.w	pc, [sp], #4
 8007594:	200000b4 	.word	0x200000b4

08007598 <memset>:
 8007598:	4402      	add	r2, r0
 800759a:	4603      	mov	r3, r0
 800759c:	4293      	cmp	r3, r2
 800759e:	d100      	bne.n	80075a2 <memset+0xa>
 80075a0:	4770      	bx	lr
 80075a2:	f803 1b01 	strb.w	r1, [r3], #1
 80075a6:	e7f9      	b.n	800759c <memset+0x4>

080075a8 <_localeconv_r>:
 80075a8:	4800      	ldr	r0, [pc, #0]	@ (80075ac <_localeconv_r+0x4>)
 80075aa:	4770      	bx	lr
 80075ac:	200001f4 	.word	0x200001f4

080075b0 <_close_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d06      	ldr	r5, [pc, #24]	@ (80075cc <_close_r+0x1c>)
 80075b4:	2300      	movs	r3, #0
 80075b6:	4604      	mov	r4, r0
 80075b8:	4608      	mov	r0, r1
 80075ba:	602b      	str	r3, [r5, #0]
 80075bc:	f7fa fca4 	bl	8001f08 <_close>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_close_r+0x1a>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_close_r+0x1a>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	20000858 	.word	0x20000858

080075d0 <_lseek_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d07      	ldr	r5, [pc, #28]	@ (80075f0 <_lseek_r+0x20>)
 80075d4:	4604      	mov	r4, r0
 80075d6:	4608      	mov	r0, r1
 80075d8:	4611      	mov	r1, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7fa fcb9 	bl	8001f56 <_lseek>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_lseek_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_lseek_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20000858 	.word	0x20000858

080075f4 <_read_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d07      	ldr	r5, [pc, #28]	@ (8007614 <_read_r+0x20>)
 80075f8:	4604      	mov	r4, r0
 80075fa:	4608      	mov	r0, r1
 80075fc:	4611      	mov	r1, r2
 80075fe:	2200      	movs	r2, #0
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7fa fc47 	bl	8001e96 <_read>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_read_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_read_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20000858 	.word	0x20000858

08007618 <_write_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d07      	ldr	r5, [pc, #28]	@ (8007638 <_write_r+0x20>)
 800761c:	4604      	mov	r4, r0
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	2200      	movs	r2, #0
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7fa fc52 	bl	8001ed0 <_write>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_write_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_write_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20000858 	.word	0x20000858

0800763c <__errno>:
 800763c:	4b01      	ldr	r3, [pc, #4]	@ (8007644 <__errno+0x8>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	200000b4 	.word	0x200000b4

08007648 <__libc_init_array>:
 8007648:	b570      	push	{r4, r5, r6, lr}
 800764a:	4d0d      	ldr	r5, [pc, #52]	@ (8007680 <__libc_init_array+0x38>)
 800764c:	4c0d      	ldr	r4, [pc, #52]	@ (8007684 <__libc_init_array+0x3c>)
 800764e:	1b64      	subs	r4, r4, r5
 8007650:	10a4      	asrs	r4, r4, #2
 8007652:	2600      	movs	r6, #0
 8007654:	42a6      	cmp	r6, r4
 8007656:	d109      	bne.n	800766c <__libc_init_array+0x24>
 8007658:	4d0b      	ldr	r5, [pc, #44]	@ (8007688 <__libc_init_array+0x40>)
 800765a:	4c0c      	ldr	r4, [pc, #48]	@ (800768c <__libc_init_array+0x44>)
 800765c:	f002 f86a 	bl	8009734 <_init>
 8007660:	1b64      	subs	r4, r4, r5
 8007662:	10a4      	asrs	r4, r4, #2
 8007664:	2600      	movs	r6, #0
 8007666:	42a6      	cmp	r6, r4
 8007668:	d105      	bne.n	8007676 <__libc_init_array+0x2e>
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007670:	4798      	blx	r3
 8007672:	3601      	adds	r6, #1
 8007674:	e7ee      	b.n	8007654 <__libc_init_array+0xc>
 8007676:	f855 3b04 	ldr.w	r3, [r5], #4
 800767a:	4798      	blx	r3
 800767c:	3601      	adds	r6, #1
 800767e:	e7f2      	b.n	8007666 <__libc_init_array+0x1e>
 8007680:	08009e8c 	.word	0x08009e8c
 8007684:	08009e8c 	.word	0x08009e8c
 8007688:	08009e8c 	.word	0x08009e8c
 800768c:	08009e90 	.word	0x08009e90

08007690 <__retarget_lock_init_recursive>:
 8007690:	4770      	bx	lr

08007692 <__retarget_lock_acquire_recursive>:
 8007692:	4770      	bx	lr

08007694 <__retarget_lock_release_recursive>:
 8007694:	4770      	bx	lr

08007696 <memcpy>:
 8007696:	440a      	add	r2, r1
 8007698:	4291      	cmp	r1, r2
 800769a:	f100 33ff 	add.w	r3, r0, #4294967295
 800769e:	d100      	bne.n	80076a2 <memcpy+0xc>
 80076a0:	4770      	bx	lr
 80076a2:	b510      	push	{r4, lr}
 80076a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ac:	4291      	cmp	r1, r2
 80076ae:	d1f9      	bne.n	80076a4 <memcpy+0xe>
 80076b0:	bd10      	pop	{r4, pc}

080076b2 <quorem>:
 80076b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b6:	6903      	ldr	r3, [r0, #16]
 80076b8:	690c      	ldr	r4, [r1, #16]
 80076ba:	42a3      	cmp	r3, r4
 80076bc:	4607      	mov	r7, r0
 80076be:	db7e      	blt.n	80077be <quorem+0x10c>
 80076c0:	3c01      	subs	r4, #1
 80076c2:	f101 0814 	add.w	r8, r1, #20
 80076c6:	00a3      	lsls	r3, r4, #2
 80076c8:	f100 0514 	add.w	r5, r0, #20
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076dc:	3301      	adds	r3, #1
 80076de:	429a      	cmp	r2, r3
 80076e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076e8:	d32e      	bcc.n	8007748 <quorem+0x96>
 80076ea:	f04f 0a00 	mov.w	sl, #0
 80076ee:	46c4      	mov	ip, r8
 80076f0:	46ae      	mov	lr, r5
 80076f2:	46d3      	mov	fp, sl
 80076f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076f8:	b298      	uxth	r0, r3
 80076fa:	fb06 a000 	mla	r0, r6, r0, sl
 80076fe:	0c02      	lsrs	r2, r0, #16
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	fb06 2303 	mla	r3, r6, r3, r2
 8007706:	f8de 2000 	ldr.w	r2, [lr]
 800770a:	b280      	uxth	r0, r0
 800770c:	b292      	uxth	r2, r2
 800770e:	1a12      	subs	r2, r2, r0
 8007710:	445a      	add	r2, fp
 8007712:	f8de 0000 	ldr.w	r0, [lr]
 8007716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800771a:	b29b      	uxth	r3, r3
 800771c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007720:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007724:	b292      	uxth	r2, r2
 8007726:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800772a:	45e1      	cmp	r9, ip
 800772c:	f84e 2b04 	str.w	r2, [lr], #4
 8007730:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007734:	d2de      	bcs.n	80076f4 <quorem+0x42>
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	58eb      	ldr	r3, [r5, r3]
 800773a:	b92b      	cbnz	r3, 8007748 <quorem+0x96>
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	3b04      	subs	r3, #4
 8007740:	429d      	cmp	r5, r3
 8007742:	461a      	mov	r2, r3
 8007744:	d32f      	bcc.n	80077a6 <quorem+0xf4>
 8007746:	613c      	str	r4, [r7, #16]
 8007748:	4638      	mov	r0, r7
 800774a:	f001 f97f 	bl	8008a4c <__mcmp>
 800774e:	2800      	cmp	r0, #0
 8007750:	db25      	blt.n	800779e <quorem+0xec>
 8007752:	4629      	mov	r1, r5
 8007754:	2000      	movs	r0, #0
 8007756:	f858 2b04 	ldr.w	r2, [r8], #4
 800775a:	f8d1 c000 	ldr.w	ip, [r1]
 800775e:	fa1f fe82 	uxth.w	lr, r2
 8007762:	fa1f f38c 	uxth.w	r3, ip
 8007766:	eba3 030e 	sub.w	r3, r3, lr
 800776a:	4403      	add	r3, r0
 800776c:	0c12      	lsrs	r2, r2, #16
 800776e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007772:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007776:	b29b      	uxth	r3, r3
 8007778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800777c:	45c1      	cmp	r9, r8
 800777e:	f841 3b04 	str.w	r3, [r1], #4
 8007782:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007786:	d2e6      	bcs.n	8007756 <quorem+0xa4>
 8007788:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800778c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007790:	b922      	cbnz	r2, 800779c <quorem+0xea>
 8007792:	3b04      	subs	r3, #4
 8007794:	429d      	cmp	r5, r3
 8007796:	461a      	mov	r2, r3
 8007798:	d30b      	bcc.n	80077b2 <quorem+0x100>
 800779a:	613c      	str	r4, [r7, #16]
 800779c:	3601      	adds	r6, #1
 800779e:	4630      	mov	r0, r6
 80077a0:	b003      	add	sp, #12
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	d1cb      	bne.n	8007746 <quorem+0x94>
 80077ae:	3c01      	subs	r4, #1
 80077b0:	e7c6      	b.n	8007740 <quorem+0x8e>
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d1ef      	bne.n	800779a <quorem+0xe8>
 80077ba:	3c01      	subs	r4, #1
 80077bc:	e7ea      	b.n	8007794 <quorem+0xe2>
 80077be:	2000      	movs	r0, #0
 80077c0:	e7ee      	b.n	80077a0 <quorem+0xee>
 80077c2:	0000      	movs	r0, r0
 80077c4:	0000      	movs	r0, r0
	...

080077c8 <_dtoa_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	69c7      	ldr	r7, [r0, #28]
 80077ce:	b097      	sub	sp, #92	@ 0x5c
 80077d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80077d4:	ec55 4b10 	vmov	r4, r5, d0
 80077d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80077da:	9107      	str	r1, [sp, #28]
 80077dc:	4681      	mov	r9, r0
 80077de:	920c      	str	r2, [sp, #48]	@ 0x30
 80077e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80077e2:	b97f      	cbnz	r7, 8007804 <_dtoa_r+0x3c>
 80077e4:	2010      	movs	r0, #16
 80077e6:	f000 fe09 	bl	80083fc <malloc>
 80077ea:	4602      	mov	r2, r0
 80077ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80077f0:	b920      	cbnz	r0, 80077fc <_dtoa_r+0x34>
 80077f2:	4ba9      	ldr	r3, [pc, #676]	@ (8007a98 <_dtoa_r+0x2d0>)
 80077f4:	21ef      	movs	r1, #239	@ 0xef
 80077f6:	48a9      	ldr	r0, [pc, #676]	@ (8007a9c <_dtoa_r+0x2d4>)
 80077f8:	f001 fc5e 	bl	80090b8 <__assert_func>
 80077fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007800:	6007      	str	r7, [r0, #0]
 8007802:	60c7      	str	r7, [r0, #12]
 8007804:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	b159      	cbz	r1, 8007824 <_dtoa_r+0x5c>
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	604a      	str	r2, [r1, #4]
 8007810:	2301      	movs	r3, #1
 8007812:	4093      	lsls	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
 8007816:	4648      	mov	r0, r9
 8007818:	f000 fee6 	bl	80085e8 <_Bfree>
 800781c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	1e2b      	subs	r3, r5, #0
 8007826:	bfb9      	ittee	lt
 8007828:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800782c:	9305      	strlt	r3, [sp, #20]
 800782e:	2300      	movge	r3, #0
 8007830:	6033      	strge	r3, [r6, #0]
 8007832:	9f05      	ldr	r7, [sp, #20]
 8007834:	4b9a      	ldr	r3, [pc, #616]	@ (8007aa0 <_dtoa_r+0x2d8>)
 8007836:	bfbc      	itt	lt
 8007838:	2201      	movlt	r2, #1
 800783a:	6032      	strlt	r2, [r6, #0]
 800783c:	43bb      	bics	r3, r7
 800783e:	d112      	bne.n	8007866 <_dtoa_r+0x9e>
 8007840:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007842:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800784c:	4323      	orrs	r3, r4
 800784e:	f000 855a 	beq.w	8008306 <_dtoa_r+0xb3e>
 8007852:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007854:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007ab4 <_dtoa_r+0x2ec>
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 855c 	beq.w	8008316 <_dtoa_r+0xb4e>
 800785e:	f10a 0303 	add.w	r3, sl, #3
 8007862:	f000 bd56 	b.w	8008312 <_dtoa_r+0xb4a>
 8007866:	ed9d 7b04 	vldr	d7, [sp, #16]
 800786a:	2200      	movs	r2, #0
 800786c:	ec51 0b17 	vmov	r0, r1, d7
 8007870:	2300      	movs	r3, #0
 8007872:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007876:	f7f9 f8ff 	bl	8000a78 <__aeabi_dcmpeq>
 800787a:	4680      	mov	r8, r0
 800787c:	b158      	cbz	r0, 8007896 <_dtoa_r+0xce>
 800787e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007880:	2301      	movs	r3, #1
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007886:	b113      	cbz	r3, 800788e <_dtoa_r+0xc6>
 8007888:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800788a:	4b86      	ldr	r3, [pc, #536]	@ (8007aa4 <_dtoa_r+0x2dc>)
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007ab8 <_dtoa_r+0x2f0>
 8007892:	f000 bd40 	b.w	8008316 <_dtoa_r+0xb4e>
 8007896:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800789a:	aa14      	add	r2, sp, #80	@ 0x50
 800789c:	a915      	add	r1, sp, #84	@ 0x54
 800789e:	4648      	mov	r0, r9
 80078a0:	f001 f984 	bl	8008bac <__d2b>
 80078a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078a8:	9002      	str	r0, [sp, #8]
 80078aa:	2e00      	cmp	r6, #0
 80078ac:	d078      	beq.n	80079a0 <_dtoa_r+0x1d8>
 80078ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80078b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80078bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078c8:	4619      	mov	r1, r3
 80078ca:	2200      	movs	r2, #0
 80078cc:	4b76      	ldr	r3, [pc, #472]	@ (8007aa8 <_dtoa_r+0x2e0>)
 80078ce:	f7f8 fcb3 	bl	8000238 <__aeabi_dsub>
 80078d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007a80 <_dtoa_r+0x2b8>)
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f7f8 fe66 	bl	80005a8 <__aeabi_dmul>
 80078dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8007a88 <_dtoa_r+0x2c0>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 fcab 	bl	800023c <__adddf3>
 80078e6:	4604      	mov	r4, r0
 80078e8:	4630      	mov	r0, r6
 80078ea:	460d      	mov	r5, r1
 80078ec:	f7f8 fdf2 	bl	80004d4 <__aeabi_i2d>
 80078f0:	a367      	add	r3, pc, #412	@ (adr r3, 8007a90 <_dtoa_r+0x2c8>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	f7f8 fe57 	bl	80005a8 <__aeabi_dmul>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f8 fc9b 	bl	800023c <__adddf3>
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	f7f9 f8fd 	bl	8000b08 <__aeabi_d2iz>
 800790e:	2200      	movs	r2, #0
 8007910:	4607      	mov	r7, r0
 8007912:	2300      	movs	r3, #0
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f9 f8b8 	bl	8000a8c <__aeabi_dcmplt>
 800791c:	b140      	cbz	r0, 8007930 <_dtoa_r+0x168>
 800791e:	4638      	mov	r0, r7
 8007920:	f7f8 fdd8 	bl	80004d4 <__aeabi_i2d>
 8007924:	4622      	mov	r2, r4
 8007926:	462b      	mov	r3, r5
 8007928:	f7f9 f8a6 	bl	8000a78 <__aeabi_dcmpeq>
 800792c:	b900      	cbnz	r0, 8007930 <_dtoa_r+0x168>
 800792e:	3f01      	subs	r7, #1
 8007930:	2f16      	cmp	r7, #22
 8007932:	d852      	bhi.n	80079da <_dtoa_r+0x212>
 8007934:	4b5d      	ldr	r3, [pc, #372]	@ (8007aac <_dtoa_r+0x2e4>)
 8007936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007942:	f7f9 f8a3 	bl	8000a8c <__aeabi_dcmplt>
 8007946:	2800      	cmp	r0, #0
 8007948:	d049      	beq.n	80079de <_dtoa_r+0x216>
 800794a:	3f01      	subs	r7, #1
 800794c:	2300      	movs	r3, #0
 800794e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007950:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007952:	1b9b      	subs	r3, r3, r6
 8007954:	1e5a      	subs	r2, r3, #1
 8007956:	bf45      	ittet	mi
 8007958:	f1c3 0301 	rsbmi	r3, r3, #1
 800795c:	9300      	strmi	r3, [sp, #0]
 800795e:	2300      	movpl	r3, #0
 8007960:	2300      	movmi	r3, #0
 8007962:	9206      	str	r2, [sp, #24]
 8007964:	bf54      	ite	pl
 8007966:	9300      	strpl	r3, [sp, #0]
 8007968:	9306      	strmi	r3, [sp, #24]
 800796a:	2f00      	cmp	r7, #0
 800796c:	db39      	blt.n	80079e2 <_dtoa_r+0x21a>
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	970d      	str	r7, [sp, #52]	@ 0x34
 8007972:	443b      	add	r3, r7
 8007974:	9306      	str	r3, [sp, #24]
 8007976:	2300      	movs	r3, #0
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	9b07      	ldr	r3, [sp, #28]
 800797c:	2b09      	cmp	r3, #9
 800797e:	d863      	bhi.n	8007a48 <_dtoa_r+0x280>
 8007980:	2b05      	cmp	r3, #5
 8007982:	bfc4      	itt	gt
 8007984:	3b04      	subgt	r3, #4
 8007986:	9307      	strgt	r3, [sp, #28]
 8007988:	9b07      	ldr	r3, [sp, #28]
 800798a:	f1a3 0302 	sub.w	r3, r3, #2
 800798e:	bfcc      	ite	gt
 8007990:	2400      	movgt	r4, #0
 8007992:	2401      	movle	r4, #1
 8007994:	2b03      	cmp	r3, #3
 8007996:	d863      	bhi.n	8007a60 <_dtoa_r+0x298>
 8007998:	e8df f003 	tbb	[pc, r3]
 800799c:	2b375452 	.word	0x2b375452
 80079a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079a4:	441e      	add	r6, r3
 80079a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	bfc1      	itttt	gt
 80079ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079b2:	409f      	lslgt	r7, r3
 80079b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079bc:	bfd6      	itet	le
 80079be:	f1c3 0320 	rsble	r3, r3, #32
 80079c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80079c6:	fa04 f003 	lslle.w	r0, r4, r3
 80079ca:	f7f8 fd73 	bl	80004b4 <__aeabi_ui2d>
 80079ce:	2201      	movs	r2, #1
 80079d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079d4:	3e01      	subs	r6, #1
 80079d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80079d8:	e776      	b.n	80078c8 <_dtoa_r+0x100>
 80079da:	2301      	movs	r3, #1
 80079dc:	e7b7      	b.n	800794e <_dtoa_r+0x186>
 80079de:	9010      	str	r0, [sp, #64]	@ 0x40
 80079e0:	e7b6      	b.n	8007950 <_dtoa_r+0x188>
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	1bdb      	subs	r3, r3, r7
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	427b      	negs	r3, r7
 80079ea:	9308      	str	r3, [sp, #32]
 80079ec:	2300      	movs	r3, #0
 80079ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80079f0:	e7c3      	b.n	800797a <_dtoa_r+0x1b2>
 80079f2:	2301      	movs	r3, #1
 80079f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80079f8:	eb07 0b03 	add.w	fp, r7, r3
 80079fc:	f10b 0301 	add.w	r3, fp, #1
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	9303      	str	r3, [sp, #12]
 8007a04:	bfb8      	it	lt
 8007a06:	2301      	movlt	r3, #1
 8007a08:	e006      	b.n	8007a18 <_dtoa_r+0x250>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dd28      	ble.n	8007a66 <_dtoa_r+0x29e>
 8007a14:	469b      	mov	fp, r3
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	2204      	movs	r2, #4
 8007a20:	f102 0514 	add.w	r5, r2, #20
 8007a24:	429d      	cmp	r5, r3
 8007a26:	d926      	bls.n	8007a76 <_dtoa_r+0x2ae>
 8007a28:	6041      	str	r1, [r0, #4]
 8007a2a:	4648      	mov	r0, r9
 8007a2c:	f000 fd9c 	bl	8008568 <_Balloc>
 8007a30:	4682      	mov	sl, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d142      	bne.n	8007abc <_dtoa_r+0x2f4>
 8007a36:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab0 <_dtoa_r+0x2e8>)
 8007a38:	4602      	mov	r2, r0
 8007a3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a3e:	e6da      	b.n	80077f6 <_dtoa_r+0x2e>
 8007a40:	2300      	movs	r3, #0
 8007a42:	e7e3      	b.n	8007a0c <_dtoa_r+0x244>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e7d5      	b.n	80079f4 <_dtoa_r+0x22c>
 8007a48:	2401      	movs	r4, #1
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007a50:	f04f 3bff 	mov.w	fp, #4294967295
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a5a:	2312      	movs	r3, #18
 8007a5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a5e:	e7db      	b.n	8007a18 <_dtoa_r+0x250>
 8007a60:	2301      	movs	r3, #1
 8007a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a64:	e7f4      	b.n	8007a50 <_dtoa_r+0x288>
 8007a66:	f04f 0b01 	mov.w	fp, #1
 8007a6a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007a6e:	465b      	mov	r3, fp
 8007a70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007a74:	e7d0      	b.n	8007a18 <_dtoa_r+0x250>
 8007a76:	3101      	adds	r1, #1
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	e7d1      	b.n	8007a20 <_dtoa_r+0x258>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	636f4361 	.word	0x636f4361
 8007a84:	3fd287a7 	.word	0x3fd287a7
 8007a88:	8b60c8b3 	.word	0x8b60c8b3
 8007a8c:	3fc68a28 	.word	0x3fc68a28
 8007a90:	509f79fb 	.word	0x509f79fb
 8007a94:	3fd34413 	.word	0x3fd34413
 8007a98:	08009b4d 	.word	0x08009b4d
 8007a9c:	08009b64 	.word	0x08009b64
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	08009b1d 	.word	0x08009b1d
 8007aa8:	3ff80000 	.word	0x3ff80000
 8007aac:	08009cb8 	.word	0x08009cb8
 8007ab0:	08009bbc 	.word	0x08009bbc
 8007ab4:	08009b49 	.word	0x08009b49
 8007ab8:	08009b1c 	.word	0x08009b1c
 8007abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ac0:	6018      	str	r0, [r3, #0]
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	2b0e      	cmp	r3, #14
 8007ac6:	f200 80a1 	bhi.w	8007c0c <_dtoa_r+0x444>
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	f000 809e 	beq.w	8007c0c <_dtoa_r+0x444>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	dd33      	ble.n	8007b3c <_dtoa_r+0x374>
 8007ad4:	4b9c      	ldr	r3, [pc, #624]	@ (8007d48 <_dtoa_r+0x580>)
 8007ad6:	f007 020f 	and.w	r2, r7, #15
 8007ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ade:	ed93 7b00 	vldr	d7, [r3]
 8007ae2:	05f8      	lsls	r0, r7, #23
 8007ae4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007aec:	d516      	bpl.n	8007b1c <_dtoa_r+0x354>
 8007aee:	4b97      	ldr	r3, [pc, #604]	@ (8007d4c <_dtoa_r+0x584>)
 8007af0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af8:	f7f8 fe80 	bl	80007fc <__aeabi_ddiv>
 8007afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b00:	f004 040f 	and.w	r4, r4, #15
 8007b04:	2603      	movs	r6, #3
 8007b06:	4d91      	ldr	r5, [pc, #580]	@ (8007d4c <_dtoa_r+0x584>)
 8007b08:	b954      	cbnz	r4, 8007b20 <_dtoa_r+0x358>
 8007b0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b12:	f7f8 fe73 	bl	80007fc <__aeabi_ddiv>
 8007b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b1a:	e028      	b.n	8007b6e <_dtoa_r+0x3a6>
 8007b1c:	2602      	movs	r6, #2
 8007b1e:	e7f2      	b.n	8007b06 <_dtoa_r+0x33e>
 8007b20:	07e1      	lsls	r1, r4, #31
 8007b22:	d508      	bpl.n	8007b36 <_dtoa_r+0x36e>
 8007b24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b2c:	f7f8 fd3c 	bl	80005a8 <__aeabi_dmul>
 8007b30:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b34:	3601      	adds	r6, #1
 8007b36:	1064      	asrs	r4, r4, #1
 8007b38:	3508      	adds	r5, #8
 8007b3a:	e7e5      	b.n	8007b08 <_dtoa_r+0x340>
 8007b3c:	f000 80af 	beq.w	8007c9e <_dtoa_r+0x4d6>
 8007b40:	427c      	negs	r4, r7
 8007b42:	4b81      	ldr	r3, [pc, #516]	@ (8007d48 <_dtoa_r+0x580>)
 8007b44:	4d81      	ldr	r5, [pc, #516]	@ (8007d4c <_dtoa_r+0x584>)
 8007b46:	f004 020f 	and.w	r2, r4, #15
 8007b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b56:	f7f8 fd27 	bl	80005a8 <__aeabi_dmul>
 8007b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b5e:	1124      	asrs	r4, r4, #4
 8007b60:	2300      	movs	r3, #0
 8007b62:	2602      	movs	r6, #2
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	f040 808f 	bne.w	8007c88 <_dtoa_r+0x4c0>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1d3      	bne.n	8007b16 <_dtoa_r+0x34e>
 8007b6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b70:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 8094 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b7a:	4b75      	ldr	r3, [pc, #468]	@ (8007d50 <_dtoa_r+0x588>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 ff83 	bl	8000a8c <__aeabi_dcmplt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f000 808b 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8087 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b94:	f1bb 0f00 	cmp.w	fp, #0
 8007b98:	dd34      	ble.n	8007c04 <_dtoa_r+0x43c>
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8007d54 <_dtoa_r+0x58c>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fd01 	bl	80005a8 <__aeabi_dmul>
 8007ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007baa:	f107 38ff 	add.w	r8, r7, #4294967295
 8007bae:	3601      	adds	r6, #1
 8007bb0:	465c      	mov	r4, fp
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f7f8 fc8e 	bl	80004d4 <__aeabi_i2d>
 8007bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bbc:	f7f8 fcf4 	bl	80005a8 <__aeabi_dmul>
 8007bc0:	4b65      	ldr	r3, [pc, #404]	@ (8007d58 <_dtoa_r+0x590>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fb3a 	bl	800023c <__adddf3>
 8007bc8:	4605      	mov	r5, r0
 8007bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	d16a      	bne.n	8007ca8 <_dtoa_r+0x4e0>
 8007bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd6:	4b61      	ldr	r3, [pc, #388]	@ (8007d5c <_dtoa_r+0x594>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f7f8 fb2d 	bl	8000238 <__aeabi_dsub>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007be6:	462a      	mov	r2, r5
 8007be8:	4633      	mov	r3, r6
 8007bea:	f7f8 ff6d 	bl	8000ac8 <__aeabi_dcmpgt>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f040 8298 	bne.w	8008124 <_dtoa_r+0x95c>
 8007bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bfe:	f7f8 ff45 	bl	8000a8c <__aeabi_dcmplt>
 8007c02:	bb38      	cbnz	r0, 8007c54 <_dtoa_r+0x48c>
 8007c04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007c08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f2c0 8157 	blt.w	8007ec2 <_dtoa_r+0x6fa>
 8007c14:	2f0e      	cmp	r7, #14
 8007c16:	f300 8154 	bgt.w	8007ec2 <_dtoa_r+0x6fa>
 8007c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007d48 <_dtoa_r+0x580>)
 8007c1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c20:	ed93 7b00 	vldr	d7, [r3]
 8007c24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	ed8d 7b00 	vstr	d7, [sp]
 8007c2c:	f280 80e5 	bge.w	8007dfa <_dtoa_r+0x632>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f300 80e1 	bgt.w	8007dfa <_dtoa_r+0x632>
 8007c38:	d10c      	bne.n	8007c54 <_dtoa_r+0x48c>
 8007c3a:	4b48      	ldr	r3, [pc, #288]	@ (8007d5c <_dtoa_r+0x594>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	ec51 0b17 	vmov	r0, r1, d7
 8007c42:	f7f8 fcb1 	bl	80005a8 <__aeabi_dmul>
 8007c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c4a:	f7f8 ff33 	bl	8000ab4 <__aeabi_dcmpge>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f000 8266 	beq.w	8008120 <_dtoa_r+0x958>
 8007c54:	2400      	movs	r4, #0
 8007c56:	4625      	mov	r5, r4
 8007c58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c5a:	4656      	mov	r6, sl
 8007c5c:	ea6f 0803 	mvn.w	r8, r3
 8007c60:	2700      	movs	r7, #0
 8007c62:	4621      	mov	r1, r4
 8007c64:	4648      	mov	r0, r9
 8007c66:	f000 fcbf 	bl	80085e8 <_Bfree>
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	f000 80bd 	beq.w	8007dea <_dtoa_r+0x622>
 8007c70:	b12f      	cbz	r7, 8007c7e <_dtoa_r+0x4b6>
 8007c72:	42af      	cmp	r7, r5
 8007c74:	d003      	beq.n	8007c7e <_dtoa_r+0x4b6>
 8007c76:	4639      	mov	r1, r7
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f000 fcb5 	bl	80085e8 <_Bfree>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	4648      	mov	r0, r9
 8007c82:	f000 fcb1 	bl	80085e8 <_Bfree>
 8007c86:	e0b0      	b.n	8007dea <_dtoa_r+0x622>
 8007c88:	07e2      	lsls	r2, r4, #31
 8007c8a:	d505      	bpl.n	8007c98 <_dtoa_r+0x4d0>
 8007c8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c90:	f7f8 fc8a 	bl	80005a8 <__aeabi_dmul>
 8007c94:	3601      	adds	r6, #1
 8007c96:	2301      	movs	r3, #1
 8007c98:	1064      	asrs	r4, r4, #1
 8007c9a:	3508      	adds	r5, #8
 8007c9c:	e762      	b.n	8007b64 <_dtoa_r+0x39c>
 8007c9e:	2602      	movs	r6, #2
 8007ca0:	e765      	b.n	8007b6e <_dtoa_r+0x3a6>
 8007ca2:	9c03      	ldr	r4, [sp, #12]
 8007ca4:	46b8      	mov	r8, r7
 8007ca6:	e784      	b.n	8007bb2 <_dtoa_r+0x3ea>
 8007ca8:	4b27      	ldr	r3, [pc, #156]	@ (8007d48 <_dtoa_r+0x580>)
 8007caa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cb4:	4454      	add	r4, sl
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	d054      	beq.n	8007d64 <_dtoa_r+0x59c>
 8007cba:	4929      	ldr	r1, [pc, #164]	@ (8007d60 <_dtoa_r+0x598>)
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f7f8 fd9d 	bl	80007fc <__aeabi_ddiv>
 8007cc2:	4633      	mov	r3, r6
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	f7f8 fab7 	bl	8000238 <__aeabi_dsub>
 8007cca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007cce:	4656      	mov	r6, sl
 8007cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd4:	f7f8 ff18 	bl	8000b08 <__aeabi_d2iz>
 8007cd8:	4605      	mov	r5, r0
 8007cda:	f7f8 fbfb 	bl	80004d4 <__aeabi_i2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce6:	f7f8 faa7 	bl	8000238 <__aeabi_dsub>
 8007cea:	3530      	adds	r5, #48	@ 0x30
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cf4:	f806 5b01 	strb.w	r5, [r6], #1
 8007cf8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007cfc:	f7f8 fec6 	bl	8000a8c <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d172      	bne.n	8007dea <_dtoa_r+0x622>
 8007d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d08:	4911      	ldr	r1, [pc, #68]	@ (8007d50 <_dtoa_r+0x588>)
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	f7f8 fa94 	bl	8000238 <__aeabi_dsub>
 8007d10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d14:	f7f8 feba 	bl	8000a8c <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f040 80b4 	bne.w	8007e86 <_dtoa_r+0x6be>
 8007d1e:	42a6      	cmp	r6, r4
 8007d20:	f43f af70 	beq.w	8007c04 <_dtoa_r+0x43c>
 8007d24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d28:	4b0a      	ldr	r3, [pc, #40]	@ (8007d54 <_dtoa_r+0x58c>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f7f8 fc3c 	bl	80005a8 <__aeabi_dmul>
 8007d30:	4b08      	ldr	r3, [pc, #32]	@ (8007d54 <_dtoa_r+0x58c>)
 8007d32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d36:	2200      	movs	r2, #0
 8007d38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d3c:	f7f8 fc34 	bl	80005a8 <__aeabi_dmul>
 8007d40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d44:	e7c4      	b.n	8007cd0 <_dtoa_r+0x508>
 8007d46:	bf00      	nop
 8007d48:	08009cb8 	.word	0x08009cb8
 8007d4c:	08009c90 	.word	0x08009c90
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	40240000 	.word	0x40240000
 8007d58:	401c0000 	.word	0x401c0000
 8007d5c:	40140000 	.word	0x40140000
 8007d60:	3fe00000 	.word	0x3fe00000
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7f8 fc1e 	bl	80005a8 <__aeabi_dmul>
 8007d6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d72:	4656      	mov	r6, sl
 8007d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d78:	f7f8 fec6 	bl	8000b08 <__aeabi_d2iz>
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	f7f8 fba9 	bl	80004d4 <__aeabi_i2d>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d8a:	f7f8 fa55 	bl	8000238 <__aeabi_dsub>
 8007d8e:	3530      	adds	r5, #48	@ 0x30
 8007d90:	f806 5b01 	strb.w	r5, [r6], #1
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	42a6      	cmp	r6, r4
 8007d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	d124      	bne.n	8007dee <_dtoa_r+0x626>
 8007da4:	4baf      	ldr	r3, [pc, #700]	@ (8008064 <_dtoa_r+0x89c>)
 8007da6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007daa:	f7f8 fa47 	bl	800023c <__adddf3>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007db6:	f7f8 fe87 	bl	8000ac8 <__aeabi_dcmpgt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d163      	bne.n	8007e86 <_dtoa_r+0x6be>
 8007dbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dc2:	49a8      	ldr	r1, [pc, #672]	@ (8008064 <_dtoa_r+0x89c>)
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f7f8 fa37 	bl	8000238 <__aeabi_dsub>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd2:	f7f8 fe5b 	bl	8000a8c <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f43f af14 	beq.w	8007c04 <_dtoa_r+0x43c>
 8007ddc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007dde:	1e73      	subs	r3, r6, #1
 8007de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007de2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007de6:	2b30      	cmp	r3, #48	@ 0x30
 8007de8:	d0f8      	beq.n	8007ddc <_dtoa_r+0x614>
 8007dea:	4647      	mov	r7, r8
 8007dec:	e03b      	b.n	8007e66 <_dtoa_r+0x69e>
 8007dee:	4b9e      	ldr	r3, [pc, #632]	@ (8008068 <_dtoa_r+0x8a0>)
 8007df0:	f7f8 fbda 	bl	80005a8 <__aeabi_dmul>
 8007df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007df8:	e7bc      	b.n	8007d74 <_dtoa_r+0x5ac>
 8007dfa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007dfe:	4656      	mov	r6, sl
 8007e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e04:	4620      	mov	r0, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	f7f8 fcf8 	bl	80007fc <__aeabi_ddiv>
 8007e0c:	f7f8 fe7c 	bl	8000b08 <__aeabi_d2iz>
 8007e10:	4680      	mov	r8, r0
 8007e12:	f7f8 fb5f 	bl	80004d4 <__aeabi_i2d>
 8007e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e1a:	f7f8 fbc5 	bl	80005a8 <__aeabi_dmul>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e2a:	f7f8 fa05 	bl	8000238 <__aeabi_dsub>
 8007e2e:	f806 4b01 	strb.w	r4, [r6], #1
 8007e32:	9d03      	ldr	r5, [sp, #12]
 8007e34:	eba6 040a 	sub.w	r4, r6, sl
 8007e38:	42a5      	cmp	r5, r4
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	d133      	bne.n	8007ea8 <_dtoa_r+0x6e0>
 8007e40:	f7f8 f9fc 	bl	800023c <__adddf3>
 8007e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e48:	4604      	mov	r4, r0
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	f7f8 fe3c 	bl	8000ac8 <__aeabi_dcmpgt>
 8007e50:	b9c0      	cbnz	r0, 8007e84 <_dtoa_r+0x6bc>
 8007e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e56:	4620      	mov	r0, r4
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fe0d 	bl	8000a78 <__aeabi_dcmpeq>
 8007e5e:	b110      	cbz	r0, 8007e66 <_dtoa_r+0x69e>
 8007e60:	f018 0f01 	tst.w	r8, #1
 8007e64:	d10e      	bne.n	8007e84 <_dtoa_r+0x6bc>
 8007e66:	9902      	ldr	r1, [sp, #8]
 8007e68:	4648      	mov	r0, r9
 8007e6a:	f000 fbbd 	bl	80085e8 <_Bfree>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	7033      	strb	r3, [r6, #0]
 8007e72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e74:	3701      	adds	r7, #1
 8007e76:	601f      	str	r7, [r3, #0]
 8007e78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 824b 	beq.w	8008316 <_dtoa_r+0xb4e>
 8007e80:	601e      	str	r6, [r3, #0]
 8007e82:	e248      	b.n	8008316 <_dtoa_r+0xb4e>
 8007e84:	46b8      	mov	r8, r7
 8007e86:	4633      	mov	r3, r6
 8007e88:	461e      	mov	r6, r3
 8007e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e8e:	2a39      	cmp	r2, #57	@ 0x39
 8007e90:	d106      	bne.n	8007ea0 <_dtoa_r+0x6d8>
 8007e92:	459a      	cmp	sl, r3
 8007e94:	d1f8      	bne.n	8007e88 <_dtoa_r+0x6c0>
 8007e96:	2230      	movs	r2, #48	@ 0x30
 8007e98:	f108 0801 	add.w	r8, r8, #1
 8007e9c:	f88a 2000 	strb.w	r2, [sl]
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	3201      	adds	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e7a0      	b.n	8007dea <_dtoa_r+0x622>
 8007ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8008068 <_dtoa_r+0x8a0>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fb7c 	bl	80005a8 <__aeabi_dmul>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	f7f8 fdde 	bl	8000a78 <__aeabi_dcmpeq>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d09f      	beq.n	8007e00 <_dtoa_r+0x638>
 8007ec0:	e7d1      	b.n	8007e66 <_dtoa_r+0x69e>
 8007ec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	f000 80ea 	beq.w	800809e <_dtoa_r+0x8d6>
 8007eca:	9a07      	ldr	r2, [sp, #28]
 8007ecc:	2a01      	cmp	r2, #1
 8007ece:	f300 80cd 	bgt.w	800806c <_dtoa_r+0x8a4>
 8007ed2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	f000 80c1 	beq.w	800805c <_dtoa_r+0x894>
 8007eda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ede:	9c08      	ldr	r4, [sp, #32]
 8007ee0:	9e00      	ldr	r6, [sp, #0]
 8007ee2:	9a00      	ldr	r2, [sp, #0]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	9200      	str	r2, [sp, #0]
 8007ee8:	9a06      	ldr	r2, [sp, #24]
 8007eea:	2101      	movs	r1, #1
 8007eec:	441a      	add	r2, r3
 8007eee:	4648      	mov	r0, r9
 8007ef0:	9206      	str	r2, [sp, #24]
 8007ef2:	f000 fc2d 	bl	8008750 <__i2b>
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b166      	cbz	r6, 8007f14 <_dtoa_r+0x74c>
 8007efa:	9b06      	ldr	r3, [sp, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd09      	ble.n	8007f14 <_dtoa_r+0x74c>
 8007f00:	42b3      	cmp	r3, r6
 8007f02:	9a00      	ldr	r2, [sp, #0]
 8007f04:	bfa8      	it	ge
 8007f06:	4633      	movge	r3, r6
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	9200      	str	r2, [sp, #0]
 8007f0c:	9a06      	ldr	r2, [sp, #24]
 8007f0e:	1af6      	subs	r6, r6, r3
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	9306      	str	r3, [sp, #24]
 8007f14:	9b08      	ldr	r3, [sp, #32]
 8007f16:	b30b      	cbz	r3, 8007f5c <_dtoa_r+0x794>
 8007f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80c6 	beq.w	80080ac <_dtoa_r+0x8e4>
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	f000 80c0 	beq.w	80080a6 <_dtoa_r+0x8de>
 8007f26:	4629      	mov	r1, r5
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f000 fcc8 	bl	80088c0 <__pow5mult>
 8007f30:	9a02      	ldr	r2, [sp, #8]
 8007f32:	4601      	mov	r1, r0
 8007f34:	4605      	mov	r5, r0
 8007f36:	4648      	mov	r0, r9
 8007f38:	f000 fc20 	bl	800877c <__multiply>
 8007f3c:	9902      	ldr	r1, [sp, #8]
 8007f3e:	4680      	mov	r8, r0
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fb51 	bl	80085e8 <_Bfree>
 8007f46:	9b08      	ldr	r3, [sp, #32]
 8007f48:	1b1b      	subs	r3, r3, r4
 8007f4a:	9308      	str	r3, [sp, #32]
 8007f4c:	f000 80b1 	beq.w	80080b2 <_dtoa_r+0x8ea>
 8007f50:	9a08      	ldr	r2, [sp, #32]
 8007f52:	4641      	mov	r1, r8
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fcb3 	bl	80088c0 <__pow5mult>
 8007f5a:	9002      	str	r0, [sp, #8]
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f000 fbf6 	bl	8008750 <__i2b>
 8007f64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f66:	4604      	mov	r4, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 81d8 	beq.w	800831e <_dtoa_r+0xb56>
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4601      	mov	r1, r0
 8007f72:	4648      	mov	r0, r9
 8007f74:	f000 fca4 	bl	80088c0 <__pow5mult>
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	f300 809f 	bgt.w	80080c0 <_dtoa_r+0x8f8>
 8007f82:	9b04      	ldr	r3, [sp, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 8097 	bne.w	80080b8 <_dtoa_r+0x8f0>
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 8093 	bne.w	80080bc <_dtoa_r+0x8f4>
 8007f96:	9b05      	ldr	r3, [sp, #20]
 8007f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f9c:	0d1b      	lsrs	r3, r3, #20
 8007f9e:	051b      	lsls	r3, r3, #20
 8007fa0:	b133      	cbz	r3, 8007fb0 <_dtoa_r+0x7e8>
 8007fa2:	9b00      	ldr	r3, [sp, #0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	3301      	adds	r3, #1
 8007fac:	9306      	str	r3, [sp, #24]
 8007fae:	2301      	movs	r3, #1
 8007fb0:	9308      	str	r3, [sp, #32]
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 81b8 	beq.w	800832a <_dtoa_r+0xb62>
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fc0:	6918      	ldr	r0, [r3, #16]
 8007fc2:	f000 fb79 	bl	80086b8 <__hi0bits>
 8007fc6:	f1c0 0020 	rsb	r0, r0, #32
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	4418      	add	r0, r3
 8007fce:	f010 001f 	ands.w	r0, r0, #31
 8007fd2:	f000 8082 	beq.w	80080da <_dtoa_r+0x912>
 8007fd6:	f1c0 0320 	rsb	r3, r0, #32
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	dd73      	ble.n	80080c6 <_dtoa_r+0x8fe>
 8007fde:	9b00      	ldr	r3, [sp, #0]
 8007fe0:	f1c0 001c 	rsb	r0, r0, #28
 8007fe4:	4403      	add	r3, r0
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	9b06      	ldr	r3, [sp, #24]
 8007fea:	4403      	add	r3, r0
 8007fec:	4406      	add	r6, r0
 8007fee:	9306      	str	r3, [sp, #24]
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	dd05      	ble.n	8008002 <_dtoa_r+0x83a>
 8007ff6:	9902      	ldr	r1, [sp, #8]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4648      	mov	r0, r9
 8007ffc:	f000 fcba 	bl	8008974 <__lshift>
 8008000:	9002      	str	r0, [sp, #8]
 8008002:	9b06      	ldr	r3, [sp, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	dd05      	ble.n	8008014 <_dtoa_r+0x84c>
 8008008:	4621      	mov	r1, r4
 800800a:	461a      	mov	r2, r3
 800800c:	4648      	mov	r0, r9
 800800e:	f000 fcb1 	bl	8008974 <__lshift>
 8008012:	4604      	mov	r4, r0
 8008014:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d061      	beq.n	80080de <_dtoa_r+0x916>
 800801a:	9802      	ldr	r0, [sp, #8]
 800801c:	4621      	mov	r1, r4
 800801e:	f000 fd15 	bl	8008a4c <__mcmp>
 8008022:	2800      	cmp	r0, #0
 8008024:	da5b      	bge.n	80080de <_dtoa_r+0x916>
 8008026:	2300      	movs	r3, #0
 8008028:	9902      	ldr	r1, [sp, #8]
 800802a:	220a      	movs	r2, #10
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fafd 	bl	800862c <__multadd>
 8008032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008034:	9002      	str	r0, [sp, #8]
 8008036:	f107 38ff 	add.w	r8, r7, #4294967295
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 8177 	beq.w	800832e <_dtoa_r+0xb66>
 8008040:	4629      	mov	r1, r5
 8008042:	2300      	movs	r3, #0
 8008044:	220a      	movs	r2, #10
 8008046:	4648      	mov	r0, r9
 8008048:	f000 faf0 	bl	800862c <__multadd>
 800804c:	f1bb 0f00 	cmp.w	fp, #0
 8008050:	4605      	mov	r5, r0
 8008052:	dc6f      	bgt.n	8008134 <_dtoa_r+0x96c>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	2b02      	cmp	r3, #2
 8008058:	dc49      	bgt.n	80080ee <_dtoa_r+0x926>
 800805a:	e06b      	b.n	8008134 <_dtoa_r+0x96c>
 800805c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800805e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008062:	e73c      	b.n	8007ede <_dtoa_r+0x716>
 8008064:	3fe00000 	.word	0x3fe00000
 8008068:	40240000 	.word	0x40240000
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	1e5c      	subs	r4, r3, #1
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	42a3      	cmp	r3, r4
 8008074:	db09      	blt.n	800808a <_dtoa_r+0x8c2>
 8008076:	1b1c      	subs	r4, r3, r4
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	f6bf af30 	bge.w	8007ee0 <_dtoa_r+0x718>
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	9a03      	ldr	r2, [sp, #12]
 8008084:	1a9e      	subs	r6, r3, r2
 8008086:	2300      	movs	r3, #0
 8008088:	e72b      	b.n	8007ee2 <_dtoa_r+0x71a>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800808e:	9408      	str	r4, [sp, #32]
 8008090:	1ae3      	subs	r3, r4, r3
 8008092:	441a      	add	r2, r3
 8008094:	9e00      	ldr	r6, [sp, #0]
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	920d      	str	r2, [sp, #52]	@ 0x34
 800809a:	2400      	movs	r4, #0
 800809c:	e721      	b.n	8007ee2 <_dtoa_r+0x71a>
 800809e:	9c08      	ldr	r4, [sp, #32]
 80080a0:	9e00      	ldr	r6, [sp, #0]
 80080a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80080a4:	e728      	b.n	8007ef8 <_dtoa_r+0x730>
 80080a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080aa:	e751      	b.n	8007f50 <_dtoa_r+0x788>
 80080ac:	9a08      	ldr	r2, [sp, #32]
 80080ae:	9902      	ldr	r1, [sp, #8]
 80080b0:	e750      	b.n	8007f54 <_dtoa_r+0x78c>
 80080b2:	f8cd 8008 	str.w	r8, [sp, #8]
 80080b6:	e751      	b.n	8007f5c <_dtoa_r+0x794>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e779      	b.n	8007fb0 <_dtoa_r+0x7e8>
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	e777      	b.n	8007fb0 <_dtoa_r+0x7e8>
 80080c0:	2300      	movs	r3, #0
 80080c2:	9308      	str	r3, [sp, #32]
 80080c4:	e779      	b.n	8007fba <_dtoa_r+0x7f2>
 80080c6:	d093      	beq.n	8007ff0 <_dtoa_r+0x828>
 80080c8:	9a00      	ldr	r2, [sp, #0]
 80080ca:	331c      	adds	r3, #28
 80080cc:	441a      	add	r2, r3
 80080ce:	9200      	str	r2, [sp, #0]
 80080d0:	9a06      	ldr	r2, [sp, #24]
 80080d2:	441a      	add	r2, r3
 80080d4:	441e      	add	r6, r3
 80080d6:	9206      	str	r2, [sp, #24]
 80080d8:	e78a      	b.n	8007ff0 <_dtoa_r+0x828>
 80080da:	4603      	mov	r3, r0
 80080dc:	e7f4      	b.n	80080c8 <_dtoa_r+0x900>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	46b8      	mov	r8, r7
 80080e4:	dc20      	bgt.n	8008128 <_dtoa_r+0x960>
 80080e6:	469b      	mov	fp, r3
 80080e8:	9b07      	ldr	r3, [sp, #28]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	dd1e      	ble.n	800812c <_dtoa_r+0x964>
 80080ee:	f1bb 0f00 	cmp.w	fp, #0
 80080f2:	f47f adb1 	bne.w	8007c58 <_dtoa_r+0x490>
 80080f6:	4621      	mov	r1, r4
 80080f8:	465b      	mov	r3, fp
 80080fa:	2205      	movs	r2, #5
 80080fc:	4648      	mov	r0, r9
 80080fe:	f000 fa95 	bl	800862c <__multadd>
 8008102:	4601      	mov	r1, r0
 8008104:	4604      	mov	r4, r0
 8008106:	9802      	ldr	r0, [sp, #8]
 8008108:	f000 fca0 	bl	8008a4c <__mcmp>
 800810c:	2800      	cmp	r0, #0
 800810e:	f77f ada3 	ble.w	8007c58 <_dtoa_r+0x490>
 8008112:	4656      	mov	r6, sl
 8008114:	2331      	movs	r3, #49	@ 0x31
 8008116:	f806 3b01 	strb.w	r3, [r6], #1
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	e59f      	b.n	8007c60 <_dtoa_r+0x498>
 8008120:	9c03      	ldr	r4, [sp, #12]
 8008122:	46b8      	mov	r8, r7
 8008124:	4625      	mov	r5, r4
 8008126:	e7f4      	b.n	8008112 <_dtoa_r+0x94a>
 8008128:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800812c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8101 	beq.w	8008336 <_dtoa_r+0xb6e>
 8008134:	2e00      	cmp	r6, #0
 8008136:	dd05      	ble.n	8008144 <_dtoa_r+0x97c>
 8008138:	4629      	mov	r1, r5
 800813a:	4632      	mov	r2, r6
 800813c:	4648      	mov	r0, r9
 800813e:	f000 fc19 	bl	8008974 <__lshift>
 8008142:	4605      	mov	r5, r0
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d05c      	beq.n	8008204 <_dtoa_r+0xa3c>
 800814a:	6869      	ldr	r1, [r5, #4]
 800814c:	4648      	mov	r0, r9
 800814e:	f000 fa0b 	bl	8008568 <_Balloc>
 8008152:	4606      	mov	r6, r0
 8008154:	b928      	cbnz	r0, 8008162 <_dtoa_r+0x99a>
 8008156:	4b82      	ldr	r3, [pc, #520]	@ (8008360 <_dtoa_r+0xb98>)
 8008158:	4602      	mov	r2, r0
 800815a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800815e:	f7ff bb4a 	b.w	80077f6 <_dtoa_r+0x2e>
 8008162:	692a      	ldr	r2, [r5, #16]
 8008164:	3202      	adds	r2, #2
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	f105 010c 	add.w	r1, r5, #12
 800816c:	300c      	adds	r0, #12
 800816e:	f7ff fa92 	bl	8007696 <memcpy>
 8008172:	2201      	movs	r2, #1
 8008174:	4631      	mov	r1, r6
 8008176:	4648      	mov	r0, r9
 8008178:	f000 fbfc 	bl	8008974 <__lshift>
 800817c:	f10a 0301 	add.w	r3, sl, #1
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	eb0a 030b 	add.w	r3, sl, fp
 8008186:	9308      	str	r3, [sp, #32]
 8008188:	9b04      	ldr	r3, [sp, #16]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	462f      	mov	r7, r5
 8008190:	9306      	str	r3, [sp, #24]
 8008192:	4605      	mov	r5, r0
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	9802      	ldr	r0, [sp, #8]
 8008198:	4621      	mov	r1, r4
 800819a:	f103 3bff 	add.w	fp, r3, #4294967295
 800819e:	f7ff fa88 	bl	80076b2 <quorem>
 80081a2:	4603      	mov	r3, r0
 80081a4:	3330      	adds	r3, #48	@ 0x30
 80081a6:	9003      	str	r0, [sp, #12]
 80081a8:	4639      	mov	r1, r7
 80081aa:	9802      	ldr	r0, [sp, #8]
 80081ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ae:	f000 fc4d 	bl	8008a4c <__mcmp>
 80081b2:	462a      	mov	r2, r5
 80081b4:	9004      	str	r0, [sp, #16]
 80081b6:	4621      	mov	r1, r4
 80081b8:	4648      	mov	r0, r9
 80081ba:	f000 fc63 	bl	8008a84 <__mdiff>
 80081be:	68c2      	ldr	r2, [r0, #12]
 80081c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c2:	4606      	mov	r6, r0
 80081c4:	bb02      	cbnz	r2, 8008208 <_dtoa_r+0xa40>
 80081c6:	4601      	mov	r1, r0
 80081c8:	9802      	ldr	r0, [sp, #8]
 80081ca:	f000 fc3f 	bl	8008a4c <__mcmp>
 80081ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d0:	4602      	mov	r2, r0
 80081d2:	4631      	mov	r1, r6
 80081d4:	4648      	mov	r0, r9
 80081d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80081d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081da:	f000 fa05 	bl	80085e8 <_Bfree>
 80081de:	9b07      	ldr	r3, [sp, #28]
 80081e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80081e2:	9e00      	ldr	r6, [sp, #0]
 80081e4:	ea42 0103 	orr.w	r1, r2, r3
 80081e8:	9b06      	ldr	r3, [sp, #24]
 80081ea:	4319      	orrs	r1, r3
 80081ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ee:	d10d      	bne.n	800820c <_dtoa_r+0xa44>
 80081f0:	2b39      	cmp	r3, #57	@ 0x39
 80081f2:	d027      	beq.n	8008244 <_dtoa_r+0xa7c>
 80081f4:	9a04      	ldr	r2, [sp, #16]
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	dd01      	ble.n	80081fe <_dtoa_r+0xa36>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	3331      	adds	r3, #49	@ 0x31
 80081fe:	f88b 3000 	strb.w	r3, [fp]
 8008202:	e52e      	b.n	8007c62 <_dtoa_r+0x49a>
 8008204:	4628      	mov	r0, r5
 8008206:	e7b9      	b.n	800817c <_dtoa_r+0x9b4>
 8008208:	2201      	movs	r2, #1
 800820a:	e7e2      	b.n	80081d2 <_dtoa_r+0xa0a>
 800820c:	9904      	ldr	r1, [sp, #16]
 800820e:	2900      	cmp	r1, #0
 8008210:	db04      	blt.n	800821c <_dtoa_r+0xa54>
 8008212:	9807      	ldr	r0, [sp, #28]
 8008214:	4301      	orrs	r1, r0
 8008216:	9806      	ldr	r0, [sp, #24]
 8008218:	4301      	orrs	r1, r0
 800821a:	d120      	bne.n	800825e <_dtoa_r+0xa96>
 800821c:	2a00      	cmp	r2, #0
 800821e:	ddee      	ble.n	80081fe <_dtoa_r+0xa36>
 8008220:	9902      	ldr	r1, [sp, #8]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2201      	movs	r2, #1
 8008226:	4648      	mov	r0, r9
 8008228:	f000 fba4 	bl	8008974 <__lshift>
 800822c:	4621      	mov	r1, r4
 800822e:	9002      	str	r0, [sp, #8]
 8008230:	f000 fc0c 	bl	8008a4c <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	dc02      	bgt.n	8008240 <_dtoa_r+0xa78>
 800823a:	d1e0      	bne.n	80081fe <_dtoa_r+0xa36>
 800823c:	07da      	lsls	r2, r3, #31
 800823e:	d5de      	bpl.n	80081fe <_dtoa_r+0xa36>
 8008240:	2b39      	cmp	r3, #57	@ 0x39
 8008242:	d1da      	bne.n	80081fa <_dtoa_r+0xa32>
 8008244:	2339      	movs	r3, #57	@ 0x39
 8008246:	f88b 3000 	strb.w	r3, [fp]
 800824a:	4633      	mov	r3, r6
 800824c:	461e      	mov	r6, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008254:	2a39      	cmp	r2, #57	@ 0x39
 8008256:	d04e      	beq.n	80082f6 <_dtoa_r+0xb2e>
 8008258:	3201      	adds	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e501      	b.n	8007c62 <_dtoa_r+0x49a>
 800825e:	2a00      	cmp	r2, #0
 8008260:	dd03      	ble.n	800826a <_dtoa_r+0xaa2>
 8008262:	2b39      	cmp	r3, #57	@ 0x39
 8008264:	d0ee      	beq.n	8008244 <_dtoa_r+0xa7c>
 8008266:	3301      	adds	r3, #1
 8008268:	e7c9      	b.n	80081fe <_dtoa_r+0xa36>
 800826a:	9a00      	ldr	r2, [sp, #0]
 800826c:	9908      	ldr	r1, [sp, #32]
 800826e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008272:	428a      	cmp	r2, r1
 8008274:	d028      	beq.n	80082c8 <_dtoa_r+0xb00>
 8008276:	9902      	ldr	r1, [sp, #8]
 8008278:	2300      	movs	r3, #0
 800827a:	220a      	movs	r2, #10
 800827c:	4648      	mov	r0, r9
 800827e:	f000 f9d5 	bl	800862c <__multadd>
 8008282:	42af      	cmp	r7, r5
 8008284:	9002      	str	r0, [sp, #8]
 8008286:	f04f 0300 	mov.w	r3, #0
 800828a:	f04f 020a 	mov.w	r2, #10
 800828e:	4639      	mov	r1, r7
 8008290:	4648      	mov	r0, r9
 8008292:	d107      	bne.n	80082a4 <_dtoa_r+0xadc>
 8008294:	f000 f9ca 	bl	800862c <__multadd>
 8008298:	4607      	mov	r7, r0
 800829a:	4605      	mov	r5, r0
 800829c:	9b00      	ldr	r3, [sp, #0]
 800829e:	3301      	adds	r3, #1
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	e777      	b.n	8008194 <_dtoa_r+0x9cc>
 80082a4:	f000 f9c2 	bl	800862c <__multadd>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4607      	mov	r7, r0
 80082ac:	2300      	movs	r3, #0
 80082ae:	220a      	movs	r2, #10
 80082b0:	4648      	mov	r0, r9
 80082b2:	f000 f9bb 	bl	800862c <__multadd>
 80082b6:	4605      	mov	r5, r0
 80082b8:	e7f0      	b.n	800829c <_dtoa_r+0xad4>
 80082ba:	f1bb 0f00 	cmp.w	fp, #0
 80082be:	bfcc      	ite	gt
 80082c0:	465e      	movgt	r6, fp
 80082c2:	2601      	movle	r6, #1
 80082c4:	4456      	add	r6, sl
 80082c6:	2700      	movs	r7, #0
 80082c8:	9902      	ldr	r1, [sp, #8]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2201      	movs	r2, #1
 80082ce:	4648      	mov	r0, r9
 80082d0:	f000 fb50 	bl	8008974 <__lshift>
 80082d4:	4621      	mov	r1, r4
 80082d6:	9002      	str	r0, [sp, #8]
 80082d8:	f000 fbb8 	bl	8008a4c <__mcmp>
 80082dc:	2800      	cmp	r0, #0
 80082de:	dcb4      	bgt.n	800824a <_dtoa_r+0xa82>
 80082e0:	d102      	bne.n	80082e8 <_dtoa_r+0xb20>
 80082e2:	9b00      	ldr	r3, [sp, #0]
 80082e4:	07db      	lsls	r3, r3, #31
 80082e6:	d4b0      	bmi.n	800824a <_dtoa_r+0xa82>
 80082e8:	4633      	mov	r3, r6
 80082ea:	461e      	mov	r6, r3
 80082ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f0:	2a30      	cmp	r2, #48	@ 0x30
 80082f2:	d0fa      	beq.n	80082ea <_dtoa_r+0xb22>
 80082f4:	e4b5      	b.n	8007c62 <_dtoa_r+0x49a>
 80082f6:	459a      	cmp	sl, r3
 80082f8:	d1a8      	bne.n	800824c <_dtoa_r+0xa84>
 80082fa:	2331      	movs	r3, #49	@ 0x31
 80082fc:	f108 0801 	add.w	r8, r8, #1
 8008300:	f88a 3000 	strb.w	r3, [sl]
 8008304:	e4ad      	b.n	8007c62 <_dtoa_r+0x49a>
 8008306:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008308:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008364 <_dtoa_r+0xb9c>
 800830c:	b11b      	cbz	r3, 8008316 <_dtoa_r+0xb4e>
 800830e:	f10a 0308 	add.w	r3, sl, #8
 8008312:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4650      	mov	r0, sl
 8008318:	b017      	add	sp, #92	@ 0x5c
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	9b07      	ldr	r3, [sp, #28]
 8008320:	2b01      	cmp	r3, #1
 8008322:	f77f ae2e 	ble.w	8007f82 <_dtoa_r+0x7ba>
 8008326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	2001      	movs	r0, #1
 800832c:	e64d      	b.n	8007fca <_dtoa_r+0x802>
 800832e:	f1bb 0f00 	cmp.w	fp, #0
 8008332:	f77f aed9 	ble.w	80080e8 <_dtoa_r+0x920>
 8008336:	4656      	mov	r6, sl
 8008338:	9802      	ldr	r0, [sp, #8]
 800833a:	4621      	mov	r1, r4
 800833c:	f7ff f9b9 	bl	80076b2 <quorem>
 8008340:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008344:	f806 3b01 	strb.w	r3, [r6], #1
 8008348:	eba6 020a 	sub.w	r2, r6, sl
 800834c:	4593      	cmp	fp, r2
 800834e:	ddb4      	ble.n	80082ba <_dtoa_r+0xaf2>
 8008350:	9902      	ldr	r1, [sp, #8]
 8008352:	2300      	movs	r3, #0
 8008354:	220a      	movs	r2, #10
 8008356:	4648      	mov	r0, r9
 8008358:	f000 f968 	bl	800862c <__multadd>
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	e7eb      	b.n	8008338 <_dtoa_r+0xb70>
 8008360:	08009bbc 	.word	0x08009bbc
 8008364:	08009b40 	.word	0x08009b40

08008368 <_free_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4605      	mov	r5, r0
 800836c:	2900      	cmp	r1, #0
 800836e:	d041      	beq.n	80083f4 <_free_r+0x8c>
 8008370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008374:	1f0c      	subs	r4, r1, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfb8      	it	lt
 800837a:	18e4      	addlt	r4, r4, r3
 800837c:	f000 f8e8 	bl	8008550 <__malloc_lock>
 8008380:	4a1d      	ldr	r2, [pc, #116]	@ (80083f8 <_free_r+0x90>)
 8008382:	6813      	ldr	r3, [r2, #0]
 8008384:	b933      	cbnz	r3, 8008394 <_free_r+0x2c>
 8008386:	6063      	str	r3, [r4, #4]
 8008388:	6014      	str	r4, [r2, #0]
 800838a:	4628      	mov	r0, r5
 800838c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008390:	f000 b8e4 	b.w	800855c <__malloc_unlock>
 8008394:	42a3      	cmp	r3, r4
 8008396:	d908      	bls.n	80083aa <_free_r+0x42>
 8008398:	6820      	ldr	r0, [r4, #0]
 800839a:	1821      	adds	r1, r4, r0
 800839c:	428b      	cmp	r3, r1
 800839e:	bf01      	itttt	eq
 80083a0:	6819      	ldreq	r1, [r3, #0]
 80083a2:	685b      	ldreq	r3, [r3, #4]
 80083a4:	1809      	addeq	r1, r1, r0
 80083a6:	6021      	streq	r1, [r4, #0]
 80083a8:	e7ed      	b.n	8008386 <_free_r+0x1e>
 80083aa:	461a      	mov	r2, r3
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b10b      	cbz	r3, 80083b4 <_free_r+0x4c>
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d9fa      	bls.n	80083aa <_free_r+0x42>
 80083b4:	6811      	ldr	r1, [r2, #0]
 80083b6:	1850      	adds	r0, r2, r1
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d10b      	bne.n	80083d4 <_free_r+0x6c>
 80083bc:	6820      	ldr	r0, [r4, #0]
 80083be:	4401      	add	r1, r0
 80083c0:	1850      	adds	r0, r2, r1
 80083c2:	4283      	cmp	r3, r0
 80083c4:	6011      	str	r1, [r2, #0]
 80083c6:	d1e0      	bne.n	800838a <_free_r+0x22>
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	6053      	str	r3, [r2, #4]
 80083ce:	4408      	add	r0, r1
 80083d0:	6010      	str	r0, [r2, #0]
 80083d2:	e7da      	b.n	800838a <_free_r+0x22>
 80083d4:	d902      	bls.n	80083dc <_free_r+0x74>
 80083d6:	230c      	movs	r3, #12
 80083d8:	602b      	str	r3, [r5, #0]
 80083da:	e7d6      	b.n	800838a <_free_r+0x22>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	1821      	adds	r1, r4, r0
 80083e0:	428b      	cmp	r3, r1
 80083e2:	bf04      	itt	eq
 80083e4:	6819      	ldreq	r1, [r3, #0]
 80083e6:	685b      	ldreq	r3, [r3, #4]
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	bf04      	itt	eq
 80083ec:	1809      	addeq	r1, r1, r0
 80083ee:	6021      	streq	r1, [r4, #0]
 80083f0:	6054      	str	r4, [r2, #4]
 80083f2:	e7ca      	b.n	800838a <_free_r+0x22>
 80083f4:	bd38      	pop	{r3, r4, r5, pc}
 80083f6:	bf00      	nop
 80083f8:	20000864 	.word	0x20000864

080083fc <malloc>:
 80083fc:	4b02      	ldr	r3, [pc, #8]	@ (8008408 <malloc+0xc>)
 80083fe:	4601      	mov	r1, r0
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	f000 b825 	b.w	8008450 <_malloc_r>
 8008406:	bf00      	nop
 8008408:	200000b4 	.word	0x200000b4

0800840c <sbrk_aligned>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4e0f      	ldr	r6, [pc, #60]	@ (800844c <sbrk_aligned+0x40>)
 8008410:	460c      	mov	r4, r1
 8008412:	6831      	ldr	r1, [r6, #0]
 8008414:	4605      	mov	r5, r0
 8008416:	b911      	cbnz	r1, 800841e <sbrk_aligned+0x12>
 8008418:	f000 fe3e 	bl	8009098 <_sbrk_r>
 800841c:	6030      	str	r0, [r6, #0]
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 fe39 	bl	8009098 <_sbrk_r>
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	d103      	bne.n	8008432 <sbrk_aligned+0x26>
 800842a:	f04f 34ff 	mov.w	r4, #4294967295
 800842e:	4620      	mov	r0, r4
 8008430:	bd70      	pop	{r4, r5, r6, pc}
 8008432:	1cc4      	adds	r4, r0, #3
 8008434:	f024 0403 	bic.w	r4, r4, #3
 8008438:	42a0      	cmp	r0, r4
 800843a:	d0f8      	beq.n	800842e <sbrk_aligned+0x22>
 800843c:	1a21      	subs	r1, r4, r0
 800843e:	4628      	mov	r0, r5
 8008440:	f000 fe2a 	bl	8009098 <_sbrk_r>
 8008444:	3001      	adds	r0, #1
 8008446:	d1f2      	bne.n	800842e <sbrk_aligned+0x22>
 8008448:	e7ef      	b.n	800842a <sbrk_aligned+0x1e>
 800844a:	bf00      	nop
 800844c:	20000860 	.word	0x20000860

08008450 <_malloc_r>:
 8008450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008454:	1ccd      	adds	r5, r1, #3
 8008456:	f025 0503 	bic.w	r5, r5, #3
 800845a:	3508      	adds	r5, #8
 800845c:	2d0c      	cmp	r5, #12
 800845e:	bf38      	it	cc
 8008460:	250c      	movcc	r5, #12
 8008462:	2d00      	cmp	r5, #0
 8008464:	4606      	mov	r6, r0
 8008466:	db01      	blt.n	800846c <_malloc_r+0x1c>
 8008468:	42a9      	cmp	r1, r5
 800846a:	d904      	bls.n	8008476 <_malloc_r+0x26>
 800846c:	230c      	movs	r3, #12
 800846e:	6033      	str	r3, [r6, #0]
 8008470:	2000      	movs	r0, #0
 8008472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800854c <_malloc_r+0xfc>
 800847a:	f000 f869 	bl	8008550 <__malloc_lock>
 800847e:	f8d8 3000 	ldr.w	r3, [r8]
 8008482:	461c      	mov	r4, r3
 8008484:	bb44      	cbnz	r4, 80084d8 <_malloc_r+0x88>
 8008486:	4629      	mov	r1, r5
 8008488:	4630      	mov	r0, r6
 800848a:	f7ff ffbf 	bl	800840c <sbrk_aligned>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	4604      	mov	r4, r0
 8008492:	d158      	bne.n	8008546 <_malloc_r+0xf6>
 8008494:	f8d8 4000 	ldr.w	r4, [r8]
 8008498:	4627      	mov	r7, r4
 800849a:	2f00      	cmp	r7, #0
 800849c:	d143      	bne.n	8008526 <_malloc_r+0xd6>
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d04b      	beq.n	800853a <_malloc_r+0xea>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	4639      	mov	r1, r7
 80084a6:	4630      	mov	r0, r6
 80084a8:	eb04 0903 	add.w	r9, r4, r3
 80084ac:	f000 fdf4 	bl	8009098 <_sbrk_r>
 80084b0:	4581      	cmp	r9, r0
 80084b2:	d142      	bne.n	800853a <_malloc_r+0xea>
 80084b4:	6821      	ldr	r1, [r4, #0]
 80084b6:	1a6d      	subs	r5, r5, r1
 80084b8:	4629      	mov	r1, r5
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7ff ffa6 	bl	800840c <sbrk_aligned>
 80084c0:	3001      	adds	r0, #1
 80084c2:	d03a      	beq.n	800853a <_malloc_r+0xea>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	442b      	add	r3, r5
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	f8d8 3000 	ldr.w	r3, [r8]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	bb62      	cbnz	r2, 800852c <_malloc_r+0xdc>
 80084d2:	f8c8 7000 	str.w	r7, [r8]
 80084d6:	e00f      	b.n	80084f8 <_malloc_r+0xa8>
 80084d8:	6822      	ldr	r2, [r4, #0]
 80084da:	1b52      	subs	r2, r2, r5
 80084dc:	d420      	bmi.n	8008520 <_malloc_r+0xd0>
 80084de:	2a0b      	cmp	r2, #11
 80084e0:	d917      	bls.n	8008512 <_malloc_r+0xc2>
 80084e2:	1961      	adds	r1, r4, r5
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	6025      	str	r5, [r4, #0]
 80084e8:	bf18      	it	ne
 80084ea:	6059      	strne	r1, [r3, #4]
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	bf08      	it	eq
 80084f0:	f8c8 1000 	streq.w	r1, [r8]
 80084f4:	5162      	str	r2, [r4, r5]
 80084f6:	604b      	str	r3, [r1, #4]
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f82f 	bl	800855c <__malloc_unlock>
 80084fe:	f104 000b 	add.w	r0, r4, #11
 8008502:	1d23      	adds	r3, r4, #4
 8008504:	f020 0007 	bic.w	r0, r0, #7
 8008508:	1ac2      	subs	r2, r0, r3
 800850a:	bf1c      	itt	ne
 800850c:	1a1b      	subne	r3, r3, r0
 800850e:	50a3      	strne	r3, [r4, r2]
 8008510:	e7af      	b.n	8008472 <_malloc_r+0x22>
 8008512:	6862      	ldr	r2, [r4, #4]
 8008514:	42a3      	cmp	r3, r4
 8008516:	bf0c      	ite	eq
 8008518:	f8c8 2000 	streq.w	r2, [r8]
 800851c:	605a      	strne	r2, [r3, #4]
 800851e:	e7eb      	b.n	80084f8 <_malloc_r+0xa8>
 8008520:	4623      	mov	r3, r4
 8008522:	6864      	ldr	r4, [r4, #4]
 8008524:	e7ae      	b.n	8008484 <_malloc_r+0x34>
 8008526:	463c      	mov	r4, r7
 8008528:	687f      	ldr	r7, [r7, #4]
 800852a:	e7b6      	b.n	800849a <_malloc_r+0x4a>
 800852c:	461a      	mov	r2, r3
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	42a3      	cmp	r3, r4
 8008532:	d1fb      	bne.n	800852c <_malloc_r+0xdc>
 8008534:	2300      	movs	r3, #0
 8008536:	6053      	str	r3, [r2, #4]
 8008538:	e7de      	b.n	80084f8 <_malloc_r+0xa8>
 800853a:	230c      	movs	r3, #12
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	4630      	mov	r0, r6
 8008540:	f000 f80c 	bl	800855c <__malloc_unlock>
 8008544:	e794      	b.n	8008470 <_malloc_r+0x20>
 8008546:	6005      	str	r5, [r0, #0]
 8008548:	e7d6      	b.n	80084f8 <_malloc_r+0xa8>
 800854a:	bf00      	nop
 800854c:	20000864 	.word	0x20000864

08008550 <__malloc_lock>:
 8008550:	4801      	ldr	r0, [pc, #4]	@ (8008558 <__malloc_lock+0x8>)
 8008552:	f7ff b89e 	b.w	8007692 <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	2000085c 	.word	0x2000085c

0800855c <__malloc_unlock>:
 800855c:	4801      	ldr	r0, [pc, #4]	@ (8008564 <__malloc_unlock+0x8>)
 800855e:	f7ff b899 	b.w	8007694 <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	2000085c 	.word	0x2000085c

08008568 <_Balloc>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	69c6      	ldr	r6, [r0, #28]
 800856c:	4604      	mov	r4, r0
 800856e:	460d      	mov	r5, r1
 8008570:	b976      	cbnz	r6, 8008590 <_Balloc+0x28>
 8008572:	2010      	movs	r0, #16
 8008574:	f7ff ff42 	bl	80083fc <malloc>
 8008578:	4602      	mov	r2, r0
 800857a:	61e0      	str	r0, [r4, #28]
 800857c:	b920      	cbnz	r0, 8008588 <_Balloc+0x20>
 800857e:	4b18      	ldr	r3, [pc, #96]	@ (80085e0 <_Balloc+0x78>)
 8008580:	4818      	ldr	r0, [pc, #96]	@ (80085e4 <_Balloc+0x7c>)
 8008582:	216b      	movs	r1, #107	@ 0x6b
 8008584:	f000 fd98 	bl	80090b8 <__assert_func>
 8008588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800858c:	6006      	str	r6, [r0, #0]
 800858e:	60c6      	str	r6, [r0, #12]
 8008590:	69e6      	ldr	r6, [r4, #28]
 8008592:	68f3      	ldr	r3, [r6, #12]
 8008594:	b183      	cbz	r3, 80085b8 <_Balloc+0x50>
 8008596:	69e3      	ldr	r3, [r4, #28]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800859e:	b9b8      	cbnz	r0, 80085d0 <_Balloc+0x68>
 80085a0:	2101      	movs	r1, #1
 80085a2:	fa01 f605 	lsl.w	r6, r1, r5
 80085a6:	1d72      	adds	r2, r6, #5
 80085a8:	0092      	lsls	r2, r2, #2
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fda2 	bl	80090f4 <_calloc_r>
 80085b0:	b160      	cbz	r0, 80085cc <_Balloc+0x64>
 80085b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085b6:	e00e      	b.n	80085d6 <_Balloc+0x6e>
 80085b8:	2221      	movs	r2, #33	@ 0x21
 80085ba:	2104      	movs	r1, #4
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fd99 	bl	80090f4 <_calloc_r>
 80085c2:	69e3      	ldr	r3, [r4, #28]
 80085c4:	60f0      	str	r0, [r6, #12]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1e4      	bne.n	8008596 <_Balloc+0x2e>
 80085cc:	2000      	movs	r0, #0
 80085ce:	bd70      	pop	{r4, r5, r6, pc}
 80085d0:	6802      	ldr	r2, [r0, #0]
 80085d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085d6:	2300      	movs	r3, #0
 80085d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085dc:	e7f7      	b.n	80085ce <_Balloc+0x66>
 80085de:	bf00      	nop
 80085e0:	08009b4d 	.word	0x08009b4d
 80085e4:	08009bcd 	.word	0x08009bcd

080085e8 <_Bfree>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	69c6      	ldr	r6, [r0, #28]
 80085ec:	4605      	mov	r5, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	b976      	cbnz	r6, 8008610 <_Bfree+0x28>
 80085f2:	2010      	movs	r0, #16
 80085f4:	f7ff ff02 	bl	80083fc <malloc>
 80085f8:	4602      	mov	r2, r0
 80085fa:	61e8      	str	r0, [r5, #28]
 80085fc:	b920      	cbnz	r0, 8008608 <_Bfree+0x20>
 80085fe:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <_Bfree+0x3c>)
 8008600:	4809      	ldr	r0, [pc, #36]	@ (8008628 <_Bfree+0x40>)
 8008602:	218f      	movs	r1, #143	@ 0x8f
 8008604:	f000 fd58 	bl	80090b8 <__assert_func>
 8008608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800860c:	6006      	str	r6, [r0, #0]
 800860e:	60c6      	str	r6, [r0, #12]
 8008610:	b13c      	cbz	r4, 8008622 <_Bfree+0x3a>
 8008612:	69eb      	ldr	r3, [r5, #28]
 8008614:	6862      	ldr	r2, [r4, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800861c:	6021      	str	r1, [r4, #0]
 800861e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	08009b4d 	.word	0x08009b4d
 8008628:	08009bcd 	.word	0x08009bcd

0800862c <__multadd>:
 800862c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008630:	690d      	ldr	r5, [r1, #16]
 8008632:	4607      	mov	r7, r0
 8008634:	460c      	mov	r4, r1
 8008636:	461e      	mov	r6, r3
 8008638:	f101 0c14 	add.w	ip, r1, #20
 800863c:	2000      	movs	r0, #0
 800863e:	f8dc 3000 	ldr.w	r3, [ip]
 8008642:	b299      	uxth	r1, r3
 8008644:	fb02 6101 	mla	r1, r2, r1, r6
 8008648:	0c1e      	lsrs	r6, r3, #16
 800864a:	0c0b      	lsrs	r3, r1, #16
 800864c:	fb02 3306 	mla	r3, r2, r6, r3
 8008650:	b289      	uxth	r1, r1
 8008652:	3001      	adds	r0, #1
 8008654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008658:	4285      	cmp	r5, r0
 800865a:	f84c 1b04 	str.w	r1, [ip], #4
 800865e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008662:	dcec      	bgt.n	800863e <__multadd+0x12>
 8008664:	b30e      	cbz	r6, 80086aa <__multadd+0x7e>
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	42ab      	cmp	r3, r5
 800866a:	dc19      	bgt.n	80086a0 <__multadd+0x74>
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4638      	mov	r0, r7
 8008670:	3101      	adds	r1, #1
 8008672:	f7ff ff79 	bl	8008568 <_Balloc>
 8008676:	4680      	mov	r8, r0
 8008678:	b928      	cbnz	r0, 8008686 <__multadd+0x5a>
 800867a:	4602      	mov	r2, r0
 800867c:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <__multadd+0x84>)
 800867e:	480d      	ldr	r0, [pc, #52]	@ (80086b4 <__multadd+0x88>)
 8008680:	21ba      	movs	r1, #186	@ 0xba
 8008682:	f000 fd19 	bl	80090b8 <__assert_func>
 8008686:	6922      	ldr	r2, [r4, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	f104 010c 	add.w	r1, r4, #12
 800868e:	0092      	lsls	r2, r2, #2
 8008690:	300c      	adds	r0, #12
 8008692:	f7ff f800 	bl	8007696 <memcpy>
 8008696:	4621      	mov	r1, r4
 8008698:	4638      	mov	r0, r7
 800869a:	f7ff ffa5 	bl	80085e8 <_Bfree>
 800869e:	4644      	mov	r4, r8
 80086a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086a4:	3501      	adds	r5, #1
 80086a6:	615e      	str	r6, [r3, #20]
 80086a8:	6125      	str	r5, [r4, #16]
 80086aa:	4620      	mov	r0, r4
 80086ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b0:	08009bbc 	.word	0x08009bbc
 80086b4:	08009bcd 	.word	0x08009bcd

080086b8 <__hi0bits>:
 80086b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086bc:	4603      	mov	r3, r0
 80086be:	bf36      	itet	cc
 80086c0:	0403      	lslcc	r3, r0, #16
 80086c2:	2000      	movcs	r0, #0
 80086c4:	2010      	movcc	r0, #16
 80086c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ca:	bf3c      	itt	cc
 80086cc:	021b      	lslcc	r3, r3, #8
 80086ce:	3008      	addcc	r0, #8
 80086d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d4:	bf3c      	itt	cc
 80086d6:	011b      	lslcc	r3, r3, #4
 80086d8:	3004      	addcc	r0, #4
 80086da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086de:	bf3c      	itt	cc
 80086e0:	009b      	lslcc	r3, r3, #2
 80086e2:	3002      	addcc	r0, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	db05      	blt.n	80086f4 <__hi0bits+0x3c>
 80086e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086ec:	f100 0001 	add.w	r0, r0, #1
 80086f0:	bf08      	it	eq
 80086f2:	2020      	moveq	r0, #32
 80086f4:	4770      	bx	lr

080086f6 <__lo0bits>:
 80086f6:	6803      	ldr	r3, [r0, #0]
 80086f8:	4602      	mov	r2, r0
 80086fa:	f013 0007 	ands.w	r0, r3, #7
 80086fe:	d00b      	beq.n	8008718 <__lo0bits+0x22>
 8008700:	07d9      	lsls	r1, r3, #31
 8008702:	d421      	bmi.n	8008748 <__lo0bits+0x52>
 8008704:	0798      	lsls	r0, r3, #30
 8008706:	bf49      	itett	mi
 8008708:	085b      	lsrmi	r3, r3, #1
 800870a:	089b      	lsrpl	r3, r3, #2
 800870c:	2001      	movmi	r0, #1
 800870e:	6013      	strmi	r3, [r2, #0]
 8008710:	bf5c      	itt	pl
 8008712:	6013      	strpl	r3, [r2, #0]
 8008714:	2002      	movpl	r0, #2
 8008716:	4770      	bx	lr
 8008718:	b299      	uxth	r1, r3
 800871a:	b909      	cbnz	r1, 8008720 <__lo0bits+0x2a>
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	2010      	movs	r0, #16
 8008720:	b2d9      	uxtb	r1, r3
 8008722:	b909      	cbnz	r1, 8008728 <__lo0bits+0x32>
 8008724:	3008      	adds	r0, #8
 8008726:	0a1b      	lsrs	r3, r3, #8
 8008728:	0719      	lsls	r1, r3, #28
 800872a:	bf04      	itt	eq
 800872c:	091b      	lsreq	r3, r3, #4
 800872e:	3004      	addeq	r0, #4
 8008730:	0799      	lsls	r1, r3, #30
 8008732:	bf04      	itt	eq
 8008734:	089b      	lsreq	r3, r3, #2
 8008736:	3002      	addeq	r0, #2
 8008738:	07d9      	lsls	r1, r3, #31
 800873a:	d403      	bmi.n	8008744 <__lo0bits+0x4e>
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	f100 0001 	add.w	r0, r0, #1
 8008742:	d003      	beq.n	800874c <__lo0bits+0x56>
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4770      	bx	lr
 8008748:	2000      	movs	r0, #0
 800874a:	4770      	bx	lr
 800874c:	2020      	movs	r0, #32
 800874e:	4770      	bx	lr

08008750 <__i2b>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	2101      	movs	r1, #1
 8008756:	f7ff ff07 	bl	8008568 <_Balloc>
 800875a:	4602      	mov	r2, r0
 800875c:	b928      	cbnz	r0, 800876a <__i2b+0x1a>
 800875e:	4b05      	ldr	r3, [pc, #20]	@ (8008774 <__i2b+0x24>)
 8008760:	4805      	ldr	r0, [pc, #20]	@ (8008778 <__i2b+0x28>)
 8008762:	f240 1145 	movw	r1, #325	@ 0x145
 8008766:	f000 fca7 	bl	80090b8 <__assert_func>
 800876a:	2301      	movs	r3, #1
 800876c:	6144      	str	r4, [r0, #20]
 800876e:	6103      	str	r3, [r0, #16]
 8008770:	bd10      	pop	{r4, pc}
 8008772:	bf00      	nop
 8008774:	08009bbc 	.word	0x08009bbc
 8008778:	08009bcd 	.word	0x08009bcd

0800877c <__multiply>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	4617      	mov	r7, r2
 8008782:	690a      	ldr	r2, [r1, #16]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	429a      	cmp	r2, r3
 8008788:	bfa8      	it	ge
 800878a:	463b      	movge	r3, r7
 800878c:	4689      	mov	r9, r1
 800878e:	bfa4      	itt	ge
 8008790:	460f      	movge	r7, r1
 8008792:	4699      	movge	r9, r3
 8008794:	693d      	ldr	r5, [r7, #16]
 8008796:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	eb05 060a 	add.w	r6, r5, sl
 80087a2:	42b3      	cmp	r3, r6
 80087a4:	b085      	sub	sp, #20
 80087a6:	bfb8      	it	lt
 80087a8:	3101      	addlt	r1, #1
 80087aa:	f7ff fedd 	bl	8008568 <_Balloc>
 80087ae:	b930      	cbnz	r0, 80087be <__multiply+0x42>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4b41      	ldr	r3, [pc, #260]	@ (80088b8 <__multiply+0x13c>)
 80087b4:	4841      	ldr	r0, [pc, #260]	@ (80088bc <__multiply+0x140>)
 80087b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087ba:	f000 fc7d 	bl	80090b8 <__assert_func>
 80087be:	f100 0414 	add.w	r4, r0, #20
 80087c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80087c6:	4623      	mov	r3, r4
 80087c8:	2200      	movs	r2, #0
 80087ca:	4573      	cmp	r3, lr
 80087cc:	d320      	bcc.n	8008810 <__multiply+0x94>
 80087ce:	f107 0814 	add.w	r8, r7, #20
 80087d2:	f109 0114 	add.w	r1, r9, #20
 80087d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80087da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	1beb      	subs	r3, r5, r7
 80087e2:	3b15      	subs	r3, #21
 80087e4:	f023 0303 	bic.w	r3, r3, #3
 80087e8:	3304      	adds	r3, #4
 80087ea:	3715      	adds	r7, #21
 80087ec:	42bd      	cmp	r5, r7
 80087ee:	bf38      	it	cc
 80087f0:	2304      	movcc	r3, #4
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	9103      	str	r1, [sp, #12]
 80087f8:	428b      	cmp	r3, r1
 80087fa:	d80c      	bhi.n	8008816 <__multiply+0x9a>
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	dd03      	ble.n	8008808 <__multiply+0x8c>
 8008800:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008804:	2b00      	cmp	r3, #0
 8008806:	d055      	beq.n	80088b4 <__multiply+0x138>
 8008808:	6106      	str	r6, [r0, #16]
 800880a:	b005      	add	sp, #20
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	f843 2b04 	str.w	r2, [r3], #4
 8008814:	e7d9      	b.n	80087ca <__multiply+0x4e>
 8008816:	f8b1 a000 	ldrh.w	sl, [r1]
 800881a:	f1ba 0f00 	cmp.w	sl, #0
 800881e:	d01f      	beq.n	8008860 <__multiply+0xe4>
 8008820:	46c4      	mov	ip, r8
 8008822:	46a1      	mov	r9, r4
 8008824:	2700      	movs	r7, #0
 8008826:	f85c 2b04 	ldr.w	r2, [ip], #4
 800882a:	f8d9 3000 	ldr.w	r3, [r9]
 800882e:	fa1f fb82 	uxth.w	fp, r2
 8008832:	b29b      	uxth	r3, r3
 8008834:	fb0a 330b 	mla	r3, sl, fp, r3
 8008838:	443b      	add	r3, r7
 800883a:	f8d9 7000 	ldr.w	r7, [r9]
 800883e:	0c12      	lsrs	r2, r2, #16
 8008840:	0c3f      	lsrs	r7, r7, #16
 8008842:	fb0a 7202 	mla	r2, sl, r2, r7
 8008846:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008850:	4565      	cmp	r5, ip
 8008852:	f849 3b04 	str.w	r3, [r9], #4
 8008856:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800885a:	d8e4      	bhi.n	8008826 <__multiply+0xaa>
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	50e7      	str	r7, [r4, r3]
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008866:	3104      	adds	r1, #4
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	d020      	beq.n	80088b0 <__multiply+0x134>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	4647      	mov	r7, r8
 8008872:	46a4      	mov	ip, r4
 8008874:	f04f 0a00 	mov.w	sl, #0
 8008878:	f8b7 b000 	ldrh.w	fp, [r7]
 800887c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008880:	fb09 220b 	mla	r2, r9, fp, r2
 8008884:	4452      	add	r2, sl
 8008886:	b29b      	uxth	r3, r3
 8008888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800888c:	f84c 3b04 	str.w	r3, [ip], #4
 8008890:	f857 3b04 	ldr.w	r3, [r7], #4
 8008894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008898:	f8bc 3000 	ldrh.w	r3, [ip]
 800889c:	fb09 330a 	mla	r3, r9, sl, r3
 80088a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80088a4:	42bd      	cmp	r5, r7
 80088a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088aa:	d8e5      	bhi.n	8008878 <__multiply+0xfc>
 80088ac:	9a01      	ldr	r2, [sp, #4]
 80088ae:	50a3      	str	r3, [r4, r2]
 80088b0:	3404      	adds	r4, #4
 80088b2:	e79f      	b.n	80087f4 <__multiply+0x78>
 80088b4:	3e01      	subs	r6, #1
 80088b6:	e7a1      	b.n	80087fc <__multiply+0x80>
 80088b8:	08009bbc 	.word	0x08009bbc
 80088bc:	08009bcd 	.word	0x08009bcd

080088c0 <__pow5mult>:
 80088c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c4:	4615      	mov	r5, r2
 80088c6:	f012 0203 	ands.w	r2, r2, #3
 80088ca:	4607      	mov	r7, r0
 80088cc:	460e      	mov	r6, r1
 80088ce:	d007      	beq.n	80088e0 <__pow5mult+0x20>
 80088d0:	4c25      	ldr	r4, [pc, #148]	@ (8008968 <__pow5mult+0xa8>)
 80088d2:	3a01      	subs	r2, #1
 80088d4:	2300      	movs	r3, #0
 80088d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088da:	f7ff fea7 	bl	800862c <__multadd>
 80088de:	4606      	mov	r6, r0
 80088e0:	10ad      	asrs	r5, r5, #2
 80088e2:	d03d      	beq.n	8008960 <__pow5mult+0xa0>
 80088e4:	69fc      	ldr	r4, [r7, #28]
 80088e6:	b97c      	cbnz	r4, 8008908 <__pow5mult+0x48>
 80088e8:	2010      	movs	r0, #16
 80088ea:	f7ff fd87 	bl	80083fc <malloc>
 80088ee:	4602      	mov	r2, r0
 80088f0:	61f8      	str	r0, [r7, #28]
 80088f2:	b928      	cbnz	r0, 8008900 <__pow5mult+0x40>
 80088f4:	4b1d      	ldr	r3, [pc, #116]	@ (800896c <__pow5mult+0xac>)
 80088f6:	481e      	ldr	r0, [pc, #120]	@ (8008970 <__pow5mult+0xb0>)
 80088f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088fc:	f000 fbdc 	bl	80090b8 <__assert_func>
 8008900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	60c4      	str	r4, [r0, #12]
 8008908:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800890c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008910:	b94c      	cbnz	r4, 8008926 <__pow5mult+0x66>
 8008912:	f240 2171 	movw	r1, #625	@ 0x271
 8008916:	4638      	mov	r0, r7
 8008918:	f7ff ff1a 	bl	8008750 <__i2b>
 800891c:	2300      	movs	r3, #0
 800891e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008922:	4604      	mov	r4, r0
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	f04f 0900 	mov.w	r9, #0
 800892a:	07eb      	lsls	r3, r5, #31
 800892c:	d50a      	bpl.n	8008944 <__pow5mult+0x84>
 800892e:	4631      	mov	r1, r6
 8008930:	4622      	mov	r2, r4
 8008932:	4638      	mov	r0, r7
 8008934:	f7ff ff22 	bl	800877c <__multiply>
 8008938:	4631      	mov	r1, r6
 800893a:	4680      	mov	r8, r0
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff fe53 	bl	80085e8 <_Bfree>
 8008942:	4646      	mov	r6, r8
 8008944:	106d      	asrs	r5, r5, #1
 8008946:	d00b      	beq.n	8008960 <__pow5mult+0xa0>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	b938      	cbnz	r0, 800895c <__pow5mult+0x9c>
 800894c:	4622      	mov	r2, r4
 800894e:	4621      	mov	r1, r4
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ff13 	bl	800877c <__multiply>
 8008956:	6020      	str	r0, [r4, #0]
 8008958:	f8c0 9000 	str.w	r9, [r0]
 800895c:	4604      	mov	r4, r0
 800895e:	e7e4      	b.n	800892a <__pow5mult+0x6a>
 8008960:	4630      	mov	r0, r6
 8008962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008966:	bf00      	nop
 8008968:	08009c80 	.word	0x08009c80
 800896c:	08009b4d 	.word	0x08009b4d
 8008970:	08009bcd 	.word	0x08009bcd

08008974 <__lshift>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	6849      	ldr	r1, [r1, #4]
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	4607      	mov	r7, r0
 8008986:	4691      	mov	r9, r2
 8008988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800898c:	f108 0601 	add.w	r6, r8, #1
 8008990:	42b3      	cmp	r3, r6
 8008992:	db0b      	blt.n	80089ac <__lshift+0x38>
 8008994:	4638      	mov	r0, r7
 8008996:	f7ff fde7 	bl	8008568 <_Balloc>
 800899a:	4605      	mov	r5, r0
 800899c:	b948      	cbnz	r0, 80089b2 <__lshift+0x3e>
 800899e:	4602      	mov	r2, r0
 80089a0:	4b28      	ldr	r3, [pc, #160]	@ (8008a44 <__lshift+0xd0>)
 80089a2:	4829      	ldr	r0, [pc, #164]	@ (8008a48 <__lshift+0xd4>)
 80089a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089a8:	f000 fb86 	bl	80090b8 <__assert_func>
 80089ac:	3101      	adds	r1, #1
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	e7ee      	b.n	8008990 <__lshift+0x1c>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f100 0114 	add.w	r1, r0, #20
 80089b8:	f100 0210 	add.w	r2, r0, #16
 80089bc:	4618      	mov	r0, r3
 80089be:	4553      	cmp	r3, sl
 80089c0:	db33      	blt.n	8008a2a <__lshift+0xb6>
 80089c2:	6920      	ldr	r0, [r4, #16]
 80089c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c8:	f104 0314 	add.w	r3, r4, #20
 80089cc:	f019 091f 	ands.w	r9, r9, #31
 80089d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089d8:	d02b      	beq.n	8008a32 <__lshift+0xbe>
 80089da:	f1c9 0e20 	rsb	lr, r9, #32
 80089de:	468a      	mov	sl, r1
 80089e0:	2200      	movs	r2, #0
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	fa00 f009 	lsl.w	r0, r0, r9
 80089e8:	4310      	orrs	r0, r2
 80089ea:	f84a 0b04 	str.w	r0, [sl], #4
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	459c      	cmp	ip, r3
 80089f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80089f8:	d8f3      	bhi.n	80089e2 <__lshift+0x6e>
 80089fa:	ebac 0304 	sub.w	r3, ip, r4
 80089fe:	3b15      	subs	r3, #21
 8008a00:	f023 0303 	bic.w	r3, r3, #3
 8008a04:	3304      	adds	r3, #4
 8008a06:	f104 0015 	add.w	r0, r4, #21
 8008a0a:	4560      	cmp	r0, ip
 8008a0c:	bf88      	it	hi
 8008a0e:	2304      	movhi	r3, #4
 8008a10:	50ca      	str	r2, [r1, r3]
 8008a12:	b10a      	cbz	r2, 8008a18 <__lshift+0xa4>
 8008a14:	f108 0602 	add.w	r6, r8, #2
 8008a18:	3e01      	subs	r6, #1
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	612e      	str	r6, [r5, #16]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f7ff fde2 	bl	80085e8 <_Bfree>
 8008a24:	4628      	mov	r0, r5
 8008a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a2e:	3301      	adds	r3, #1
 8008a30:	e7c5      	b.n	80089be <__lshift+0x4a>
 8008a32:	3904      	subs	r1, #4
 8008a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a38:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a3c:	459c      	cmp	ip, r3
 8008a3e:	d8f9      	bhi.n	8008a34 <__lshift+0xc0>
 8008a40:	e7ea      	b.n	8008a18 <__lshift+0xa4>
 8008a42:	bf00      	nop
 8008a44:	08009bbc 	.word	0x08009bbc
 8008a48:	08009bcd 	.word	0x08009bcd

08008a4c <__mcmp>:
 8008a4c:	690a      	ldr	r2, [r1, #16]
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6900      	ldr	r0, [r0, #16]
 8008a52:	1a80      	subs	r0, r0, r2
 8008a54:	b530      	push	{r4, r5, lr}
 8008a56:	d10e      	bne.n	8008a76 <__mcmp+0x2a>
 8008a58:	3314      	adds	r3, #20
 8008a5a:	3114      	adds	r1, #20
 8008a5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a6c:	4295      	cmp	r5, r2
 8008a6e:	d003      	beq.n	8008a78 <__mcmp+0x2c>
 8008a70:	d205      	bcs.n	8008a7e <__mcmp+0x32>
 8008a72:	f04f 30ff 	mov.w	r0, #4294967295
 8008a76:	bd30      	pop	{r4, r5, pc}
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d3f3      	bcc.n	8008a64 <__mcmp+0x18>
 8008a7c:	e7fb      	b.n	8008a76 <__mcmp+0x2a>
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7f9      	b.n	8008a76 <__mcmp+0x2a>
	...

08008a84 <__mdiff>:
 8008a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	4689      	mov	r9, r1
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4648      	mov	r0, r9
 8008a90:	4614      	mov	r4, r2
 8008a92:	f7ff ffdb 	bl	8008a4c <__mcmp>
 8008a96:	1e05      	subs	r5, r0, #0
 8008a98:	d112      	bne.n	8008ac0 <__mdiff+0x3c>
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7ff fd63 	bl	8008568 <_Balloc>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	b928      	cbnz	r0, 8008ab2 <__mdiff+0x2e>
 8008aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba4 <__mdiff+0x120>)
 8008aa8:	f240 2137 	movw	r1, #567	@ 0x237
 8008aac:	483e      	ldr	r0, [pc, #248]	@ (8008ba8 <__mdiff+0x124>)
 8008aae:	f000 fb03 	bl	80090b8 <__assert_func>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ab8:	4610      	mov	r0, r2
 8008aba:	b003      	add	sp, #12
 8008abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac0:	bfbc      	itt	lt
 8008ac2:	464b      	movlt	r3, r9
 8008ac4:	46a1      	movlt	r9, r4
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008acc:	bfba      	itte	lt
 8008ace:	461c      	movlt	r4, r3
 8008ad0:	2501      	movlt	r5, #1
 8008ad2:	2500      	movge	r5, #0
 8008ad4:	f7ff fd48 	bl	8008568 <_Balloc>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	b918      	cbnz	r0, 8008ae4 <__mdiff+0x60>
 8008adc:	4b31      	ldr	r3, [pc, #196]	@ (8008ba4 <__mdiff+0x120>)
 8008ade:	f240 2145 	movw	r1, #581	@ 0x245
 8008ae2:	e7e3      	b.n	8008aac <__mdiff+0x28>
 8008ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ae8:	6926      	ldr	r6, [r4, #16]
 8008aea:	60c5      	str	r5, [r0, #12]
 8008aec:	f109 0310 	add.w	r3, r9, #16
 8008af0:	f109 0514 	add.w	r5, r9, #20
 8008af4:	f104 0e14 	add.w	lr, r4, #20
 8008af8:	f100 0b14 	add.w	fp, r0, #20
 8008afc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	46d9      	mov	r9, fp
 8008b08:	f04f 0c00 	mov.w	ip, #0
 8008b0c:	9b01      	ldr	r3, [sp, #4]
 8008b0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b16:	9301      	str	r3, [sp, #4]
 8008b18:	fa1f f38a 	uxth.w	r3, sl
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	b283      	uxth	r3, r0
 8008b20:	1acb      	subs	r3, r1, r3
 8008b22:	0c00      	lsrs	r0, r0, #16
 8008b24:	4463      	add	r3, ip
 8008b26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b34:	4576      	cmp	r6, lr
 8008b36:	f849 3b04 	str.w	r3, [r9], #4
 8008b3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b3e:	d8e5      	bhi.n	8008b0c <__mdiff+0x88>
 8008b40:	1b33      	subs	r3, r6, r4
 8008b42:	3b15      	subs	r3, #21
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3415      	adds	r4, #21
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	42a6      	cmp	r6, r4
 8008b4e:	bf38      	it	cc
 8008b50:	2304      	movcc	r3, #4
 8008b52:	441d      	add	r5, r3
 8008b54:	445b      	add	r3, fp
 8008b56:	461e      	mov	r6, r3
 8008b58:	462c      	mov	r4, r5
 8008b5a:	4544      	cmp	r4, r8
 8008b5c:	d30e      	bcc.n	8008b7c <__mdiff+0xf8>
 8008b5e:	f108 0103 	add.w	r1, r8, #3
 8008b62:	1b49      	subs	r1, r1, r5
 8008b64:	f021 0103 	bic.w	r1, r1, #3
 8008b68:	3d03      	subs	r5, #3
 8008b6a:	45a8      	cmp	r8, r5
 8008b6c:	bf38      	it	cc
 8008b6e:	2100      	movcc	r1, #0
 8008b70:	440b      	add	r3, r1
 8008b72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b76:	b191      	cbz	r1, 8008b9e <__mdiff+0x11a>
 8008b78:	6117      	str	r7, [r2, #16]
 8008b7a:	e79d      	b.n	8008ab8 <__mdiff+0x34>
 8008b7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b80:	46e6      	mov	lr, ip
 8008b82:	0c08      	lsrs	r0, r1, #16
 8008b84:	fa1c fc81 	uxtah	ip, ip, r1
 8008b88:	4471      	add	r1, lr
 8008b8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b8e:	b289      	uxth	r1, r1
 8008b90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b94:	f846 1b04 	str.w	r1, [r6], #4
 8008b98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b9c:	e7dd      	b.n	8008b5a <__mdiff+0xd6>
 8008b9e:	3f01      	subs	r7, #1
 8008ba0:	e7e7      	b.n	8008b72 <__mdiff+0xee>
 8008ba2:	bf00      	nop
 8008ba4:	08009bbc 	.word	0x08009bbc
 8008ba8:	08009bcd 	.word	0x08009bcd

08008bac <__d2b>:
 8008bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bb0:	460f      	mov	r7, r1
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	ec59 8b10 	vmov	r8, r9, d0
 8008bb8:	4616      	mov	r6, r2
 8008bba:	f7ff fcd5 	bl	8008568 <_Balloc>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	b930      	cbnz	r0, 8008bd0 <__d2b+0x24>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	4b23      	ldr	r3, [pc, #140]	@ (8008c54 <__d2b+0xa8>)
 8008bc6:	4824      	ldr	r0, [pc, #144]	@ (8008c58 <__d2b+0xac>)
 8008bc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bcc:	f000 fa74 	bl	80090b8 <__assert_func>
 8008bd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bd8:	b10d      	cbz	r5, 8008bde <__d2b+0x32>
 8008bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bde:	9301      	str	r3, [sp, #4]
 8008be0:	f1b8 0300 	subs.w	r3, r8, #0
 8008be4:	d023      	beq.n	8008c2e <__d2b+0x82>
 8008be6:	4668      	mov	r0, sp
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	f7ff fd84 	bl	80086f6 <__lo0bits>
 8008bee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bf2:	b1d0      	cbz	r0, 8008c2a <__d2b+0x7e>
 8008bf4:	f1c0 0320 	rsb	r3, r0, #32
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	40c2      	lsrs	r2, r0
 8008c00:	6163      	str	r3, [r4, #20]
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9b01      	ldr	r3, [sp, #4]
 8008c06:	61a3      	str	r3, [r4, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bf0c      	ite	eq
 8008c0c:	2201      	moveq	r2, #1
 8008c0e:	2202      	movne	r2, #2
 8008c10:	6122      	str	r2, [r4, #16]
 8008c12:	b1a5      	cbz	r5, 8008c3e <__d2b+0x92>
 8008c14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c18:	4405      	add	r5, r0
 8008c1a:	603d      	str	r5, [r7, #0]
 8008c1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c20:	6030      	str	r0, [r6, #0]
 8008c22:	4620      	mov	r0, r4
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	6161      	str	r1, [r4, #20]
 8008c2c:	e7ea      	b.n	8008c04 <__d2b+0x58>
 8008c2e:	a801      	add	r0, sp, #4
 8008c30:	f7ff fd61 	bl	80086f6 <__lo0bits>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	6163      	str	r3, [r4, #20]
 8008c38:	3020      	adds	r0, #32
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	e7e8      	b.n	8008c10 <__d2b+0x64>
 8008c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c46:	6038      	str	r0, [r7, #0]
 8008c48:	6918      	ldr	r0, [r3, #16]
 8008c4a:	f7ff fd35 	bl	80086b8 <__hi0bits>
 8008c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c52:	e7e5      	b.n	8008c20 <__d2b+0x74>
 8008c54:	08009bbc 	.word	0x08009bbc
 8008c58:	08009bcd 	.word	0x08009bcd

08008c5c <__ssputs_r>:
 8008c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c60:	688e      	ldr	r6, [r1, #8]
 8008c62:	461f      	mov	r7, r3
 8008c64:	42be      	cmp	r6, r7
 8008c66:	680b      	ldr	r3, [r1, #0]
 8008c68:	4682      	mov	sl, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	4690      	mov	r8, r2
 8008c6e:	d82d      	bhi.n	8008ccc <__ssputs_r+0x70>
 8008c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c78:	d026      	beq.n	8008cc8 <__ssputs_r+0x6c>
 8008c7a:	6965      	ldr	r5, [r4, #20]
 8008c7c:	6909      	ldr	r1, [r1, #16]
 8008c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c82:	eba3 0901 	sub.w	r9, r3, r1
 8008c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c8a:	1c7b      	adds	r3, r7, #1
 8008c8c:	444b      	add	r3, r9
 8008c8e:	106d      	asrs	r5, r5, #1
 8008c90:	429d      	cmp	r5, r3
 8008c92:	bf38      	it	cc
 8008c94:	461d      	movcc	r5, r3
 8008c96:	0553      	lsls	r3, r2, #21
 8008c98:	d527      	bpl.n	8008cea <__ssputs_r+0x8e>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	f7ff fbd8 	bl	8008450 <_malloc_r>
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	b360      	cbz	r0, 8008cfe <__ssputs_r+0xa2>
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	f7fe fcf5 	bl	8007696 <memcpy>
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	6126      	str	r6, [r4, #16]
 8008cba:	6165      	str	r5, [r4, #20]
 8008cbc:	444e      	add	r6, r9
 8008cbe:	eba5 0509 	sub.w	r5, r5, r9
 8008cc2:	6026      	str	r6, [r4, #0]
 8008cc4:	60a5      	str	r5, [r4, #8]
 8008cc6:	463e      	mov	r6, r7
 8008cc8:	42be      	cmp	r6, r7
 8008cca:	d900      	bls.n	8008cce <__ssputs_r+0x72>
 8008ccc:	463e      	mov	r6, r7
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	f000 f9c6 	bl	8009064 <memmove>
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	1b9b      	subs	r3, r3, r6
 8008cdc:	60a3      	str	r3, [r4, #8]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	4433      	add	r3, r6
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	462a      	mov	r2, r5
 8008cec:	f000 fa28 	bl	8009140 <_realloc_r>
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d1e0      	bne.n	8008cb8 <__ssputs_r+0x5c>
 8008cf6:	6921      	ldr	r1, [r4, #16]
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	f7ff fb35 	bl	8008368 <_free_r>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	f8ca 3000 	str.w	r3, [sl]
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	e7e9      	b.n	8008ce6 <__ssputs_r+0x8a>
	...

08008d14 <_svfiprintf_r>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	4698      	mov	r8, r3
 8008d1a:	898b      	ldrh	r3, [r1, #12]
 8008d1c:	061b      	lsls	r3, r3, #24
 8008d1e:	b09d      	sub	sp, #116	@ 0x74
 8008d20:	4607      	mov	r7, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	4614      	mov	r4, r2
 8008d26:	d510      	bpl.n	8008d4a <_svfiprintf_r+0x36>
 8008d28:	690b      	ldr	r3, [r1, #16]
 8008d2a:	b973      	cbnz	r3, 8008d4a <_svfiprintf_r+0x36>
 8008d2c:	2140      	movs	r1, #64	@ 0x40
 8008d2e:	f7ff fb8f 	bl	8008450 <_malloc_r>
 8008d32:	6028      	str	r0, [r5, #0]
 8008d34:	6128      	str	r0, [r5, #16]
 8008d36:	b930      	cbnz	r0, 8008d46 <_svfiprintf_r+0x32>
 8008d38:	230c      	movs	r3, #12
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	b01d      	add	sp, #116	@ 0x74
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	2340      	movs	r3, #64	@ 0x40
 8008d48:	616b      	str	r3, [r5, #20]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d4e:	2320      	movs	r3, #32
 8008d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d58:	2330      	movs	r3, #48	@ 0x30
 8008d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ef8 <_svfiprintf_r+0x1e4>
 8008d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d62:	f04f 0901 	mov.w	r9, #1
 8008d66:	4623      	mov	r3, r4
 8008d68:	469a      	mov	sl, r3
 8008d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d6e:	b10a      	cbz	r2, 8008d74 <_svfiprintf_r+0x60>
 8008d70:	2a25      	cmp	r2, #37	@ 0x25
 8008d72:	d1f9      	bne.n	8008d68 <_svfiprintf_r+0x54>
 8008d74:	ebba 0b04 	subs.w	fp, sl, r4
 8008d78:	d00b      	beq.n	8008d92 <_svfiprintf_r+0x7e>
 8008d7a:	465b      	mov	r3, fp
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4638      	mov	r0, r7
 8008d82:	f7ff ff6b 	bl	8008c5c <__ssputs_r>
 8008d86:	3001      	adds	r0, #1
 8008d88:	f000 80a7 	beq.w	8008eda <_svfiprintf_r+0x1c6>
 8008d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d8e:	445a      	add	r2, fp
 8008d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 809f 	beq.w	8008eda <_svfiprintf_r+0x1c6>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008da6:	f10a 0a01 	add.w	sl, sl, #1
 8008daa:	9304      	str	r3, [sp, #16]
 8008dac:	9307      	str	r3, [sp, #28]
 8008dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008db4:	4654      	mov	r4, sl
 8008db6:	2205      	movs	r2, #5
 8008db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dbc:	484e      	ldr	r0, [pc, #312]	@ (8008ef8 <_svfiprintf_r+0x1e4>)
 8008dbe:	f7f7 f9df 	bl	8000180 <memchr>
 8008dc2:	9a04      	ldr	r2, [sp, #16]
 8008dc4:	b9d8      	cbnz	r0, 8008dfe <_svfiprintf_r+0xea>
 8008dc6:	06d0      	lsls	r0, r2, #27
 8008dc8:	bf44      	itt	mi
 8008dca:	2320      	movmi	r3, #32
 8008dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd0:	0711      	lsls	r1, r2, #28
 8008dd2:	bf44      	itt	mi
 8008dd4:	232b      	movmi	r3, #43	@ 0x2b
 8008dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dda:	f89a 3000 	ldrb.w	r3, [sl]
 8008dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de0:	d015      	beq.n	8008e0e <_svfiprintf_r+0xfa>
 8008de2:	9a07      	ldr	r2, [sp, #28]
 8008de4:	4654      	mov	r4, sl
 8008de6:	2000      	movs	r0, #0
 8008de8:	f04f 0c0a 	mov.w	ip, #10
 8008dec:	4621      	mov	r1, r4
 8008dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df2:	3b30      	subs	r3, #48	@ 0x30
 8008df4:	2b09      	cmp	r3, #9
 8008df6:	d94b      	bls.n	8008e90 <_svfiprintf_r+0x17c>
 8008df8:	b1b0      	cbz	r0, 8008e28 <_svfiprintf_r+0x114>
 8008dfa:	9207      	str	r2, [sp, #28]
 8008dfc:	e014      	b.n	8008e28 <_svfiprintf_r+0x114>
 8008dfe:	eba0 0308 	sub.w	r3, r0, r8
 8008e02:	fa09 f303 	lsl.w	r3, r9, r3
 8008e06:	4313      	orrs	r3, r2
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	46a2      	mov	sl, r4
 8008e0c:	e7d2      	b.n	8008db4 <_svfiprintf_r+0xa0>
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	1d19      	adds	r1, r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	9103      	str	r1, [sp, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bfbb      	ittet	lt
 8008e1a:	425b      	neglt	r3, r3
 8008e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008e20:	9307      	strge	r3, [sp, #28]
 8008e22:	9307      	strlt	r3, [sp, #28]
 8008e24:	bfb8      	it	lt
 8008e26:	9204      	strlt	r2, [sp, #16]
 8008e28:	7823      	ldrb	r3, [r4, #0]
 8008e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e2c:	d10a      	bne.n	8008e44 <_svfiprintf_r+0x130>
 8008e2e:	7863      	ldrb	r3, [r4, #1]
 8008e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e32:	d132      	bne.n	8008e9a <_svfiprintf_r+0x186>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	9203      	str	r2, [sp, #12]
 8008e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e40:	3402      	adds	r4, #2
 8008e42:	9305      	str	r3, [sp, #20]
 8008e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f08 <_svfiprintf_r+0x1f4>
 8008e48:	7821      	ldrb	r1, [r4, #0]
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	4650      	mov	r0, sl
 8008e4e:	f7f7 f997 	bl	8000180 <memchr>
 8008e52:	b138      	cbz	r0, 8008e64 <_svfiprintf_r+0x150>
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	eba0 000a 	sub.w	r0, r0, sl
 8008e5a:	2240      	movs	r2, #64	@ 0x40
 8008e5c:	4082      	lsls	r2, r0
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	3401      	adds	r4, #1
 8008e62:	9304      	str	r3, [sp, #16]
 8008e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e68:	4824      	ldr	r0, [pc, #144]	@ (8008efc <_svfiprintf_r+0x1e8>)
 8008e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e6e:	2206      	movs	r2, #6
 8008e70:	f7f7 f986 	bl	8000180 <memchr>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d036      	beq.n	8008ee6 <_svfiprintf_r+0x1d2>
 8008e78:	4b21      	ldr	r3, [pc, #132]	@ (8008f00 <_svfiprintf_r+0x1ec>)
 8008e7a:	bb1b      	cbnz	r3, 8008ec4 <_svfiprintf_r+0x1b0>
 8008e7c:	9b03      	ldr	r3, [sp, #12]
 8008e7e:	3307      	adds	r3, #7
 8008e80:	f023 0307 	bic.w	r3, r3, #7
 8008e84:	3308      	adds	r3, #8
 8008e86:	9303      	str	r3, [sp, #12]
 8008e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8a:	4433      	add	r3, r6
 8008e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8e:	e76a      	b.n	8008d66 <_svfiprintf_r+0x52>
 8008e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e94:	460c      	mov	r4, r1
 8008e96:	2001      	movs	r0, #1
 8008e98:	e7a8      	b.n	8008dec <_svfiprintf_r+0xd8>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	3401      	adds	r4, #1
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f04f 0c0a 	mov.w	ip, #10
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eac:	3a30      	subs	r2, #48	@ 0x30
 8008eae:	2a09      	cmp	r2, #9
 8008eb0:	d903      	bls.n	8008eba <_svfiprintf_r+0x1a6>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0c6      	beq.n	8008e44 <_svfiprintf_r+0x130>
 8008eb6:	9105      	str	r1, [sp, #20]
 8008eb8:	e7c4      	b.n	8008e44 <_svfiprintf_r+0x130>
 8008eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e7f0      	b.n	8008ea6 <_svfiprintf_r+0x192>
 8008ec4:	ab03      	add	r3, sp, #12
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4b0e      	ldr	r3, [pc, #56]	@ (8008f04 <_svfiprintf_r+0x1f0>)
 8008ecc:	a904      	add	r1, sp, #16
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f7fd fe6a 	bl	8006ba8 <_printf_float>
 8008ed4:	1c42      	adds	r2, r0, #1
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	d1d6      	bne.n	8008e88 <_svfiprintf_r+0x174>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	065b      	lsls	r3, r3, #25
 8008ede:	f53f af2d 	bmi.w	8008d3c <_svfiprintf_r+0x28>
 8008ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ee4:	e72c      	b.n	8008d40 <_svfiprintf_r+0x2c>
 8008ee6:	ab03      	add	r3, sp, #12
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	462a      	mov	r2, r5
 8008eec:	4b05      	ldr	r3, [pc, #20]	@ (8008f04 <_svfiprintf_r+0x1f0>)
 8008eee:	a904      	add	r1, sp, #16
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7fe f8f1 	bl	80070d8 <_printf_i>
 8008ef6:	e7ed      	b.n	8008ed4 <_svfiprintf_r+0x1c0>
 8008ef8:	08009c26 	.word	0x08009c26
 8008efc:	08009c30 	.word	0x08009c30
 8008f00:	08006ba9 	.word	0x08006ba9
 8008f04:	08008c5d 	.word	0x08008c5d
 8008f08:	08009c2c 	.word	0x08009c2c

08008f0c <__sflush_r>:
 8008f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	0716      	lsls	r6, r2, #28
 8008f16:	4605      	mov	r5, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	d454      	bmi.n	8008fc6 <__sflush_r+0xba>
 8008f1c:	684b      	ldr	r3, [r1, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dc02      	bgt.n	8008f28 <__sflush_r+0x1c>
 8008f22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dd48      	ble.n	8008fba <__sflush_r+0xae>
 8008f28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d045      	beq.n	8008fba <__sflush_r+0xae>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f34:	682f      	ldr	r7, [r5, #0]
 8008f36:	6a21      	ldr	r1, [r4, #32]
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	d030      	beq.n	8008f9e <__sflush_r+0x92>
 8008f3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	0759      	lsls	r1, r3, #29
 8008f42:	d505      	bpl.n	8008f50 <__sflush_r+0x44>
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f4a:	b10b      	cbz	r3, 8008f50 <__sflush_r+0x44>
 8008f4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	2300      	movs	r3, #0
 8008f52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f54:	6a21      	ldr	r1, [r4, #32]
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b0      	blx	r6
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	d106      	bne.n	8008f6e <__sflush_r+0x62>
 8008f60:	6829      	ldr	r1, [r5, #0]
 8008f62:	291d      	cmp	r1, #29
 8008f64:	d82b      	bhi.n	8008fbe <__sflush_r+0xb2>
 8008f66:	4a2a      	ldr	r2, [pc, #168]	@ (8009010 <__sflush_r+0x104>)
 8008f68:	40ca      	lsrs	r2, r1
 8008f6a:	07d6      	lsls	r6, r2, #31
 8008f6c:	d527      	bpl.n	8008fbe <__sflush_r+0xb2>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	6062      	str	r2, [r4, #4]
 8008f72:	04d9      	lsls	r1, r3, #19
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	d504      	bpl.n	8008f84 <__sflush_r+0x78>
 8008f7a:	1c42      	adds	r2, r0, #1
 8008f7c:	d101      	bne.n	8008f82 <__sflush_r+0x76>
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	b903      	cbnz	r3, 8008f84 <__sflush_r+0x78>
 8008f82:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	b1b9      	cbz	r1, 8008fba <__sflush_r+0xae>
 8008f8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	d002      	beq.n	8008f98 <__sflush_r+0x8c>
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7ff f9e8 	bl	8008368 <_free_r>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f9c:	e00d      	b.n	8008fba <__sflush_r+0xae>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	1c50      	adds	r0, r2, #1
 8008fa8:	d1c9      	bne.n	8008f3e <__sflush_r+0x32>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0c6      	beq.n	8008f3e <__sflush_r+0x32>
 8008fb0:	2b1d      	cmp	r3, #29
 8008fb2:	d001      	beq.n	8008fb8 <__sflush_r+0xac>
 8008fb4:	2b16      	cmp	r3, #22
 8008fb6:	d11e      	bne.n	8008ff6 <__sflush_r+0xea>
 8008fb8:	602f      	str	r7, [r5, #0]
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e022      	b.n	8009004 <__sflush_r+0xf8>
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	e01b      	b.n	8008ffe <__sflush_r+0xf2>
 8008fc6:	690f      	ldr	r7, [r1, #16]
 8008fc8:	2f00      	cmp	r7, #0
 8008fca:	d0f6      	beq.n	8008fba <__sflush_r+0xae>
 8008fcc:	0793      	lsls	r3, r2, #30
 8008fce:	680e      	ldr	r6, [r1, #0]
 8008fd0:	bf08      	it	eq
 8008fd2:	694b      	ldreq	r3, [r1, #20]
 8008fd4:	600f      	str	r7, [r1, #0]
 8008fd6:	bf18      	it	ne
 8008fd8:	2300      	movne	r3, #0
 8008fda:	eba6 0807 	sub.w	r8, r6, r7
 8008fde:	608b      	str	r3, [r1, #8]
 8008fe0:	f1b8 0f00 	cmp.w	r8, #0
 8008fe4:	dde9      	ble.n	8008fba <__sflush_r+0xae>
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fea:	4643      	mov	r3, r8
 8008fec:	463a      	mov	r2, r7
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b0      	blx	r6
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	dc08      	bgt.n	8009008 <__sflush_r+0xfc>
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009008:	4407      	add	r7, r0
 800900a:	eba8 0800 	sub.w	r8, r8, r0
 800900e:	e7e7      	b.n	8008fe0 <__sflush_r+0xd4>
 8009010:	20400001 	.word	0x20400001

08009014 <_fflush_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	690b      	ldr	r3, [r1, #16]
 8009018:	4605      	mov	r5, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b913      	cbnz	r3, 8009024 <_fflush_r+0x10>
 800901e:	2500      	movs	r5, #0
 8009020:	4628      	mov	r0, r5
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	b118      	cbz	r0, 800902e <_fflush_r+0x1a>
 8009026:	6a03      	ldr	r3, [r0, #32]
 8009028:	b90b      	cbnz	r3, 800902e <_fflush_r+0x1a>
 800902a:	f7fe f9ff 	bl	800742c <__sinit>
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f3      	beq.n	800901e <_fflush_r+0xa>
 8009036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009038:	07d0      	lsls	r0, r2, #31
 800903a:	d404      	bmi.n	8009046 <_fflush_r+0x32>
 800903c:	0599      	lsls	r1, r3, #22
 800903e:	d402      	bmi.n	8009046 <_fflush_r+0x32>
 8009040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009042:	f7fe fb26 	bl	8007692 <__retarget_lock_acquire_recursive>
 8009046:	4628      	mov	r0, r5
 8009048:	4621      	mov	r1, r4
 800904a:	f7ff ff5f 	bl	8008f0c <__sflush_r>
 800904e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009050:	07da      	lsls	r2, r3, #31
 8009052:	4605      	mov	r5, r0
 8009054:	d4e4      	bmi.n	8009020 <_fflush_r+0xc>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	d4e1      	bmi.n	8009020 <_fflush_r+0xc>
 800905c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800905e:	f7fe fb19 	bl	8007694 <__retarget_lock_release_recursive>
 8009062:	e7dd      	b.n	8009020 <_fflush_r+0xc>

08009064 <memmove>:
 8009064:	4288      	cmp	r0, r1
 8009066:	b510      	push	{r4, lr}
 8009068:	eb01 0402 	add.w	r4, r1, r2
 800906c:	d902      	bls.n	8009074 <memmove+0x10>
 800906e:	4284      	cmp	r4, r0
 8009070:	4623      	mov	r3, r4
 8009072:	d807      	bhi.n	8009084 <memmove+0x20>
 8009074:	1e43      	subs	r3, r0, #1
 8009076:	42a1      	cmp	r1, r4
 8009078:	d008      	beq.n	800908c <memmove+0x28>
 800907a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800907e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009082:	e7f8      	b.n	8009076 <memmove+0x12>
 8009084:	4402      	add	r2, r0
 8009086:	4601      	mov	r1, r0
 8009088:	428a      	cmp	r2, r1
 800908a:	d100      	bne.n	800908e <memmove+0x2a>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009096:	e7f7      	b.n	8009088 <memmove+0x24>

08009098 <_sbrk_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d06      	ldr	r5, [pc, #24]	@ (80090b4 <_sbrk_r+0x1c>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	f7f8 ff64 	bl	8001f70 <_sbrk>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_sbrk_r+0x1a>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_sbrk_r+0x1a>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	20000858 	.word	0x20000858

080090b8 <__assert_func>:
 80090b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ba:	4614      	mov	r4, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <__assert_func+0x2c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4605      	mov	r5, r0
 80090c4:	68d8      	ldr	r0, [r3, #12]
 80090c6:	b14c      	cbz	r4, 80090dc <__assert_func+0x24>
 80090c8:	4b07      	ldr	r3, [pc, #28]	@ (80090e8 <__assert_func+0x30>)
 80090ca:	9100      	str	r1, [sp, #0]
 80090cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090d0:	4906      	ldr	r1, [pc, #24]	@ (80090ec <__assert_func+0x34>)
 80090d2:	462b      	mov	r3, r5
 80090d4:	f000 f870 	bl	80091b8 <fiprintf>
 80090d8:	f000 f880 	bl	80091dc <abort>
 80090dc:	4b04      	ldr	r3, [pc, #16]	@ (80090f0 <__assert_func+0x38>)
 80090de:	461c      	mov	r4, r3
 80090e0:	e7f3      	b.n	80090ca <__assert_func+0x12>
 80090e2:	bf00      	nop
 80090e4:	200000b4 	.word	0x200000b4
 80090e8:	08009c41 	.word	0x08009c41
 80090ec:	08009c4e 	.word	0x08009c4e
 80090f0:	08009c7c 	.word	0x08009c7c

080090f4 <_calloc_r>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	fba1 5402 	umull	r5, r4, r1, r2
 80090fa:	b934      	cbnz	r4, 800910a <_calloc_r+0x16>
 80090fc:	4629      	mov	r1, r5
 80090fe:	f7ff f9a7 	bl	8008450 <_malloc_r>
 8009102:	4606      	mov	r6, r0
 8009104:	b928      	cbnz	r0, 8009112 <_calloc_r+0x1e>
 8009106:	4630      	mov	r0, r6
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	220c      	movs	r2, #12
 800910c:	6002      	str	r2, [r0, #0]
 800910e:	2600      	movs	r6, #0
 8009110:	e7f9      	b.n	8009106 <_calloc_r+0x12>
 8009112:	462a      	mov	r2, r5
 8009114:	4621      	mov	r1, r4
 8009116:	f7fe fa3f 	bl	8007598 <memset>
 800911a:	e7f4      	b.n	8009106 <_calloc_r+0x12>

0800911c <__ascii_mbtowc>:
 800911c:	b082      	sub	sp, #8
 800911e:	b901      	cbnz	r1, 8009122 <__ascii_mbtowc+0x6>
 8009120:	a901      	add	r1, sp, #4
 8009122:	b142      	cbz	r2, 8009136 <__ascii_mbtowc+0x1a>
 8009124:	b14b      	cbz	r3, 800913a <__ascii_mbtowc+0x1e>
 8009126:	7813      	ldrb	r3, [r2, #0]
 8009128:	600b      	str	r3, [r1, #0]
 800912a:	7812      	ldrb	r2, [r2, #0]
 800912c:	1e10      	subs	r0, r2, #0
 800912e:	bf18      	it	ne
 8009130:	2001      	movne	r0, #1
 8009132:	b002      	add	sp, #8
 8009134:	4770      	bx	lr
 8009136:	4610      	mov	r0, r2
 8009138:	e7fb      	b.n	8009132 <__ascii_mbtowc+0x16>
 800913a:	f06f 0001 	mvn.w	r0, #1
 800913e:	e7f8      	b.n	8009132 <__ascii_mbtowc+0x16>

08009140 <_realloc_r>:
 8009140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009144:	4607      	mov	r7, r0
 8009146:	4614      	mov	r4, r2
 8009148:	460d      	mov	r5, r1
 800914a:	b921      	cbnz	r1, 8009156 <_realloc_r+0x16>
 800914c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009150:	4611      	mov	r1, r2
 8009152:	f7ff b97d 	b.w	8008450 <_malloc_r>
 8009156:	b92a      	cbnz	r2, 8009164 <_realloc_r+0x24>
 8009158:	f7ff f906 	bl	8008368 <_free_r>
 800915c:	4625      	mov	r5, r4
 800915e:	4628      	mov	r0, r5
 8009160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009164:	f000 f841 	bl	80091ea <_malloc_usable_size_r>
 8009168:	4284      	cmp	r4, r0
 800916a:	4606      	mov	r6, r0
 800916c:	d802      	bhi.n	8009174 <_realloc_r+0x34>
 800916e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009172:	d8f4      	bhi.n	800915e <_realloc_r+0x1e>
 8009174:	4621      	mov	r1, r4
 8009176:	4638      	mov	r0, r7
 8009178:	f7ff f96a 	bl	8008450 <_malloc_r>
 800917c:	4680      	mov	r8, r0
 800917e:	b908      	cbnz	r0, 8009184 <_realloc_r+0x44>
 8009180:	4645      	mov	r5, r8
 8009182:	e7ec      	b.n	800915e <_realloc_r+0x1e>
 8009184:	42b4      	cmp	r4, r6
 8009186:	4622      	mov	r2, r4
 8009188:	4629      	mov	r1, r5
 800918a:	bf28      	it	cs
 800918c:	4632      	movcs	r2, r6
 800918e:	f7fe fa82 	bl	8007696 <memcpy>
 8009192:	4629      	mov	r1, r5
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff f8e7 	bl	8008368 <_free_r>
 800919a:	e7f1      	b.n	8009180 <_realloc_r+0x40>

0800919c <__ascii_wctomb>:
 800919c:	4603      	mov	r3, r0
 800919e:	4608      	mov	r0, r1
 80091a0:	b141      	cbz	r1, 80091b4 <__ascii_wctomb+0x18>
 80091a2:	2aff      	cmp	r2, #255	@ 0xff
 80091a4:	d904      	bls.n	80091b0 <__ascii_wctomb+0x14>
 80091a6:	228a      	movs	r2, #138	@ 0x8a
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	f04f 30ff 	mov.w	r0, #4294967295
 80091ae:	4770      	bx	lr
 80091b0:	700a      	strb	r2, [r1, #0]
 80091b2:	2001      	movs	r0, #1
 80091b4:	4770      	bx	lr
	...

080091b8 <fiprintf>:
 80091b8:	b40e      	push	{r1, r2, r3}
 80091ba:	b503      	push	{r0, r1, lr}
 80091bc:	4601      	mov	r1, r0
 80091be:	ab03      	add	r3, sp, #12
 80091c0:	4805      	ldr	r0, [pc, #20]	@ (80091d8 <fiprintf+0x20>)
 80091c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c6:	6800      	ldr	r0, [r0, #0]
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	f000 f83f 	bl	800924c <_vfiprintf_r>
 80091ce:	b002      	add	sp, #8
 80091d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d4:	b003      	add	sp, #12
 80091d6:	4770      	bx	lr
 80091d8:	200000b4 	.word	0x200000b4

080091dc <abort>:
 80091dc:	b508      	push	{r3, lr}
 80091de:	2006      	movs	r0, #6
 80091e0:	f000 fa08 	bl	80095f4 <raise>
 80091e4:	2001      	movs	r0, #1
 80091e6:	f7f8 fe4b 	bl	8001e80 <_exit>

080091ea <_malloc_usable_size_r>:
 80091ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ee:	1f18      	subs	r0, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfbc      	itt	lt
 80091f4:	580b      	ldrlt	r3, [r1, r0]
 80091f6:	18c0      	addlt	r0, r0, r3
 80091f8:	4770      	bx	lr

080091fa <__sfputc_r>:
 80091fa:	6893      	ldr	r3, [r2, #8]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	b410      	push	{r4}
 8009202:	6093      	str	r3, [r2, #8]
 8009204:	da08      	bge.n	8009218 <__sfputc_r+0x1e>
 8009206:	6994      	ldr	r4, [r2, #24]
 8009208:	42a3      	cmp	r3, r4
 800920a:	db01      	blt.n	8009210 <__sfputc_r+0x16>
 800920c:	290a      	cmp	r1, #10
 800920e:	d103      	bne.n	8009218 <__sfputc_r+0x1e>
 8009210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009214:	f000 b932 	b.w	800947c <__swbuf_r>
 8009218:	6813      	ldr	r3, [r2, #0]
 800921a:	1c58      	adds	r0, r3, #1
 800921c:	6010      	str	r0, [r2, #0]
 800921e:	7019      	strb	r1, [r3, #0]
 8009220:	4608      	mov	r0, r1
 8009222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009226:	4770      	bx	lr

08009228 <__sfputs_r>:
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922a:	4606      	mov	r6, r0
 800922c:	460f      	mov	r7, r1
 800922e:	4614      	mov	r4, r2
 8009230:	18d5      	adds	r5, r2, r3
 8009232:	42ac      	cmp	r4, r5
 8009234:	d101      	bne.n	800923a <__sfputs_r+0x12>
 8009236:	2000      	movs	r0, #0
 8009238:	e007      	b.n	800924a <__sfputs_r+0x22>
 800923a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800923e:	463a      	mov	r2, r7
 8009240:	4630      	mov	r0, r6
 8009242:	f7ff ffda 	bl	80091fa <__sfputc_r>
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	d1f3      	bne.n	8009232 <__sfputs_r+0xa>
 800924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800924c <_vfiprintf_r>:
 800924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009250:	460d      	mov	r5, r1
 8009252:	b09d      	sub	sp, #116	@ 0x74
 8009254:	4614      	mov	r4, r2
 8009256:	4698      	mov	r8, r3
 8009258:	4606      	mov	r6, r0
 800925a:	b118      	cbz	r0, 8009264 <_vfiprintf_r+0x18>
 800925c:	6a03      	ldr	r3, [r0, #32]
 800925e:	b90b      	cbnz	r3, 8009264 <_vfiprintf_r+0x18>
 8009260:	f7fe f8e4 	bl	800742c <__sinit>
 8009264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009266:	07d9      	lsls	r1, r3, #31
 8009268:	d405      	bmi.n	8009276 <_vfiprintf_r+0x2a>
 800926a:	89ab      	ldrh	r3, [r5, #12]
 800926c:	059a      	lsls	r2, r3, #22
 800926e:	d402      	bmi.n	8009276 <_vfiprintf_r+0x2a>
 8009270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009272:	f7fe fa0e 	bl	8007692 <__retarget_lock_acquire_recursive>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	071b      	lsls	r3, r3, #28
 800927a:	d501      	bpl.n	8009280 <_vfiprintf_r+0x34>
 800927c:	692b      	ldr	r3, [r5, #16]
 800927e:	b99b      	cbnz	r3, 80092a8 <_vfiprintf_r+0x5c>
 8009280:	4629      	mov	r1, r5
 8009282:	4630      	mov	r0, r6
 8009284:	f000 f938 	bl	80094f8 <__swsetup_r>
 8009288:	b170      	cbz	r0, 80092a8 <_vfiprintf_r+0x5c>
 800928a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800928c:	07dc      	lsls	r4, r3, #31
 800928e:	d504      	bpl.n	800929a <_vfiprintf_r+0x4e>
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	b01d      	add	sp, #116	@ 0x74
 8009296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929a:	89ab      	ldrh	r3, [r5, #12]
 800929c:	0598      	lsls	r0, r3, #22
 800929e:	d4f7      	bmi.n	8009290 <_vfiprintf_r+0x44>
 80092a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092a2:	f7fe f9f7 	bl	8007694 <__retarget_lock_release_recursive>
 80092a6:	e7f3      	b.n	8009290 <_vfiprintf_r+0x44>
 80092a8:	2300      	movs	r3, #0
 80092aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ac:	2320      	movs	r3, #32
 80092ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092b6:	2330      	movs	r3, #48	@ 0x30
 80092b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009468 <_vfiprintf_r+0x21c>
 80092bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092c0:	f04f 0901 	mov.w	r9, #1
 80092c4:	4623      	mov	r3, r4
 80092c6:	469a      	mov	sl, r3
 80092c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092cc:	b10a      	cbz	r2, 80092d2 <_vfiprintf_r+0x86>
 80092ce:	2a25      	cmp	r2, #37	@ 0x25
 80092d0:	d1f9      	bne.n	80092c6 <_vfiprintf_r+0x7a>
 80092d2:	ebba 0b04 	subs.w	fp, sl, r4
 80092d6:	d00b      	beq.n	80092f0 <_vfiprintf_r+0xa4>
 80092d8:	465b      	mov	r3, fp
 80092da:	4622      	mov	r2, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	4630      	mov	r0, r6
 80092e0:	f7ff ffa2 	bl	8009228 <__sfputs_r>
 80092e4:	3001      	adds	r0, #1
 80092e6:	f000 80a7 	beq.w	8009438 <_vfiprintf_r+0x1ec>
 80092ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092ec:	445a      	add	r2, fp
 80092ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80092f0:	f89a 3000 	ldrb.w	r3, [sl]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 809f 	beq.w	8009438 <_vfiprintf_r+0x1ec>
 80092fa:	2300      	movs	r3, #0
 80092fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009304:	f10a 0a01 	add.w	sl, sl, #1
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009310:	931a      	str	r3, [sp, #104]	@ 0x68
 8009312:	4654      	mov	r4, sl
 8009314:	2205      	movs	r2, #5
 8009316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931a:	4853      	ldr	r0, [pc, #332]	@ (8009468 <_vfiprintf_r+0x21c>)
 800931c:	f7f6 ff30 	bl	8000180 <memchr>
 8009320:	9a04      	ldr	r2, [sp, #16]
 8009322:	b9d8      	cbnz	r0, 800935c <_vfiprintf_r+0x110>
 8009324:	06d1      	lsls	r1, r2, #27
 8009326:	bf44      	itt	mi
 8009328:	2320      	movmi	r3, #32
 800932a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800932e:	0713      	lsls	r3, r2, #28
 8009330:	bf44      	itt	mi
 8009332:	232b      	movmi	r3, #43	@ 0x2b
 8009334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009338:	f89a 3000 	ldrb.w	r3, [sl]
 800933c:	2b2a      	cmp	r3, #42	@ 0x2a
 800933e:	d015      	beq.n	800936c <_vfiprintf_r+0x120>
 8009340:	9a07      	ldr	r2, [sp, #28]
 8009342:	4654      	mov	r4, sl
 8009344:	2000      	movs	r0, #0
 8009346:	f04f 0c0a 	mov.w	ip, #10
 800934a:	4621      	mov	r1, r4
 800934c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009350:	3b30      	subs	r3, #48	@ 0x30
 8009352:	2b09      	cmp	r3, #9
 8009354:	d94b      	bls.n	80093ee <_vfiprintf_r+0x1a2>
 8009356:	b1b0      	cbz	r0, 8009386 <_vfiprintf_r+0x13a>
 8009358:	9207      	str	r2, [sp, #28]
 800935a:	e014      	b.n	8009386 <_vfiprintf_r+0x13a>
 800935c:	eba0 0308 	sub.w	r3, r0, r8
 8009360:	fa09 f303 	lsl.w	r3, r9, r3
 8009364:	4313      	orrs	r3, r2
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	46a2      	mov	sl, r4
 800936a:	e7d2      	b.n	8009312 <_vfiprintf_r+0xc6>
 800936c:	9b03      	ldr	r3, [sp, #12]
 800936e:	1d19      	adds	r1, r3, #4
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	9103      	str	r1, [sp, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	bfbb      	ittet	lt
 8009378:	425b      	neglt	r3, r3
 800937a:	f042 0202 	orrlt.w	r2, r2, #2
 800937e:	9307      	strge	r3, [sp, #28]
 8009380:	9307      	strlt	r3, [sp, #28]
 8009382:	bfb8      	it	lt
 8009384:	9204      	strlt	r2, [sp, #16]
 8009386:	7823      	ldrb	r3, [r4, #0]
 8009388:	2b2e      	cmp	r3, #46	@ 0x2e
 800938a:	d10a      	bne.n	80093a2 <_vfiprintf_r+0x156>
 800938c:	7863      	ldrb	r3, [r4, #1]
 800938e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009390:	d132      	bne.n	80093f8 <_vfiprintf_r+0x1ac>
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	1d1a      	adds	r2, r3, #4
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	9203      	str	r2, [sp, #12]
 800939a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800939e:	3402      	adds	r4, #2
 80093a0:	9305      	str	r3, [sp, #20]
 80093a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009478 <_vfiprintf_r+0x22c>
 80093a6:	7821      	ldrb	r1, [r4, #0]
 80093a8:	2203      	movs	r2, #3
 80093aa:	4650      	mov	r0, sl
 80093ac:	f7f6 fee8 	bl	8000180 <memchr>
 80093b0:	b138      	cbz	r0, 80093c2 <_vfiprintf_r+0x176>
 80093b2:	9b04      	ldr	r3, [sp, #16]
 80093b4:	eba0 000a 	sub.w	r0, r0, sl
 80093b8:	2240      	movs	r2, #64	@ 0x40
 80093ba:	4082      	lsls	r2, r0
 80093bc:	4313      	orrs	r3, r2
 80093be:	3401      	adds	r4, #1
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c6:	4829      	ldr	r0, [pc, #164]	@ (800946c <_vfiprintf_r+0x220>)
 80093c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093cc:	2206      	movs	r2, #6
 80093ce:	f7f6 fed7 	bl	8000180 <memchr>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d03f      	beq.n	8009456 <_vfiprintf_r+0x20a>
 80093d6:	4b26      	ldr	r3, [pc, #152]	@ (8009470 <_vfiprintf_r+0x224>)
 80093d8:	bb1b      	cbnz	r3, 8009422 <_vfiprintf_r+0x1d6>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	3307      	adds	r3, #7
 80093de:	f023 0307 	bic.w	r3, r3, #7
 80093e2:	3308      	adds	r3, #8
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e8:	443b      	add	r3, r7
 80093ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ec:	e76a      	b.n	80092c4 <_vfiprintf_r+0x78>
 80093ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80093f2:	460c      	mov	r4, r1
 80093f4:	2001      	movs	r0, #1
 80093f6:	e7a8      	b.n	800934a <_vfiprintf_r+0xfe>
 80093f8:	2300      	movs	r3, #0
 80093fa:	3401      	adds	r4, #1
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	4619      	mov	r1, r3
 8009400:	f04f 0c0a 	mov.w	ip, #10
 8009404:	4620      	mov	r0, r4
 8009406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800940a:	3a30      	subs	r2, #48	@ 0x30
 800940c:	2a09      	cmp	r2, #9
 800940e:	d903      	bls.n	8009418 <_vfiprintf_r+0x1cc>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0c6      	beq.n	80093a2 <_vfiprintf_r+0x156>
 8009414:	9105      	str	r1, [sp, #20]
 8009416:	e7c4      	b.n	80093a2 <_vfiprintf_r+0x156>
 8009418:	fb0c 2101 	mla	r1, ip, r1, r2
 800941c:	4604      	mov	r4, r0
 800941e:	2301      	movs	r3, #1
 8009420:	e7f0      	b.n	8009404 <_vfiprintf_r+0x1b8>
 8009422:	ab03      	add	r3, sp, #12
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	462a      	mov	r2, r5
 8009428:	4b12      	ldr	r3, [pc, #72]	@ (8009474 <_vfiprintf_r+0x228>)
 800942a:	a904      	add	r1, sp, #16
 800942c:	4630      	mov	r0, r6
 800942e:	f7fd fbbb 	bl	8006ba8 <_printf_float>
 8009432:	4607      	mov	r7, r0
 8009434:	1c78      	adds	r0, r7, #1
 8009436:	d1d6      	bne.n	80093e6 <_vfiprintf_r+0x19a>
 8009438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800943a:	07d9      	lsls	r1, r3, #31
 800943c:	d405      	bmi.n	800944a <_vfiprintf_r+0x1fe>
 800943e:	89ab      	ldrh	r3, [r5, #12]
 8009440:	059a      	lsls	r2, r3, #22
 8009442:	d402      	bmi.n	800944a <_vfiprintf_r+0x1fe>
 8009444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009446:	f7fe f925 	bl	8007694 <__retarget_lock_release_recursive>
 800944a:	89ab      	ldrh	r3, [r5, #12]
 800944c:	065b      	lsls	r3, r3, #25
 800944e:	f53f af1f 	bmi.w	8009290 <_vfiprintf_r+0x44>
 8009452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009454:	e71e      	b.n	8009294 <_vfiprintf_r+0x48>
 8009456:	ab03      	add	r3, sp, #12
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	462a      	mov	r2, r5
 800945c:	4b05      	ldr	r3, [pc, #20]	@ (8009474 <_vfiprintf_r+0x228>)
 800945e:	a904      	add	r1, sp, #16
 8009460:	4630      	mov	r0, r6
 8009462:	f7fd fe39 	bl	80070d8 <_printf_i>
 8009466:	e7e4      	b.n	8009432 <_vfiprintf_r+0x1e6>
 8009468:	08009c26 	.word	0x08009c26
 800946c:	08009c30 	.word	0x08009c30
 8009470:	08006ba9 	.word	0x08006ba9
 8009474:	08009229 	.word	0x08009229
 8009478:	08009c2c 	.word	0x08009c2c

0800947c <__swbuf_r>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	460e      	mov	r6, r1
 8009480:	4614      	mov	r4, r2
 8009482:	4605      	mov	r5, r0
 8009484:	b118      	cbz	r0, 800948e <__swbuf_r+0x12>
 8009486:	6a03      	ldr	r3, [r0, #32]
 8009488:	b90b      	cbnz	r3, 800948e <__swbuf_r+0x12>
 800948a:	f7fd ffcf 	bl	800742c <__sinit>
 800948e:	69a3      	ldr	r3, [r4, #24]
 8009490:	60a3      	str	r3, [r4, #8]
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	071a      	lsls	r2, r3, #28
 8009496:	d501      	bpl.n	800949c <__swbuf_r+0x20>
 8009498:	6923      	ldr	r3, [r4, #16]
 800949a:	b943      	cbnz	r3, 80094ae <__swbuf_r+0x32>
 800949c:	4621      	mov	r1, r4
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 f82a 	bl	80094f8 <__swsetup_r>
 80094a4:	b118      	cbz	r0, 80094ae <__swbuf_r+0x32>
 80094a6:	f04f 37ff 	mov.w	r7, #4294967295
 80094aa:	4638      	mov	r0, r7
 80094ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	6922      	ldr	r2, [r4, #16]
 80094b2:	1a98      	subs	r0, r3, r2
 80094b4:	6963      	ldr	r3, [r4, #20]
 80094b6:	b2f6      	uxtb	r6, r6
 80094b8:	4283      	cmp	r3, r0
 80094ba:	4637      	mov	r7, r6
 80094bc:	dc05      	bgt.n	80094ca <__swbuf_r+0x4e>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff fda7 	bl	8009014 <_fflush_r>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d1ed      	bne.n	80094a6 <__swbuf_r+0x2a>
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	60a3      	str	r3, [r4, #8]
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	701e      	strb	r6, [r3, #0]
 80094d8:	6962      	ldr	r2, [r4, #20]
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	429a      	cmp	r2, r3
 80094de:	d004      	beq.n	80094ea <__swbuf_r+0x6e>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	07db      	lsls	r3, r3, #31
 80094e4:	d5e1      	bpl.n	80094aa <__swbuf_r+0x2e>
 80094e6:	2e0a      	cmp	r6, #10
 80094e8:	d1df      	bne.n	80094aa <__swbuf_r+0x2e>
 80094ea:	4621      	mov	r1, r4
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7ff fd91 	bl	8009014 <_fflush_r>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d0d9      	beq.n	80094aa <__swbuf_r+0x2e>
 80094f6:	e7d6      	b.n	80094a6 <__swbuf_r+0x2a>

080094f8 <__swsetup_r>:
 80094f8:	b538      	push	{r3, r4, r5, lr}
 80094fa:	4b29      	ldr	r3, [pc, #164]	@ (80095a0 <__swsetup_r+0xa8>)
 80094fc:	4605      	mov	r5, r0
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	460c      	mov	r4, r1
 8009502:	b118      	cbz	r0, 800950c <__swsetup_r+0x14>
 8009504:	6a03      	ldr	r3, [r0, #32]
 8009506:	b90b      	cbnz	r3, 800950c <__swsetup_r+0x14>
 8009508:	f7fd ff90 	bl	800742c <__sinit>
 800950c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009510:	0719      	lsls	r1, r3, #28
 8009512:	d422      	bmi.n	800955a <__swsetup_r+0x62>
 8009514:	06da      	lsls	r2, r3, #27
 8009516:	d407      	bmi.n	8009528 <__swsetup_r+0x30>
 8009518:	2209      	movs	r2, #9
 800951a:	602a      	str	r2, [r5, #0]
 800951c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	f04f 30ff 	mov.w	r0, #4294967295
 8009526:	e033      	b.n	8009590 <__swsetup_r+0x98>
 8009528:	0758      	lsls	r0, r3, #29
 800952a:	d512      	bpl.n	8009552 <__swsetup_r+0x5a>
 800952c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800952e:	b141      	cbz	r1, 8009542 <__swsetup_r+0x4a>
 8009530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009534:	4299      	cmp	r1, r3
 8009536:	d002      	beq.n	800953e <__swsetup_r+0x46>
 8009538:	4628      	mov	r0, r5
 800953a:	f7fe ff15 	bl	8008368 <_free_r>
 800953e:	2300      	movs	r3, #0
 8009540:	6363      	str	r3, [r4, #52]	@ 0x34
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	2300      	movs	r3, #0
 800954c:	6063      	str	r3, [r4, #4]
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f043 0308 	orr.w	r3, r3, #8
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	b94b      	cbnz	r3, 8009572 <__swsetup_r+0x7a>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009568:	d003      	beq.n	8009572 <__swsetup_r+0x7a>
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 f883 	bl	8009678 <__smakebuf_r>
 8009572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009576:	f013 0201 	ands.w	r2, r3, #1
 800957a:	d00a      	beq.n	8009592 <__swsetup_r+0x9a>
 800957c:	2200      	movs	r2, #0
 800957e:	60a2      	str	r2, [r4, #8]
 8009580:	6962      	ldr	r2, [r4, #20]
 8009582:	4252      	negs	r2, r2
 8009584:	61a2      	str	r2, [r4, #24]
 8009586:	6922      	ldr	r2, [r4, #16]
 8009588:	b942      	cbnz	r2, 800959c <__swsetup_r+0xa4>
 800958a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800958e:	d1c5      	bne.n	800951c <__swsetup_r+0x24>
 8009590:	bd38      	pop	{r3, r4, r5, pc}
 8009592:	0799      	lsls	r1, r3, #30
 8009594:	bf58      	it	pl
 8009596:	6962      	ldrpl	r2, [r4, #20]
 8009598:	60a2      	str	r2, [r4, #8]
 800959a:	e7f4      	b.n	8009586 <__swsetup_r+0x8e>
 800959c:	2000      	movs	r0, #0
 800959e:	e7f7      	b.n	8009590 <__swsetup_r+0x98>
 80095a0:	200000b4 	.word	0x200000b4

080095a4 <_raise_r>:
 80095a4:	291f      	cmp	r1, #31
 80095a6:	b538      	push	{r3, r4, r5, lr}
 80095a8:	4605      	mov	r5, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	d904      	bls.n	80095b8 <_raise_r+0x14>
 80095ae:	2316      	movs	r3, #22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	f04f 30ff 	mov.w	r0, #4294967295
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095ba:	b112      	cbz	r2, 80095c2 <_raise_r+0x1e>
 80095bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095c0:	b94b      	cbnz	r3, 80095d6 <_raise_r+0x32>
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f830 	bl	8009628 <_getpid_r>
 80095c8:	4622      	mov	r2, r4
 80095ca:	4601      	mov	r1, r0
 80095cc:	4628      	mov	r0, r5
 80095ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d2:	f000 b817 	b.w	8009604 <_kill_r>
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d00a      	beq.n	80095f0 <_raise_r+0x4c>
 80095da:	1c59      	adds	r1, r3, #1
 80095dc:	d103      	bne.n	80095e6 <_raise_r+0x42>
 80095de:	2316      	movs	r3, #22
 80095e0:	6003      	str	r3, [r0, #0]
 80095e2:	2001      	movs	r0, #1
 80095e4:	e7e7      	b.n	80095b6 <_raise_r+0x12>
 80095e6:	2100      	movs	r1, #0
 80095e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095ec:	4620      	mov	r0, r4
 80095ee:	4798      	blx	r3
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7e0      	b.n	80095b6 <_raise_r+0x12>

080095f4 <raise>:
 80095f4:	4b02      	ldr	r3, [pc, #8]	@ (8009600 <raise+0xc>)
 80095f6:	4601      	mov	r1, r0
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	f7ff bfd3 	b.w	80095a4 <_raise_r>
 80095fe:	bf00      	nop
 8009600:	200000b4 	.word	0x200000b4

08009604 <_kill_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	@ (8009624 <_kill_r+0x20>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f7f8 fc25 	bl	8001e60 <_kill>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d102      	bne.n	8009620 <_kill_r+0x1c>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	b103      	cbz	r3, 8009620 <_kill_r+0x1c>
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	20000858 	.word	0x20000858

08009628 <_getpid_r>:
 8009628:	f7f8 bc12 	b.w	8001e50 <_getpid>

0800962c <__swhatbuf_r>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	460c      	mov	r4, r1
 8009630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009634:	2900      	cmp	r1, #0
 8009636:	b096      	sub	sp, #88	@ 0x58
 8009638:	4615      	mov	r5, r2
 800963a:	461e      	mov	r6, r3
 800963c:	da0d      	bge.n	800965a <__swhatbuf_r+0x2e>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009644:	f04f 0100 	mov.w	r1, #0
 8009648:	bf14      	ite	ne
 800964a:	2340      	movne	r3, #64	@ 0x40
 800964c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009650:	2000      	movs	r0, #0
 8009652:	6031      	str	r1, [r6, #0]
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	b016      	add	sp, #88	@ 0x58
 8009658:	bd70      	pop	{r4, r5, r6, pc}
 800965a:	466a      	mov	r2, sp
 800965c:	f000 f848 	bl	80096f0 <_fstat_r>
 8009660:	2800      	cmp	r0, #0
 8009662:	dbec      	blt.n	800963e <__swhatbuf_r+0x12>
 8009664:	9901      	ldr	r1, [sp, #4]
 8009666:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800966a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800966e:	4259      	negs	r1, r3
 8009670:	4159      	adcs	r1, r3
 8009672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009676:	e7eb      	b.n	8009650 <__swhatbuf_r+0x24>

08009678 <__smakebuf_r>:
 8009678:	898b      	ldrh	r3, [r1, #12]
 800967a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800967c:	079d      	lsls	r5, r3, #30
 800967e:	4606      	mov	r6, r0
 8009680:	460c      	mov	r4, r1
 8009682:	d507      	bpl.n	8009694 <__smakebuf_r+0x1c>
 8009684:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	6123      	str	r3, [r4, #16]
 800968c:	2301      	movs	r3, #1
 800968e:	6163      	str	r3, [r4, #20]
 8009690:	b003      	add	sp, #12
 8009692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009694:	ab01      	add	r3, sp, #4
 8009696:	466a      	mov	r2, sp
 8009698:	f7ff ffc8 	bl	800962c <__swhatbuf_r>
 800969c:	9f00      	ldr	r7, [sp, #0]
 800969e:	4605      	mov	r5, r0
 80096a0:	4639      	mov	r1, r7
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7fe fed4 	bl	8008450 <_malloc_r>
 80096a8:	b948      	cbnz	r0, 80096be <__smakebuf_r+0x46>
 80096aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ae:	059a      	lsls	r2, r3, #22
 80096b0:	d4ee      	bmi.n	8009690 <__smakebuf_r+0x18>
 80096b2:	f023 0303 	bic.w	r3, r3, #3
 80096b6:	f043 0302 	orr.w	r3, r3, #2
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	e7e2      	b.n	8009684 <__smakebuf_r+0xc>
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	6020      	str	r0, [r4, #0]
 80096c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	9b01      	ldr	r3, [sp, #4]
 80096ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096ce:	b15b      	cbz	r3, 80096e8 <__smakebuf_r+0x70>
 80096d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 f81d 	bl	8009714 <_isatty_r>
 80096da:	b128      	cbz	r0, 80096e8 <__smakebuf_r+0x70>
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f023 0303 	bic.w	r3, r3, #3
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	81a3      	strh	r3, [r4, #12]
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	431d      	orrs	r5, r3
 80096ec:	81a5      	strh	r5, [r4, #12]
 80096ee:	e7cf      	b.n	8009690 <__smakebuf_r+0x18>

080096f0 <_fstat_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	@ (8009710 <_fstat_r+0x20>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	4611      	mov	r1, r2
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	f7f8 fc0f 	bl	8001f20 <_fstat>
 8009702:	1c43      	adds	r3, r0, #1
 8009704:	d102      	bne.n	800970c <_fstat_r+0x1c>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b103      	cbz	r3, 800970c <_fstat_r+0x1c>
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	bd38      	pop	{r3, r4, r5, pc}
 800970e:	bf00      	nop
 8009710:	20000858 	.word	0x20000858

08009714 <_isatty_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d06      	ldr	r5, [pc, #24]	@ (8009730 <_isatty_r+0x1c>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f8 fc0e 	bl	8001f40 <_isatty>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_isatty_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_isatty_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20000858 	.word	0x20000858

08009734 <_init>:
 8009734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009736:	bf00      	nop
 8009738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973a:	bc08      	pop	{r3}
 800973c:	469e      	mov	lr, r3
 800973e:	4770      	bx	lr

08009740 <_fini>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	bf00      	nop
 8009744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009746:	bc08      	pop	{r3}
 8009748:	469e      	mov	lr, r3
 800974a:	4770      	bx	lr
 800974c:	0000      	movs	r0, r0
	...

08009750 <__FLASH_Program_Fast_veneer>:
 8009750:	f85f f000 	ldr.w	pc, [pc]	@ 8009754 <__FLASH_Program_Fast_veneer+0x4>
 8009754:	20000271 	.word	0x20000271

Disassembly of section .data:

20000008 <detected_color>:
20000008:	00000009                                ....

2000000c <color_names.0>:
2000000c:	08009964 08009968 08009970 08009978     d...h...p...x...
2000001c:	08009980 08009988 08009990 0800999c     ................
2000002c:	080099a8 080099b0 080099b8 080099c0     ................

2000003c <SystemCoreClock>:
2000003c:	003d0900                                ..=.

20000040 <uwTickPrio>:
20000040:	00000010                                ....

20000044 <uwTickFreq>:
20000044:	00000001                                ....

20000048 <left>:
20000048:	48000000 00000001 48000000 00000002     ...H.......H....
20000058:	48000000 00000004 48000000 00000008     ...H.......H....
20000068:	000003e8 00000000 00000000 00000001     ................

20000078 <right>:
20000078:	48000400 00000010 48000400 00000020     ...H.......H ...
20000088:	48000400 00000040 48000400 00000080     ...H@......H....
20000098:	000003e8 00000000 00000000 000000ff     ................

200000a8 <__sglue>:
200000a8:	00000000 00000003 2000071c              ........... 

200000b4 <_impure_ptr>:
200000b4:	200000b8                                ... 

200000b8 <_impure_data>:
200000b8:	00000000 2000071c 20000784 200007ec     ....... ... ... 
	...

20000104 <__global_locale>:
20000104:	00000043 00000000 00000000 00000000     C...............
	...
20000124:	00000043 00000000 00000000 00000000     C...............
	...
20000144:	00000043 00000000 00000000 00000000     C...............
	...
20000164:	00000043 00000000 00000000 00000000     C...............
	...
20000184:	00000043 00000000 00000000 00000000     C...............
	...
200001a4:	00000043 00000000 00000000 00000000     C...............
	...
200001c4:	00000043 00000000 00000000 00000000     C...............
	...
200001e4:	0800919d 0800911d 00000000 08009d80     ................
200001f4:	08009c3f 08009c7c 08009c7c 08009c7c     ?...|...|...|...
20000204:	08009c7c 08009c7c 08009c7c 08009c7c     |...|...|...|...
20000214:	08009c7c 08009c7c ffffffff ffffffff     |...|...........
20000224:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
2000024c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000270 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000270:	b480      	push	{r7}
20000272:	b089      	sub	sp, #36	@ 0x24
20000274:	af00      	add	r7, sp, #0
20000276:	6078      	str	r0, [r7, #4]
20000278:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000027a:	2380      	movs	r3, #128	@ 0x80
2000027c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000027e:	687b      	ldr	r3, [r7, #4]
20000280:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000282:	683b      	ldr	r3, [r7, #0]
20000284:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000286:	4b18      	ldr	r3, [pc, #96]	@ (200002e8 <FLASH_Program_Fast+0x78>)
20000288:	695b      	ldr	r3, [r3, #20]
2000028a:	4a17      	ldr	r2, [pc, #92]	@ (200002e8 <FLASH_Program_Fast+0x78>)
2000028c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20000290:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000292:	f3ef 8310 	mrs	r3, PRIMASK
20000296:	60fb      	str	r3, [r7, #12]
  return(result);
20000298:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000029a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000029c:	b672      	cpsid	i
}
2000029e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200002a0:	697b      	ldr	r3, [r7, #20]
200002a2:	681a      	ldr	r2, [r3, #0]
200002a4:	69bb      	ldr	r3, [r7, #24]
200002a6:	601a      	str	r2, [r3, #0]
    dest_addr++;
200002a8:	69bb      	ldr	r3, [r7, #24]
200002aa:	3304      	adds	r3, #4
200002ac:	61bb      	str	r3, [r7, #24]
    src_addr++;
200002ae:	697b      	ldr	r3, [r7, #20]
200002b0:	3304      	adds	r3, #4
200002b2:	617b      	str	r3, [r7, #20]
    row_index--;
200002b4:	7ffb      	ldrb	r3, [r7, #31]
200002b6:	3b01      	subs	r3, #1
200002b8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
200002ba:	7ffb      	ldrb	r3, [r7, #31]
200002bc:	2b00      	cmp	r3, #0
200002be:	d1ef      	bne.n	200002a0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200002c0:	bf00      	nop
200002c2:	4b09      	ldr	r3, [pc, #36]	@ (200002e8 <FLASH_Program_Fast+0x78>)
200002c4:	691b      	ldr	r3, [r3, #16]
200002c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200002ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200002ce:	d0f8      	beq.n	200002c2 <FLASH_Program_Fast+0x52>
200002d0:	693b      	ldr	r3, [r7, #16]
200002d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002d4:	68bb      	ldr	r3, [r7, #8]
200002d6:	f383 8810 	msr	PRIMASK, r3
}
200002da:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002dc:	bf00      	nop
200002de:	3724      	adds	r7, #36	@ 0x24
200002e0:	46bd      	mov	sp, r7
200002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200002e6:	4770      	bx	lr
200002e8:	58004000 	.word	0x58004000
