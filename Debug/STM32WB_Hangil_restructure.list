
STM32WB_Hangil_restructure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f28  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08009068  08009068  0000a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800977c  0800977c  0000a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009780  08009780  0000a780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000284  20000008  08009784  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000052c  20000290  08009a08  0000b290  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200007bc  08009a08  0000b7bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cbfc  00000000  00000000  0000b2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004276  00000000  00000000  00027eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c90  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001600  00000000  00000000  0002ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022ec0  00000000  00000000  0002f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022569  00000000  00000000  00052280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d03eb  00000000  00000000  000747e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00144bd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000088e0  00000000  00000000  00144c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0014d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000290 	.word	0x20000290
 800015c:	00000000 	.word	0x00000000
 8000160:	08009044 	.word	0x08009044

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000294 	.word	0x20000294
 800017c:	08009044 	.word	0x08009044

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <ap_init>:
static void ap_task_color_calibration(void);
static void ap_task_color_detection(void);


void ap_init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	i2c_init();
 8000b5c:	f005 fa50 	bl	8006000 <i2c_init>
	uart_init();
 8000b60:	f005 fb56 	bl	8006210 <uart_init>

	led_init();
 8000b64:	f000 fc94 	bl	8001490 <led_init>
	rgb_init();
 8000b68:	f000 fcbe 	bl	80014e8 <rgb_init>
	color_init();
 8000b6c:	f000 f9ad 	bl	8000eca <color_init>
//	step_motor_init();

	HAL_TIM_Base_Start_IT(&htim16);
 8000b70:	4805      	ldr	r0, [pc, #20]	@ (8000b88 <ap_init+0x30>)
 8000b72:	f004 fae9 	bl	8005148 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <ap_init+0x34>)
 8000b78:	f004 fae6 	bl	8005148 <HAL_TIM_Base_Start_IT>

	load_color_reference_table();
 8000b7c:	f000 fb36 	bl	80011ec <load_color_reference_table>
	debug_print_color_reference_table();
 8000b80:	f000 fb68 	bl	8001254 <debug_print_color_reference_table>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000524 	.word	0x20000524
 8000b8c:	20000570 	.word	0x20000570

08000b90 <ap_main>:



void ap_main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	while(1)
	{
		if(!color_calibration && input_is_long_pressed(INPUT_MODE))
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <ap_main+0x50>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f083 0301 	eor.w	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d011      	beq.n	8000bc8 <ap_main+0x38>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fc5d 	bl	8001464 <input_is_long_pressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d00b      	beq.n	8000bc8 <ap_main+0x38>
		{
			color_calibration = true;
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <ap_main+0x50>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
			color_seq = 0;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <ap_main+0x54>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
			init_printed = false;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <ap_main+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
			uart_printf("[INFO] Entering color calibration mode...\r\n");
 8000bc2:	480a      	ldr	r0, [pc, #40]	@ (8000bec <ap_main+0x5c>)
 8000bc4:	f005 fb2e 	bl	8006224 <uart_printf>
		}

		if (color_calibration)
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <ap_main+0x50>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <ap_main+0x48>
		{
			ap_task_color_calibration();
 8000bd2:	f000 f80d 	bl	8000bf0 <ap_task_color_calibration>
 8000bd6:	e7dd      	b.n	8000b94 <ap_main+0x4>
		}
		else
		{
			ap_task_color_detection();
 8000bd8:	f000 f8a8 	bl	8000d2c <ap_task_color_detection>
		if(!color_calibration && input_is_long_pressed(INPUT_MODE))
 8000bdc:	e7da      	b.n	8000b94 <ap_main+0x4>
 8000bde:	bf00      	nop
 8000be0:	200002ac 	.word	0x200002ac
 8000be4:	200002ae 	.word	0x200002ae
 8000be8:	200002ad 	.word	0x200002ad
 8000bec:	08009068 	.word	0x08009068

08000bf0 <ap_task_color_calibration>:
}



static void ap_task_color_calibration(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af02      	add	r7, sp, #8
	if(!check_color) return;
 8000bf6:	4b43      	ldr	r3, [pc, #268]	@ (8000d04 <ap_task_color_calibration+0x114>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d17a      	bne.n	8000cfc <ap_task_color_calibration+0x10c>

	if (!init_printed)
 8000c06:	4b40      	ldr	r3, [pc, #256]	@ (8000d08 <ap_task_color_calibration+0x118>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	f083 0301 	eor.w	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00b      	beq.n	8000c2c <ap_task_color_calibration+0x3c>
	{
		uart_printf("-------------COLOR SETTING-------------\r\n");
 8000c14:	483d      	ldr	r0, [pc, #244]	@ (8000d0c <ap_task_color_calibration+0x11c>)
 8000c16:	f005 fb05 	bl	8006224 <uart_printf>
		init_printed = true;
 8000c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d08 <ap_task_color_calibration+0x118>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
		flash_erase_color_table(BH1745_ADDR_LEFT);
 8000c20:	2038      	movs	r0, #56	@ 0x38
 8000c22:	f005 fb91 	bl	8006348 <flash_erase_color_table>
		flash_erase_color_table(BH1745_ADDR_RIGHT);
 8000c26:	2039      	movs	r0, #57	@ 0x39
 8000c28:	f005 fb8e 	bl	8006348 <flash_erase_color_table>
	}

	if (input_is_short_pressed(INPUT_MODE))
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 fc03 	bl	8001438 <input_is_short_pressed>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d062      	beq.n	8000cfe <ap_task_color_calibration+0x10e>
	{
		uart_printf("color set: [%s]\r\n", color_to_string(color_seq));
 8000c38:	4b35      	ldr	r3, [pc, #212]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fabd 	bl	80011bc <color_to_string>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	4833      	ldr	r0, [pc, #204]	@ (8000d14 <ap_task_color_calibration+0x124>)
 8000c48:	f005 faec 	bl	8006224 <uart_printf>

		bh1745_color_data_t left  = bh1745_read_rgbc(BH1745_ADDR_LEFT);
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	2138      	movs	r1, #56	@ 0x38
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f96a 	bl	8000f2c <bh1745_read_rgbc>
		bh1745_color_data_t right = bh1745_read_rgbc(BH1745_ADDR_RIGHT);
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2139      	movs	r1, #57	@ 0x39
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f965 	bl	8000f2c <bh1745_read_rgbc>

		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
					left.red, left.green, left.blue, left.clear);
 8000c62:	893b      	ldrh	r3, [r7, #8]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c64:	4619      	mov	r1, r3
					left.red, left.green, left.blue, left.clear);
 8000c66:	897b      	ldrh	r3, [r7, #10]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c68:	461a      	mov	r2, r3
					left.red, left.green, left.blue, left.clear);
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c6c:	4618      	mov	r0, r3
					left.red, left.green, left.blue, left.clear);
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
		uart_printf("[LEFT]  R:%u G:%u B:%u C:%u\r\n",
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4603      	mov	r3, r0
 8000c74:	4828      	ldr	r0, [pc, #160]	@ (8000d18 <ap_task_color_calibration+0x128>)
 8000c76:	f005 fad5 	bl	8006224 <uart_printf>

		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
					right.red, right.green, right.blue, right.clear);
 8000c7a:	883b      	ldrh	r3, [r7, #0]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c7c:	4619      	mov	r1, r3
					right.red, right.green, right.blue, right.clear);
 8000c7e:	887b      	ldrh	r3, [r7, #2]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c80:	461a      	mov	r2, r3
					right.red, right.green, right.blue, right.clear);
 8000c82:	88bb      	ldrh	r3, [r7, #4]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c84:	4618      	mov	r0, r3
					right.red, right.green, right.blue, right.clear);
 8000c86:	88fb      	ldrh	r3, [r7, #6]
		uart_printf("[RIGHT] R:%u G:%u B:%u C:%u\r\n",
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <ap_task_color_calibration+0x12c>)
 8000c8e:	f005 fac9 	bl	8006224 <uart_printf>

		save_color_reference(BH1745_ADDR_LEFT,  color_seq, left.red, left.green, left.blue);
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000c94:	7819      	ldrb	r1, [r3, #0]
 8000c96:	893a      	ldrh	r2, [r7, #8]
 8000c98:	8978      	ldrh	r0, [r7, #10]
 8000c9a:	89bb      	ldrh	r3, [r7, #12]
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2038      	movs	r0, #56	@ 0x38
 8000ca2:	f000 f971 	bl	8000f88 <save_color_reference>
		save_color_reference(BH1745_ADDR_RIGHT, color_seq, right.red, right.green, right.blue);
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000ca8:	7819      	ldrb	r1, [r3, #0]
 8000caa:	883a      	ldrh	r2, [r7, #0]
 8000cac:	8878      	ldrh	r0, [r7, #2]
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2039      	movs	r0, #57	@ 0x39
 8000cb6:	f000 f967 	bl	8000f88 <save_color_reference>

		uart_printf("--------------------------------\r\n");
 8000cba:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <ap_task_color_calibration+0x130>)
 8000cbc:	f005 fab2 	bl	8006224 <uart_printf>

		if (++color_seq > COLOR_GRAY)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b0b      	cmp	r3, #11
 8000cd2:	d914      	bls.n	8000cfe <ap_task_color_calibration+0x10e>
		{
			color_calibration = false;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <ap_task_color_calibration+0x134>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
			init_printed = false;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <ap_task_color_calibration+0x118>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
			color_seq = 0;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <ap_task_color_calibration+0x120>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
			uart_printf("-------color set finished-------\r\n");
 8000ce6:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <ap_task_color_calibration+0x138>)
 8000ce8:	f005 fa9c 	bl	8006224 <uart_printf>
			uart_printf("--------------------------------\r\n");
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <ap_task_color_calibration+0x130>)
 8000cee:	f005 fa99 	bl	8006224 <uart_printf>
			load_color_reference_table();
 8000cf2:	f000 fa7b 	bl	80011ec <load_color_reference_table>
			debug_print_color_reference_table();
 8000cf6:	f000 faad 	bl	8001254 <debug_print_color_reference_table>
 8000cfa:	e000      	b.n	8000cfe <ap_task_color_calibration+0x10e>
	if(!check_color) return;
 8000cfc:	bf00      	nop
		}
	}
}
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200002b4 	.word	0x200002b4
 8000d08:	200002ad 	.word	0x200002ad
 8000d0c:	08009094 	.word	0x08009094
 8000d10:	200002ae 	.word	0x200002ae
 8000d14:	080090c0 	.word	0x080090c0
 8000d18:	080090d4 	.word	0x080090d4
 8000d1c:	080090f4 	.word	0x080090f4
 8000d20:	08009114 	.word	0x08009114
 8000d24:	200002ac 	.word	0x200002ac
 8000d28:	08009138 	.word	0x08009138

08000d2c <ap_task_color_detection>:


// -------------------- 일반 색상 인식 루틴 --------------------
static void ap_task_color_detection(void)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
	if (!check_color) return;
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <ap_task_color_detection+0x88>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	f083 0301 	eor.w	r3, r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d133      	bne.n	8000daa <ap_task_color_detection+0x7e>

	uint8_t left  = classify_color_side(BH1745_ADDR_LEFT);
 8000d42:	2038      	movs	r0, #56	@ 0x38
 8000d44:	f000 fa1a 	bl	800117c <classify_color_side>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
	uint8_t right = classify_color_side(BH1745_ADDR_RIGHT);
 8000d4c:	2039      	movs	r0, #57	@ 0x39
 8000d4e:	f000 fa15 	bl	800117c <classify_color_side>
 8000d52:	4603      	mov	r3, r0
 8000d54:	71bb      	strb	r3, [r7, #6]

	if (left == right)
 8000d56:	79fa      	ldrb	r2, [r7, #7]
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d10c      	bne.n	8000d78 <ap_task_color_detection+0x4c>
	{
		detected_color = left;
 8000d5e:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <ap_task_color_detection+0x8c>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	7013      	strb	r3, [r2, #0]
		uart_printf("cur_detected color: %s\r\n", color_to_string(left));
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fa28 	bl	80011bc <color_to_string>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4812      	ldr	r0, [pc, #72]	@ (8000dbc <ap_task_color_detection+0x90>)
 8000d72:	f005 fa57 	bl	8006224 <uart_printf>
 8000d76:	e014      	b.n	8000da2 <ap_task_color_detection+0x76>
	}
	else
	{
		detected_color = COLOR_BLACK;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <ap_task_color_detection+0x8c>)
 8000d7a:	2209      	movs	r2, #9
 8000d7c:	701a      	strb	r2, [r3, #0]
		uart_printf("The colors on both sides do not match!!\r\n");
 8000d7e:	4810      	ldr	r0, [pc, #64]	@ (8000dc0 <ap_task_color_detection+0x94>)
 8000d80:	f005 fa50 	bl	8006224 <uart_printf>
		uart_printf("[LEFT]: %s | [RIGHT]: %s\r\n", color_to_string(left), color_to_string(right));
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fa18 	bl	80011bc <color_to_string>
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fa13 	bl	80011bc <color_to_string>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <ap_task_color_detection+0x98>)
 8000d9e:	f005 fa41 	bl	8006224 <uart_printf>
	}

	check_color = false;
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <ap_task_color_detection+0x88>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e000      	b.n	8000dac <ap_task_color_detection+0x80>
	if (!check_color) return;
 8000daa:	bf00      	nop
}
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200002b4 	.word	0x200002b4
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	0800915c 	.word	0x0800915c
 8000dc0:	08009178 	.word	0x08009178
 8000dc4:	080091a4 	.word	0x080091a4

08000dc8 <HAL_GPIO_EXTI_Callback>:

extern volatile uint8_t detected_color;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d102      	bne.n	8000dde <HAL_GPIO_EXTI_Callback+0x16>
	{
		case GPIO_PIN_0:
			ap_exti0_callback();
 8000dd8:	f000 f806 	bl	8000de8 <ap_exti0_callback>
			break;
 8000ddc:	bf00      	nop
	}
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <ap_exti0_callback>:

void ap_exti0_callback(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	bool level = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);  // Pull-up 기준
 8000dee:	2101      	movs	r1, #1
 8000df0:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <ap_exti0_callback+0x38>)
 8000df2:	f002 fcab 	bl	800374c <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf0c      	ite	eq
 8000dfc:	2301      	moveq	r3, #1
 8000dfe:	2300      	movne	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]
	input_exti_triggered(INPUT_MODE, level);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	4619      	mov	r1, r3
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 fab2 	bl	8001370 <input_exti_triggered>

	if(level)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <ap_exti0_callback+0x30>
		check_color = true;
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <ap_exti0_callback+0x3c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	48000400 	.word	0x48000400
 8000e24:	200002b4 	.word	0x200002b4

08000e28 <ap_tim16_callback>:
{

}

void ap_tim16_callback(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	rgb_set_color(detected_color);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <ap_tim16_callback+0x14>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fb62 	bl	80014fc <rgb_set_color>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000008 	.word	0x20000008

08000e40 <ap_tim17_callback>:

void ap_tim17_callback(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	timer17_ms++;
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <ap_tim17_callback+0x18>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a03      	ldr	r2, [pc, #12]	@ (8000e58 <ap_tim17_callback+0x18>)
 8000e4c:	6013      	str	r3, [r2, #0]

	input_update();
 8000e4e:	f000 faa3 	bl	8001398 <input_update>


}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200002b0 	.word	0x200002b0

08000e5c <bh1745_write_reg>:
uint8_t insert_index = 0;



void bh1745_write_reg(uint8_t dev_addr, uint8_t reg, uint8_t data)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
    i2c_write(dev_addr, reg, data);
 8000e6e:	797a      	ldrb	r2, [r7, #5]
 8000e70:	79b9      	ldrb	r1, [r7, #6]
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 f91f 	bl	80060b8 <i2c_write>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <bh1745_init>:

void bh1745_init(uint8_t dev_addr)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
    // 1. SW Reset
    bh1745_write_reg(dev_addr, 0x40, 0x80);  // SYSTEM_CONTROL: Software Reset
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	2140      	movs	r1, #64	@ 0x40
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffe2 	bl	8000e5c <bh1745_write_reg>
    HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f001 f945 	bl	8002128 <HAL_Delay>

    // 2. Measurement Time 설정 (MODE_CONTROL1)
    bh1745_write_reg(dev_addr, 0x41, 0x00);  // 160ms
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2141      	movs	r1, #65	@ 0x41
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ffd9 	bl	8000e5c <bh1745_write_reg>

    // 3. Gain 설정 + RGBC Enable (MODE_CONTROL2)
    bh1745_write_reg(dev_addr, 0x42, 0x12);  // GAIN = 1x, Bit4(RGBC_EN) = 1
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2212      	movs	r2, #18
 8000eae:	2142      	movs	r1, #66	@ 0x42
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffd3 	bl	8000e5c <bh1745_write_reg>

    // 4. RGB 측정 트리거 (MODE_CONTROL3)
    bh1745_write_reg(dev_addr, 0x44, 0x02);  // RGB measurement start
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	2144      	movs	r1, #68	@ 0x44
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ffcd 	bl	8000e5c <bh1745_write_reg>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <color_init>:

void color_init(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
	bh1745_init(BH1745_ADDR_LEFT);
 8000ece:	2038      	movs	r0, #56	@ 0x38
 8000ed0:	f7ff ffd7 	bl	8000e82 <bh1745_init>
	bh1745_init(BH1745_ADDR_RIGHT);
 8000ed4:	2039      	movs	r0, #57	@ 0x39
 8000ed6:	f7ff ffd4 	bl	8000e82 <bh1745_init>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}

08000ede <bh1745_read_u16>:

uint16_t bh1745_read_u16(uint8_t dev_addr, uint8_t lsb_reg)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	71fb      	strb	r3, [r7, #7]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71bb      	strb	r3, [r7, #6]
    uint8_t lsb = i2c_read(dev_addr, lsb_reg);
 8000eee:	79ba      	ldrb	r2, [r7, #6]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 f927 	bl	8006148 <i2c_read>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
    uint8_t msb = i2c_read(dev_addr, lsb_reg + 1);
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 f91d 	bl	8006148 <i2c_read>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73bb      	strb	r3, [r7, #14]
    return (msb << 8) | lsb;
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	b29b      	uxth	r3, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <bh1745_read_rgbc>:

bh1745_color_data_t bh1745_read_rgbc(uint8_t dev_addr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
    bh1745_color_data_t color;

    color.red   = bh1745_read_u16(dev_addr, 0x50);
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2150      	movs	r1, #80	@ 0x50
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffce 	bl	8000ede <bh1745_read_u16>
 8000f42:	4603      	mov	r3, r0
 8000f44:	813b      	strh	r3, [r7, #8]
    color.green = bh1745_read_u16(dev_addr, 0x52);
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	2152      	movs	r1, #82	@ 0x52
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffc7 	bl	8000ede <bh1745_read_u16>
 8000f50:	4603      	mov	r3, r0
 8000f52:	817b      	strh	r3, [r7, #10]
    color.blue  = bh1745_read_u16(dev_addr, 0x54);
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2154      	movs	r1, #84	@ 0x54
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ffc0 	bl	8000ede <bh1745_read_u16>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	81bb      	strh	r3, [r7, #12]
    color.clear = bh1745_read_u16(dev_addr, 0x56);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2156      	movs	r1, #86	@ 0x56
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffb9 	bl	8000ede <bh1745_read_u16>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	81fb      	strh	r3, [r7, #14]

    return color;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	461a      	mov	r2, r3
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	cb03      	ldmia	r3!, {r0, r1}
 8000f7a:	6010      	str	r0, [r2, #0]
 8000f7c:	6051      	str	r1, [r2, #4]
}
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <save_color_reference>:


void save_color_reference(uint8_t sensor_side, color_t color, uint16_t r, uint16_t g, uint16_t b)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	@ 0x34
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	4606      	mov	r6, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4633      	mov	r3, r6
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	80bb      	strh	r3, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	807b      	strh	r3, [r7, #2]
	rgb_raw_t	raw		= {.red_raw = r, .green_raw = g, .blue_raw = b};
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	833b      	strh	r3, [r7, #24]
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	837b      	strh	r3, [r7, #26]
 8000fae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000fb2:	83bb      	strh	r3, [r7, #28]
    uint64_t 	offset	= calculate_brightness(r, g, b);
 8000fb4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000fb8:	8879      	ldrh	r1, [r7, #2]
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f9b7 	bl	8001330 <calculate_brightness>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	461c      	mov	r4, r3
 8000fc8:	4615      	mov	r5, r2
 8000fca:	e9c7 4508 	strd	r4, r5, [r7, #32]

    reference_entry_t entry = { .raw = raw, .color = color, .offset = offset };
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	f107 0218 	add.w	r2, r7, #24
 8000fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe8:	6018      	str	r0, [r3, #0]
 8000fea:	3304      	adds	r3, #4
 8000fec:	8019      	strh	r1, [r3, #0]
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	73bb      	strb	r3, [r7, #14]
 8000ff2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ff6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if (sensor_side == BH1745_ADDR_LEFT)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b38      	cmp	r3, #56	@ 0x38
 8000ffe:	d10a      	bne.n	8001016 <save_color_reference+0x8e>
    {
        color_reference_tbl_left[color] = entry;
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <save_color_reference+0xcc>)
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	461c      	mov	r4, r3
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001014:	e009      	b.n	800102a <save_color_reference+0xa2>
    }
    else
    {
        color_reference_tbl_right[color] = entry;
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <save_color_reference+0xd0>)
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	461c      	mov	r4, r3
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001026:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // Flash에 저장!
    flash_write_color_reference(sensor_side, color, entry);
 800102a:	79bd      	ldrb	r5, [r7, #6]
 800102c:	79fc      	ldrb	r4, [r7, #7]
 800102e:	466a      	mov	r2, sp
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001038:	e882 0003 	stmia.w	r2, {r0, r1}
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	cb0c      	ldmia	r3, {r2, r3}
 8001042:	4629      	mov	r1, r5
 8001044:	4620      	mov	r0, r4
 8001046:	f005 f913 	bl	8006270 <flash_write_color_reference>
}
 800104a:	bf00      	nop
 800104c:	372c      	adds	r7, #44	@ 0x2c
 800104e:	46bd      	mov	sp, r7
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	bf00      	nop
 8001054:	200002b8 	.word	0x200002b8
 8001058:	20000378 	.word	0x20000378

0800105c <classify_color>:


color_t classify_color(uint8_t left_right, uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 800105c:	b490      	push	{r4, r7}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	80bb      	strh	r3, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]
 8001076:	4613      	mov	r3, r2
 8001078:	803b      	strh	r3, [r7, #0]
	float min_dist = 1e9;
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <classify_color+0x114>)
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	color_t best_match = COLOR_GRAY;
 800107e:	230b      	movs	r3, #11
 8001080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    const reference_entry_t* table;
    int table_size = COLOR_COUNT;
 8001084:	230c      	movs	r3, #12
 8001086:	61fb      	str	r3, [r7, #28]

    if (left_right == BH1745_ADDR_LEFT)  // LEFT
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b38      	cmp	r3, #56	@ 0x38
 800108c:	d102      	bne.n	8001094 <classify_color+0x38>
    {
        table = color_reference_tbl_left;
 800108e:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <classify_color+0x118>)
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
 8001092:	e001      	b.n	8001098 <classify_color+0x3c>
    }
    else // RIGHT
    {
        table = color_reference_tbl_right;
 8001094:	4b38      	ldr	r3, [pc, #224]	@ (8001178 <classify_color+0x11c>)
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    for (int i = 0; i < table_size; i++)
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	e05c      	b.n	8001158 <classify_color+0xfc>
    {
    	float dr = (float)r - table[i].raw.red_raw;
 800109e:	88bb      	ldrh	r3, [r7, #4]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ae:	4413      	add	r3, r2
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010be:	edc7 7a06 	vstr	s15, [r7, #24]
		float dg = (float)g - table[i].raw.green_raw;
 80010c2:	887b      	ldrh	r3, [r7, #2]
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d2:	4413      	add	r3, r2
 80010d4:	885b      	ldrh	r3, [r3, #2]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e2:	edc7 7a05 	vstr	s15, [r7, #20]
		float db = (float)b - table[i].raw.blue_raw;
 80010e6:	883b      	ldrh	r3, [r7, #0]
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f6:	4413      	add	r3, r2
 80010f8:	889b      	ldrh	r3, [r3, #4]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001106:	edc7 7a04 	vstr	s15, [r7, #16]

        float dist = dr * dr + dg * dg + db * db;
 800110a:	edd7 7a06 	vldr	s15, [r7, #24]
 800110e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001112:	edd7 7a05 	vldr	s15, [r7, #20]
 8001116:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800111a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001122:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]

        if (dist < min_dist)
 800112e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001132:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d508      	bpl.n	8001152 <classify_color+0xf6>
        {
            min_dist = dist;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
            best_match = table[i].color;
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800114a:	4413      	add	r3, r2
 800114c:	799b      	ldrb	r3, [r3, #6]
 800114e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    for (int i = 0; i < table_size; i++)
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	3301      	adds	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	6a3a      	ldr	r2, [r7, #32]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	429a      	cmp	r2, r3
 800115e:	db9e      	blt.n	800109e <classify_color+0x42>
        }
    }

	return best_match;
 8001160:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8001164:	4618      	mov	r0, r3
 8001166:	3730      	adds	r7, #48	@ 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bc90      	pop	{r4, r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	4e6e6b28 	.word	0x4e6e6b28
 8001174:	200002b8 	.word	0x200002b8
 8001178:	20000378 	.word	0x20000378

0800117c <classify_color_side>:

uint8_t classify_color_side(uint8_t color_side)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = color_side;
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	75fb      	strb	r3, [r7, #23]

	bh1745_color_data_t color_rgbc;
	color_t detected = COLOR_BLACK;
 800118a:	2309      	movs	r3, #9
 800118c:	75bb      	strb	r3, [r7, #22]

	color_rgbc 	= bh1745_read_rgbc(addr);
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	7dfa      	ldrb	r2, [r7, #23]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fec8 	bl	8000f2c <bh1745_read_rgbc>

	detected =
			classify_color(addr, color_rgbc.red, color_rgbc.green, color_rgbc.blue, color_rgbc.clear);
 800119c:	89b9      	ldrh	r1, [r7, #12]
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	8a3c      	ldrh	r4, [r7, #16]
 80011a2:	8a7b      	ldrh	r3, [r7, #18]
 80011a4:	7df8      	ldrb	r0, [r7, #23]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4623      	mov	r3, r4
 80011aa:	f7ff ff57 	bl	800105c <classify_color>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75bb      	strb	r3, [r7, #22]

	return (uint8_t) detected;
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}

080011bc <color_to_string>:

const char* color_to_string(color_t color)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
        "BLACK",
        "WHITE",
        "GRAY"
    };

    if (color < 0 || color >= COLOR_COUNT)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b0b      	cmp	r3, #11
 80011ca:	d901      	bls.n	80011d0 <color_to_string+0x14>
        return "UNKNOWN";
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <color_to_string+0x28>)
 80011ce:	e003      	b.n	80011d8 <color_to_string+0x1c>

    return color_names[color];
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <color_to_string+0x2c>)
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	080091c0 	.word	0x080091c0
 80011e8:	2000000c 	.word	0x2000000c

080011ec <load_color_reference_table>:

void load_color_reference_table(void)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
    for (int i = 0; i < COLOR_COUNT; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e020      	b.n	800123a <load_color_reference_table+0x4e>
    {
        color_reference_tbl_left[i] = flash_read_color_reference(BH1745_ADDR_LEFT, i);
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4913      	ldr	r1, [pc, #76]	@ (800124c <load_color_reference_table+0x60>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	18cc      	adds	r4, r1, r3
 8001204:	463b      	mov	r3, r7
 8001206:	2138      	movs	r1, #56	@ 0x38
 8001208:	4618      	mov	r0, r3
 800120a:	f005 f873 	bl	80062f4 <flash_read_color_reference>
 800120e:	463b      	mov	r3, r7
 8001210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        color_reference_tbl_right[i] = flash_read_color_reference(BH1745_ADDR_RIGHT, i);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	490d      	ldr	r1, [pc, #52]	@ (8001250 <load_color_reference_table+0x64>)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	18cc      	adds	r4, r1, r3
 8001222:	463b      	mov	r3, r7
 8001224:	2139      	movs	r1, #57	@ 0x39
 8001226:	4618      	mov	r0, r3
 8001228:	f005 f864 	bl	80062f4 <flash_read_color_reference>
 800122c:	463b      	mov	r3, r7
 800122e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < COLOR_COUNT; i++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b0b      	cmp	r3, #11
 800123e:	dddb      	ble.n	80011f8 <load_color_reference_table+0xc>
    }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	371c      	adds	r7, #28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd90      	pop	{r4, r7, pc}
 800124a:	bf00      	nop
 800124c:	200002b8 	.word	0x200002b8
 8001250:	20000378 	.word	0x20000378

08001254 <debug_print_color_reference_table>:

void debug_print_color_reference_table(void)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b08e      	sub	sp, #56	@ 0x38
 8001258:	af04      	add	r7, sp, #16
    uart_printf("=== LEFT COLOR REFERENCE TABLE ===\r\n");
 800125a:	482f      	ldr	r0, [pc, #188]	@ (8001318 <debug_print_color_reference_table+0xc4>)
 800125c:	f004 ffe2 	bl	8006224 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
 8001264:	e022      	b.n	80012ac <debug_print_color_reference_table+0x58>
    {
        reference_entry_t e = color_reference_tbl_left[i];
 8001266:	4a2d      	ldr	r2, [pc, #180]	@ (800131c <debug_print_color_reference_table+0xc8>)
 8001268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	f107 0410 	add.w	r4, r7, #16
 8001272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 8001278:	7dbb      	ldrb	r3, [r7, #22]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff9e 	bl	80011bc <color_to_string>
 8001280:	4601      	mov	r1, r0
                    i, color_to_string(e.color),
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 8001282:	8a3b      	ldrh	r3, [r7, #16]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 8001284:	461d      	mov	r5, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 8001286:	8a7b      	ldrh	r3, [r7, #18]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 8001288:	4618      	mov	r0, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 800128a:	8abb      	ldrh	r3, [r7, #20]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 800128c:	461c      	mov	r4, r3
 800128e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001292:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001296:	9401      	str	r4, [sp, #4]
 8001298:	9000      	str	r0, [sp, #0]
 800129a:	462b      	mov	r3, r5
 800129c:	460a      	mov	r2, r1
 800129e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012a0:	481f      	ldr	r0, [pc, #124]	@ (8001320 <debug_print_color_reference_table+0xcc>)
 80012a2:	f004 ffbf 	bl	8006224 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	3301      	adds	r3, #1
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ae:	2b0b      	cmp	r3, #11
 80012b0:	ddd9      	ble.n	8001266 <debug_print_color_reference_table+0x12>
    }

    uart_printf("=== RIGHT COLOR REFERENCE TABLE ===\r\n");
 80012b2:	481c      	ldr	r0, [pc, #112]	@ (8001324 <debug_print_color_reference_table+0xd0>)
 80012b4:	f004 ffb6 	bl	8006224 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	e021      	b.n	8001302 <debug_print_color_reference_table+0xae>
    {
        reference_entry_t e = color_reference_tbl_right[i];
 80012be:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <debug_print_color_reference_table+0xd4>)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	4413      	add	r3, r2
 80012c6:	463c      	mov	r4, r7
 80012c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff73 	bl	80011bc <color_to_string>
 80012d6:	4601      	mov	r1, r0
                    i, color_to_string(e.color),
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012d8:	883b      	ldrh	r3, [r7, #0]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012da:	461d      	mov	r5, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012dc:	887b      	ldrh	r3, [r7, #2]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012de:	4618      	mov	r0, r3
                    e.raw.red_raw, e.raw.green_raw, e.raw.blue_raw, e.offset);
 80012e0:	88bb      	ldrh	r3, [r7, #4]
        uart_printf("[%2d | %-11s] R: %4d, G: %4d, B: %4d, OFFSET: %8llu\r\n",
 80012e2:	461c      	mov	r4, r3
 80012e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ec:	9401      	str	r4, [sp, #4]
 80012ee:	9000      	str	r0, [sp, #0]
 80012f0:	462b      	mov	r3, r5
 80012f2:	460a      	mov	r2, r1
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	480a      	ldr	r0, [pc, #40]	@ (8001320 <debug_print_color_reference_table+0xcc>)
 80012f8:	f004 ff94 	bl	8006224 <uart_printf>
    for (int i = 0; i < COLOR_COUNT; i++)
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	3301      	adds	r3, #1
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	2b0b      	cmp	r3, #11
 8001306:	ddda      	ble.n	80012be <debug_print_color_reference_table+0x6a>
    }
    uart_printf("=== BRIGHTNESS OFFSET TABLE ===\r\n");
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <debug_print_color_reference_table+0xd8>)
 800130a:	f004 ff8b 	bl	8006224 <uart_printf>
//    uart_printf("offset_black: %d | offset_white: %d\r\n", offset_black, offset_white);
//	uart_printf("offset_aver: %d\r\n", offset_average);
}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	@ 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}
 8001316:	bf00      	nop
 8001318:	080091c8 	.word	0x080091c8
 800131c:	200002b8 	.word	0x200002b8
 8001320:	080091f0 	.word	0x080091f0
 8001324:	08009228 	.word	0x08009228
 8001328:	20000378 	.word	0x20000378
 800132c:	08009250 	.word	0x08009250

08001330 <calculate_brightness>:

uint32_t calculate_brightness(uint16_t r, uint16_t g, uint16_t b)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
 800133a:	460b      	mov	r3, r1
 800133c:	80bb      	strh	r3, [r7, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	807b      	strh	r3, [r7, #2]
//    return 0.2126f * r + 0.7152f * g + 0.0722f * b;

    return (218 * r + 732 * g + 74 * b) >> 10;
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	22da      	movs	r2, #218	@ 0xda
 8001346:	fb03 f202 	mul.w	r2, r3, r2
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	f44f 7137 	mov.w	r1, #732	@ 0x2dc
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	441a      	add	r2, r3
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	214a      	movs	r1, #74	@ 0x4a
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	4413      	add	r3, r2
 8001360:	129b      	asrs	r3, r3, #10
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <input_exti_triggered>:




void input_exti_triggered(input_id_t id, bool level)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	is_pressed[id] = level;
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4904      	ldr	r1, [pc, #16]	@ (8001394 <input_exti_triggered+0x24>)
 8001384:	79ba      	ldrb	r2, [r7, #6]
 8001386:	54ca      	strb	r2, [r1, r3]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000438 	.word	0x20000438

08001398 <input_update>:

void input_update(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_INPUTS; i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	e037      	b.n	8001414 <input_update+0x7c>
	{
		if(is_pressed[i])
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <input_update+0x90>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d016      	beq.n	80013de <input_update+0x46>
		{
			press_time[i]++;
 80013b0:	4a1e      	ldr	r2, [pc, #120]	@ (800142c <input_update+0x94>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	491c      	ldr	r1, [pc, #112]	@ (800142c <input_update+0x94>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(press_time[i] == 3000)
 80013c2:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <input_update+0x94>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d11d      	bne.n	800140e <input_update+0x76>
			{
				long_press_flag[i] = true;
 80013d2:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <input_update+0x98>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
 80013dc:	e017      	b.n	800140e <input_update+0x76>
			}
		}
		else
		{
			if(press_time[i] > 0 && press_time[i] < 3000)
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <input_update+0x94>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <input_update+0x6c>
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <input_update+0x94>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d804      	bhi.n	8001404 <input_update+0x6c>
			{
				short_press_flag[i] = true;
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <input_update+0x9c>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
			}
			press_time[i] = 0;
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <input_update+0x94>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2100      	movs	r1, #0
 800140a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_INPUTS; i++)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b06      	cmp	r3, #6
 8001418:	ddc4      	ble.n	80013a4 <input_update+0xc>
		}
	}
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	20000438 	.word	0x20000438
 800142c:	20000440 	.word	0x20000440
 8001430:	20000464 	.word	0x20000464
 8001434:	2000045c 	.word	0x2000045c

08001438 <input_is_short_pressed>:

bool input_is_short_pressed(input_id_t id)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	bool ret = short_press_flag[id];
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a06      	ldr	r2, [pc, #24]	@ (8001460 <input_is_short_pressed+0x28>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	73fb      	strb	r3, [r7, #15]
	short_press_flag[id] = false;
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <input_is_short_pressed+0x28>)
 800144e:	2100      	movs	r1, #0
 8001450:	54d1      	strb	r1, [r2, r3]
	return ret;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000045c 	.word	0x2000045c

08001464 <input_is_long_pressed>:

bool input_is_long_pressed(input_id_t id)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	bool ret = long_press_flag[id];
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4a06      	ldr	r2, [pc, #24]	@ (800148c <input_is_long_pressed+0x28>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	73fb      	strb	r3, [r7, #15]
	long_press_flag[id] = false;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <input_is_long_pressed+0x28>)
 800147a:	2100      	movs	r1, #0
 800147c:	54d1      	strb	r1, [r2, r3]
	return ret;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	20000464 	.word	0x20000464

08001490 <led_init>:
};



void led_init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	led_on(_DEF_CH_1);
 8001494:	2000      	movs	r0, #0
 8001496:	f000 f803 	bl	80014a0 <led_on>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <led_on>:

void led_on(uint8_t ch)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d814      	bhi.n	80014da <led_on+0x3a>
		return;

	switch (ch)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d112      	bne.n	80014dc <led_on+0x3c>
	{
		case _DEF_CH_1:
			HAL_GPIO_WritePin(led[ch].port, led[ch].pin, led[ch].on_state);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <led_on+0x44>)
 80014ba:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4a08      	ldr	r2, [pc, #32]	@ (80014e4 <led_on+0x44>)
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4413      	add	r3, r2
 80014c6:	8899      	ldrh	r1, [r3, #4]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <led_on+0x44>)
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	799b      	ldrb	r3, [r3, #6]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f002 f952 	bl	800377c <HAL_GPIO_WritePin>
			break;
 80014d8:	e000      	b.n	80014dc <led_on+0x3c>
		return;
 80014da:	bf00      	nop
	}
}
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	080092f8 	.word	0x080092f8

080014e8 <rgb_init>:
		[COLOR_GRAY]        = { 128, 128, 128 }
};


void rgb_init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RGB_CH1_R | RGB_CH1_G | RGB_CH1_B, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2170      	movs	r1, #112	@ 0x70
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f4:	f002 f942 	bl	800377c <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <rgb_set_color>:

void rgb_set_color(color_t color)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	if(color >= COLOR_COUNT)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b0b      	cmp	r3, #11
 800150a:	d81a      	bhi.n	8001542 <rgb_set_color+0x46>
		return;

	rgb_set_pwm(led_map[color].r, led_map[color].g, led_map[color].b);
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	490f      	ldr	r1, [pc, #60]	@ (800154c <rgb_set_color+0x50>)
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	440b      	add	r3, r1
 8001518:	7818      	ldrb	r0, [r3, #0]
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	490b      	ldr	r1, [pc, #44]	@ (800154c <rgb_set_color+0x50>)
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	440b      	add	r3, r1
 8001526:	3301      	adds	r3, #1
 8001528:	7819      	ldrb	r1, [r3, #0]
 800152a:	79fa      	ldrb	r2, [r7, #7]
 800152c:	4c07      	ldr	r4, [pc, #28]	@ (800154c <rgb_set_color+0x50>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	4423      	add	r3, r4
 8001536:	3302      	adds	r3, #2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f000 f808 	bl	8001550 <rgb_set_pwm>
 8001540:	e000      	b.n	8001544 <rgb_set_color+0x48>
		return;
 8001542:	bf00      	nop
}
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	08009310 	.word	0x08009310

08001550 <rgb_set_pwm>:

void rgb_set_pwm(uint8_t r, uint8_t g, uint8_t b)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	460b      	mov	r3, r1
 800155c:	71bb      	strb	r3, [r7, #6]
 800155e:	4613      	mov	r3, r2
 8001560:	717b      	strb	r3, [r7, #5]
	static uint8_t pwm_period = 0;

	if(++pwm_period > 255)
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <rgb_set_pwm+0xa4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <rgb_set_pwm+0xa4>)
 800156c:	701a      	strb	r2, [r3, #0]
		pwm_period = 0;

	if(pwm_period > 255 - r)
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <rgb_set_pwm+0xa4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800157a:	429a      	cmp	r2, r3
 800157c:	dd06      	ble.n	800158c <rgb_set_pwm+0x3c>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_R, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2120      	movs	r1, #32
 8001582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001586:	f002 f8f9 	bl	800377c <HAL_GPIO_WritePin>
 800158a:	e005      	b.n	8001598 <rgb_set_pwm+0x48>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_R, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2120      	movs	r1, #32
 8001590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001594:	f002 f8f2 	bl	800377c <HAL_GPIO_WritePin>
	}

	if(pwm_period > 255 - g)
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <rgb_set_pwm+0xa4>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dd06      	ble.n	80015b6 <rgb_set_pwm+0x66>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_G, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2140      	movs	r1, #64	@ 0x40
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f002 f8e4 	bl	800377c <HAL_GPIO_WritePin>
 80015b4:	e005      	b.n	80015c2 <rgb_set_pwm+0x72>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_G, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2140      	movs	r1, #64	@ 0x40
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015be:	f002 f8dd 	bl	800377c <HAL_GPIO_WritePin>
	}

	if(pwm_period > 255 - b)
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <rgb_set_pwm+0xa4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dd06      	ble.n	80015e0 <rgb_set_pwm+0x90>
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2110      	movs	r1, #16
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015da:	f002 f8cf 	bl	800377c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_SET);
	}
}
 80015de:	e005      	b.n	80015ec <rgb_set_pwm+0x9c>
		HAL_GPIO_WritePin(GPIOA, RGB_CH1_B, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2110      	movs	r1, #16
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e8:	f002 f8c8 	bl	800377c <HAL_GPIO_WritePin>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000046b 	.word	0x2000046b

080015f8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001604:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001614:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800161c:	68fb      	ldr	r3, [r7, #12]
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162e:	f000 fcf5 	bl	800201c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001632:	f000 f812 	bl	800165a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001636:	f000 f9a1 	bl	800197c <MX_GPIO_Init>
  MX_I2C1_Init();
 800163a:	f000 f8c7 	bl	80017cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800163e:	f000 f951 	bl	80018e4 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8001642:	f000 f903 	bl	800184c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001646:	f000 f927 	bl	8001898 <MX_TIM17_Init>
  MX_ADC1_Init();
 800164a:	f000 f85b 	bl	8001704 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800164e:	f7ff fa83 	bl	8000b58 <ap_init>
  ap_main();
 8001652:	f7ff fa9d 	bl	8000b90 <ap_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001656:	bf00      	nop
 8001658:	e7fd      	b.n	8001656 <main+0x2c>

0800165a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b09a      	sub	sp, #104	@ 0x68
 800165e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	2248      	movs	r2, #72	@ 0x48
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fc1f 	bl	8006eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001690:	2340      	movs	r3, #64	@ 0x40
 8001692:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001694:	2302      	movs	r3, #2
 8001696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001698:	2303      	movs	r3, #3
 800169a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800169c:	2310      	movs	r3, #16
 800169e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80016a0:	2308      	movs	r3, #8
 80016a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016ae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fd3a 	bl	8004134 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x70>
  {
    Error_Handler();
 80016c6:	f000 f9af 	bl	8001a28 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80016ca:	236f      	movs	r3, #111	@ 0x6f
 80016cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2103      	movs	r1, #3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 f88c 	bl	8004808 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016f6:	f000 f997 	bl	8001a28 <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3768      	adds	r7, #104	@ 0x68
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800171a:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800171c:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <MX_ADC1_Init+0xc0>)
 800171e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172c:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800173a:	2204      	movs	r2, #4
 800173c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001740:	2200      	movs	r2, #0
 8001742:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001746:	2200      	movs	r2, #0
 8001748:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800174c:	2201      	movs	r2, #1
 800174e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001760:	2200      	movs	r2, #0
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 800177c:	f000 fe84 	bl	8002488 <HAL_ADC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001786:	f000 f94f 	bl	8001a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800178a:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_ADC1_Init+0xc4>)
 800178c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800178e:	2306      	movs	r3, #6
 8001790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001796:	237f      	movs	r3, #127	@ 0x7f
 8001798:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800179a:	2304      	movs	r3, #4
 800179c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	@ (80017c0 <MX_ADC1_Init+0xbc>)
 80017a8:	f000 ffba 	bl	8002720 <HAL_ADC_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017b2:	f000 f939 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000046c 	.word	0x2000046c
 80017c4:	50040000 	.word	0x50040000
 80017c8:	32601000 	.word	0x32601000

080017cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001844 <MX_I2C1_Init+0x78>)
 80017d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001848 <MX_I2C1_Init+0x7c>)
 80017da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_I2C1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001800:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001806:	480e      	ldr	r0, [pc, #56]	@ (8001840 <MX_I2C1_Init+0x74>)
 8001808:	f001 ffe8 	bl	80037dc <HAL_I2C_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001812:	f000 f909 	bl	8001a28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4809      	ldr	r0, [pc, #36]	@ (8001840 <MX_I2C1_Init+0x74>)
 800181a:	f002 f87a 	bl	8003912 <HAL_I2CEx_ConfigAnalogFilter>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 f900 	bl	8001a28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4805      	ldr	r0, [pc, #20]	@ (8001840 <MX_I2C1_Init+0x74>)
 800182c:	f002 f8bc 	bl	80039a8 <HAL_I2CEx_ConfigDigitalFilter>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001836:	f000 f8f7 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200004d0 	.word	0x200004d0
 8001844:	40005400 	.word	0x40005400
 8001848:	10b17db5 	.word	0x10b17db5

0800184c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_TIM16_Init+0x44>)
 8001852:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <MX_TIM16_Init+0x48>)
 8001854:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_TIM16_Init+0x44>)
 8001858:	223f      	movs	r2, #63	@ 0x3f
 800185a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_TIM16_Init+0x44>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_TIM16_Init+0x44>)
 8001864:	2209      	movs	r2, #9
 8001866:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_TIM16_Init+0x44>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_TIM16_Init+0x44>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_TIM16_Init+0x44>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_TIM16_Init+0x44>)
 800187c:	f003 fc0d 	bl	800509a <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001886:	f000 f8cf 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000524 	.word	0x20000524
 8001894:	40014400 	.word	0x40014400

08001898 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800189c:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_TIM17_Init+0x44>)
 800189e:	4a10      	ldr	r2, [pc, #64]	@ (80018e0 <MX_TIM17_Init+0x48>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018a4:	223f      	movs	r2, #63	@ 0x3f
 80018a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018b4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_TIM17_Init+0x44>)
 80018ca:	f003 fbe6 	bl	800509a <HAL_TIM_Base_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80018d4:	f000 f8a8 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000570 	.word	0x20000570
 80018e0:	40014800 	.word	0x40014800

080018e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 80018ea:	4a23      	ldr	r2, [pc, #140]	@ (8001978 <MX_USART1_UART_Init+0x94>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 800192e:	f003 fe2b 	bl	8005588 <HAL_UART_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001938:	f000 f876 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001940:	f004 fa94 	bl	8005e6c <HAL_UARTEx_SetTxFifoThreshold>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800194a:	f000 f86d 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001952:	f004 fac9 	bl	8005ee8 <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800195c:	f000 f864 	bl	8001a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_USART1_UART_Init+0x90>)
 8001962:	f004 fa4a 	bl	8005dfa <HAL_UARTEx_DisableFifoMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800196c:	f000 f85c 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200005bc 	.word	0x200005bc
 8001978:	40013800 	.word	0x40013800

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	2002      	movs	r0, #2
 8001992:	f7ff fe31 	bl	80015f8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff fe2e 	bl	80015f8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800199c:	2201      	movs	r2, #1
 800199e:	217f      	movs	r1, #127	@ 0x7f
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a4:	f001 feea 	bl	800377c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2106      	movs	r1, #6
 80019ac:	481d      	ldr	r0, [pc, #116]	@ (8001a24 <MX_GPIO_Init+0xa8>)
 80019ae:	f001 fee5 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	21f0      	movs	r1, #240	@ 0xf0
 80019b6:	481b      	ldr	r0, [pc, #108]	@ (8001a24 <MX_GPIO_Init+0xa8>)
 80019b8:	f001 fee0 	bl	800377c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019bc:	237f      	movs	r3, #127	@ 0x7f
 80019be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d4:	f001 fd52 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80019d8:	23f6      	movs	r3, #246	@ 0xf6
 80019da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <MX_GPIO_Init+0xa8>)
 80019ee:	f001 fd45 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019f2:	2301      	movs	r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019f6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80019fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <MX_GPIO_Init+0xa8>)
 8001a06:	f001 fd39 	bl	800347c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2006      	movs	r0, #6
 8001a10:	f001 fb27 	bl	8003062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a14:	2006      	movs	r0, #6
 8001a16:	f001 fb3e 	bl	8003096 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	48000400 	.word	0x48000400

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <Error_Handler+0x8>

08001a34 <LL_AHB2_GRP1_EnableClock>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b090      	sub	sp, #64	@ 0x40
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2224      	movs	r2, #36	@ 0x24
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 f9d7 	bl	8006eac <memset>
  if(hadc->Instance==ADC1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <HAL_ADC_MspInit+0x80>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d123      	bne.n	8001b50 <HAL_ADC_MspInit+0x78>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b0c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001b0e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b12:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f9e3 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b24:	f7ff ff80 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b2c:	f7ff ff82 	bl	8001a34 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	2001      	movs	r0, #1
 8001b32:	f7ff ff7f 	bl	8001a34 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b4c:	f001 fc96 	bl	800347c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b50:	bf00      	nop
 8001b52:	3740      	adds	r7, #64	@ 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	50040000 	.word	0x50040000

08001b5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b090      	sub	sp, #64	@ 0x40
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	2224      	movs	r2, #36	@ 0x24
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f005 f995 	bl	8006eac <memset>
  if(hi2c->Instance==I2C1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d126      	bne.n	8001bda <HAL_I2C_MspInit+0x7e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b90:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001b94:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f9a2 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001ba6:	f7ff ff3f 	bl	8001a28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7ff ff42 	bl	8001a34 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb6:	2312      	movs	r3, #18
 8001bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <HAL_I2C_MspInit+0x8c>)
 8001bce:	f001 fc55 	bl	800347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001bd6:	f7ff ff46 	bl	8001a66 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bda:	bf00      	nop
 8001bdc:	3740      	adds	r7, #64	@ 0x40
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40005400 	.word	0x40005400
 8001be8:	48000400 	.word	0x48000400

08001bec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <HAL_TIM_Base_MspInit+0x58>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10c      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bfe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c02:	f7ff ff49 	bl	8001a98 <LL_APB2_GRP1_EnableClock>
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2019      	movs	r0, #25
 8001c0c:	f001 fa29 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c10:	2019      	movs	r0, #25
 8001c12:	f001 fa40 	bl	8003096 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001c16:	e010      	b.n	8001c3a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10b      	bne.n	8001c3a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001c22:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001c26:	f7ff ff37 	bl	8001a98 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	201a      	movs	r0, #26
 8001c30:	f001 fa17 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c34:	201a      	movs	r0, #26
 8001c36:	f001 fa2e 	bl	8003096 <HAL_NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40014400 	.word	0x40014400
 8001c48:	40014800 	.word	0x40014800

08001c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b090      	sub	sp, #64	@ 0x40
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	2224      	movs	r2, #36	@ 0x24
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 f91d 	bl	8006eac <memset>
  if(huart->Instance==USART1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <HAL_UART_MspInit+0x88>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d126      	bne.n	8001cca <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f92b 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c94:	f7ff fec8 	bl	8001a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c9c:	f7ff fefc 	bl	8001a98 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fec7 	bl	8001a34 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ca6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc6:	f001 fbd9 	bl	800347c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001cca:	bf00      	nop
 8001ccc:	3740      	adds	r7, #64	@ 0x40
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40013800 	.word	0x40013800

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <NMI_Handler+0x4>

08001ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <MemManage_Handler+0x4>

08001cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <UsageFault_Handler+0x4>

08001d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2e:	f000 f9cf 	bl	80020d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f001 fd36 	bl	80037ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001d4a:	f003 fa4b 	bl	80051e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  ap_tim16_callback();
 8001d4e:	f7ff f86b 	bl	8000e28 <ap_tim16_callback>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000524 	.word	0x20000524

08001d5c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d60:	4803      	ldr	r0, [pc, #12]	@ (8001d70 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001d62:	f003 fa3f 	bl	80051e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  ap_tim17_callback();
 8001d66:	f7ff f86b 	bl	8000e40 <ap_tim17_callback>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000570 	.word	0x20000570

08001d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_kill>:

int _kill(int pid, int sig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d8e:	f005 f8df 	bl	8006f50 <__errno>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2216      	movs	r2, #22
 8001d96:	601a      	str	r2, [r3, #0]
  return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_exit>:

void _exit (int status)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffe7 	bl	8001d84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db6:	bf00      	nop
 8001db8:	e7fd      	b.n	8001db6 <_exit+0x12>

08001dba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	e00a      	b.n	8001de2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	4601      	mov	r1, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	60ba      	str	r2, [r7, #8]
 8001dd8:	b2ca      	uxtb	r2, r1
 8001dda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf0      	blt.n	8001dcc <_read+0x12>
  }

  return len;
 8001dea:	687b      	ldr	r3, [r7, #4]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e009      	b.n	8001e1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	60ba      	str	r2, [r7, #8]
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dbf1      	blt.n	8001e06 <_write+0x12>
  }
  return len;
 8001e22:	687b      	ldr	r3, [r7, #4]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_close>:

int _close(int file)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e54:	605a      	str	r2, [r3, #4]
  return 0;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_isatty>:

int _isatty(int file)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f005 f844 	bl	8006f50 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20010000 	.word	0x20010000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	20000650 	.word	0x20000650
 8001efc:	200007c0 	.word	0x200007c0

08001f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <SystemInit+0x90>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0a:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <SystemInit+0x90>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f28:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001f2c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f38:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <SystemInit+0x94>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f4a:	f023 0305 	bic.w	r3, r3, #5
 8001f4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <SystemInit+0x98>)
 8001f6c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	faf6fefb 	.word	0xfaf6fefb
 8001f98:	22041000 	.word	0x22041000

08001f9c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f9c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa0:	3304      	adds	r3, #4

08001fa2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001fa6:	d3f9      	bcc.n	8001f9c <CopyDataInit>
  bx lr
 8001fa8:	4770      	bx	lr

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001faa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001fac:	3004      	adds	r0, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001fae:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>
  bx lr
 8001fb2:	4770      	bx	lr

08001fb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fb4:	480f      	ldr	r0, [pc, #60]	@ (8001ff4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001fb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fb8:	f7ff ffa2 	bl	8001f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001fbc:	480e      	ldr	r0, [pc, #56]	@ (8001ff8 <LoopForever+0x8>)
 8001fbe:	490f      	ldr	r1, [pc, #60]	@ (8001ffc <LoopForever+0xc>)
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <LoopForever+0x10>)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f7ff ffed 	bl	8001fa2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001fc8:	480e      	ldr	r0, [pc, #56]	@ (8002004 <LoopForever+0x14>)
 8001fca:	490f      	ldr	r1, [pc, #60]	@ (8002008 <LoopForever+0x18>)
 8001fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800200c <LoopForever+0x1c>)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f7ff ffe7 	bl	8001fa2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001fd4:	480e      	ldr	r0, [pc, #56]	@ (8002010 <LoopForever+0x20>)
 8001fd6:	490f      	ldr	r1, [pc, #60]	@ (8002014 <LoopForever+0x24>)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f7ff ffe8 	bl	8001fae <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001fde:	4809      	ldr	r0, [pc, #36]	@ (8002004 <LoopForever+0x14>)
 8001fe0:	4909      	ldr	r1, [pc, #36]	@ (8002008 <LoopForever+0x18>)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f7ff ffe3 	bl	8001fae <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fe8:	f004 ffb8 	bl	8006f5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fec:	f7ff fb1d 	bl	800162a <main>

08001ff0 <LoopForever>:

LoopForever:
  b LoopForever
 8001ff0:	e7fe      	b.n	8001ff0 <LoopForever>
 8001ff2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001ff4:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8001ff8:	20000008 	.word	0x20000008
 8001ffc:	2000028c 	.word	0x2000028c
 8002000:	08009784 	.word	0x08009784
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002004:	20030000 	.word	0x20030000
 8002008:	20030000 	.word	0x20030000
 800200c:	08009a08 	.word	0x08009a08
  INIT_BSS _sbss, _ebss
 8002010:	20000290 	.word	0x20000290
 8002014:	200007bc 	.word	0x200007bc

08002018 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_IRQHandler>
	...

0800201c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <HAL_Init+0x3c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a0b      	ldr	r2, [pc, #44]	@ (8002058 <HAL_Init+0x3c>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002032:	2003      	movs	r0, #3
 8002034:	f001 f80a 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002038:	200f      	movs	r0, #15
 800203a:	f000 f80f 	bl	800205c <HAL_InitTick>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	e001      	b.n	800204e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800204a:	f7ff fd3e 	bl	8001aca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800204e:	79fb      	ldrb	r3, [r7, #7]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	58004000 	.word	0x58004000

0800205c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <HAL_InitTick+0x6c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d024      	beq.n	80020ba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002070:	f002 fd76 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <HAL_InitTick+0x6c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002080:	fbb3 f3f1 	udiv	r3, r3, r1
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f001 f812 	bl	80030b2 <HAL_SYSTICK_Config>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10f      	bne.n	80020b4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d809      	bhi.n	80020ae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209a:	2200      	movs	r2, #0
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	f04f 30ff 	mov.w	r0, #4294967295
 80020a2:	f000 ffde 	bl	8003062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a6:	4a09      	ldr	r2, [pc, #36]	@ (80020cc <HAL_InitTick+0x70>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e007      	b.n	80020be <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	e004      	b.n	80020be <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000044 	.word	0x20000044
 80020cc:	20000040 	.word	0x20000040

080020d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_IncTick+0x20>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_IncTick+0x24>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <HAL_IncTick+0x24>)
 80020e2:	6013      	str	r3, [r2, #0]
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000044 	.word	0x20000044
 80020f4:	20000654 	.word	0x20000654

080020f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_GetTick+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000654 	.word	0x20000654

08002110 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <HAL_GetTickPrio+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000040 	.word	0x20000040

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffe2 	bl	80020f8 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffd2 	bl	80020f8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000044 	.word	0x20000044

08002170 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3360      	adds	r3, #96	@ 0x60
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <LL_ADC_SetOffset+0x44>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	4313      	orrs	r3, r2
 8002208:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002210:	bf00      	nop
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	03fff000 	.word	0x03fff000

08002220 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3360      	adds	r3, #96	@ 0x60
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3360      	adds	r3, #96	@ 0x60
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	431a      	orrs	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3330      	adds	r3, #48	@ 0x30
 8002292:	461a      	mov	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0a1b      	lsrs	r3, r3, #8
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	211f      	movs	r1, #31
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	f003 011f 	and.w	r1, r3, #31
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	431a      	orrs	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80022ce:	bf00      	nop
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022da:	b480      	push	{r7}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3314      	adds	r3, #20
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	0e5b      	lsrs	r3, r3, #25
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0d1b      	lsrs	r3, r3, #20
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2107      	movs	r1, #7
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	0d1b      	lsrs	r3, r3, #20
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	431a      	orrs	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0318 	and.w	r3, r3, #24
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002354:	40d9      	lsrs	r1, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	400b      	ands	r3, r1
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	431a      	orrs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	0007ffff 	.word	0x0007ffff

08002378 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002388:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6093      	str	r3, [r2, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023b0:	d101      	bne.n	80023b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002400:	d101      	bne.n	8002406 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <LL_ADC_IsEnabled+0x18>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <LL_ADC_IsEnabled+0x1a>
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d101      	bne.n	8002452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b08      	cmp	r3, #8
 8002472:	d101      	bne.n	8002478 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e12e      	b.n	8002704 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fb0f 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff65 	bl	800239c <LL_ADC_IsDeepPowerDownEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff4b 	bl	8002378 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff80 	bl	80023ec <LL_ADC_IsInternalRegulatorEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff64 	bl	80023c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4b83      	ldr	r3, [pc, #524]	@ (800270c <HAL_ADC_Init+0x284>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	4a83      	ldr	r2, [pc, #524]	@ (8002710 <HAL_ADC_Init+0x288>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002510:	e002      	b.n	8002518 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff62 	bl	80023ec <LL_ADC_IsInternalRegulatorEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff73 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002554:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 80c7 	bne.w	80026f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80c3 	bne.w	80026f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002570:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002574:	f043 0202 	orr.w	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff47 	bl	8002414 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258c:	4861      	ldr	r0, [pc, #388]	@ (8002714 <HAL_ADC_Init+0x28c>)
 800258e:	f7ff ff41 	bl	8002414 <LL_ADC_IsEnabled>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4619      	mov	r1, r3
 800259e:	485e      	ldr	r0, [pc, #376]	@ (8002718 <HAL_ADC_Init+0x290>)
 80025a0:	f7ff fde6 	bl	8002170 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e5b      	ldrb	r3, [r3, #25]
 80025a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80025c4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	3b01      	subs	r3, #1
 80025dc:	045b      	lsls	r3, r3, #17
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	4b45      	ldr	r3, [pc, #276]	@ (800271c <HAL_ADC_Init+0x294>)
 8002608:	4013      	ands	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	430b      	orrs	r3, r1
 8002612:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff0e 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 800261e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff1b 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13d      	bne.n	80026ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d13a      	bne.n	80026ae <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800263c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002644:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002654:	f023 0302 	bic.w	r3, r3, #2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	430b      	orrs	r3, r1
 8002660:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002668:	2b01      	cmp	r3, #1
 800266a:	d118      	bne.n	800269e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800268e:	430a      	orrs	r2, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	e007      	b.n	80026ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10c      	bne.n	80026d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f023 010f 	bic.w	r1, r3, #15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80026ce:	e007      	b.n	80026e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020f 	bic.w	r2, r2, #15
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80026f0:	e007      	b.n	8002702 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002702:	7ffb      	ldrb	r3, [r7, #31]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000003c 	.word	0x2000003c
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	50040000 	.word	0x50040000
 8002718:	50040300 	.word	0x50040300
 800271c:	fff0c007 	.word	0xfff0c007

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0b6      	sub	sp, #216	@ 0xd8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e39f      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x762>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe73 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 8384 	bne.w	8002e64 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	f7ff fd8a 	bl	8002282 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fe61 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002778:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fe6d 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 8002786:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800278a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 81a6 	bne.w	8002ae0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 81a1 	bne.w	8002ae0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f7ff fd95 	bl	80022da <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	08db      	lsrs	r3, r3, #3
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d00a      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027e2:	f7ff fcf9 	bl	80021d8 <LL_ADC_SetOffset>
 80027e6:	e17b      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fd16 	bl	8002220 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <HAL_ADC_ConfigChannel+0xf4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fd0b 	bl	8002220 <LL_ADC_GetOffsetChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 021f 	and.w	r2, r3, #31
 8002812:	e01e      	b.n	8002852 <HAL_ADC_ConfigChannel+0x132>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fd00 	bl	8002220 <LL_ADC_GetOffsetChannel>
 8002820:	4603      	mov	r3, r0
 8002822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002836:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800283a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002842:	2320      	movs	r3, #32
 8002844:	e004      	b.n	8002850 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	461a      	mov	r2, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <HAL_ADC_ConfigChannel+0x14a>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0e9b      	lsrs	r3, r3, #26
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	e018      	b.n	800289c <HAL_ADC_ConfigChannel+0x17c>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800287e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002882:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e004      	b.n	800289c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fccf 	bl	800224c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fcb3 	bl	8002220 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <HAL_ADC_ConfigChannel+0x1ba>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fca8 	bl	8002220 <LL_ADC_GetOffsetChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	e01e      	b.n	8002918 <HAL_ADC_ConfigChannel+0x1f8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fc9d 	bl	8002220 <LL_ADC_GetOffsetChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002900:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e004      	b.n	8002916 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800290c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x210>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	e018      	b.n	8002962 <HAL_ADC_ConfigChannel+0x242>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002944:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800294c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e004      	b.n	8002962 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	429a      	cmp	r2, r3
 8002964:	d106      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2200      	movs	r2, #0
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fc6c 	bl	800224c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2102      	movs	r1, #2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fc50 	bl	8002220 <LL_ADC_GetOffsetChannel>
 8002980:	4603      	mov	r3, r0
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x280>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2102      	movs	r1, #2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fc45 	bl	8002220 <LL_ADC_GetOffsetChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	e01e      	b.n	80029de <HAL_ADC_ConfigChannel+0x2be>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fc3a 	bl	8002220 <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80029be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80029c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80029ce:	2320      	movs	r3, #32
 80029d0:	e004      	b.n	80029dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x2d6>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	e016      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x304>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002a16:	2320      	movs	r3, #32
 8002a18:	e004      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fc0b 	bl	800224c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fbef 	bl	8002220 <LL_ADC_GetOffsetChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x342>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2103      	movs	r1, #3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fbe4 	bl	8002220 <LL_ADC_GetOffsetChannel>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	f003 021f 	and.w	r2, r3, #31
 8002a60:	e017      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x372>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2103      	movs	r1, #3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fbd9 	bl	8002220 <LL_ADC_GetOffsetChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a7c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x38a>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	0e9b      	lsrs	r3, r3, #26
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	e011      	b.n	8002ace <HAL_ADC_ConfigChannel+0x3ae>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e003      	b.n	8002ace <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d106      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2103      	movs	r1, #3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fbb6 	bl	800224c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fc95 	bl	8002414 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 81c2 	bne.w	8002e76 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f7ff fc16 	bl	8002330 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a8e      	ldr	r2, [pc, #568]	@ (8002d44 <HAL_ADC_ConfigChannel+0x624>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	f040 8130 	bne.w	8002d70 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x418>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e019      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x44c>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e003      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2b09      	cmp	r3, #9
 8002b64:	bf94      	ite	ls
 8002b66:	2301      	movls	r3, #1
 8002b68:	2300      	movhi	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d079      	beq.n	8002c64 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x46c>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	069b      	lsls	r3, r3, #26
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b8a:	e015      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x498>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x4b8>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	e017      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x4e8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002be6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10a      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x50e>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	051b      	lsls	r3, r3, #20
 8002c2c:	e018      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x540>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c46:	2320      	movs	r3, #32
 8002c48:	e003      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c60:	430b      	orrs	r3, r1
 8002c62:	e080      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x560>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	3301      	adds	r3, #1
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c7e:	e015      	b.n	8002cac <HAL_ADC_ConfigChannel+0x58c>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	069b      	lsls	r3, r3, #26
 8002ca8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x5ac>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	e017      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x5dc>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	61fb      	str	r3, [r7, #28]
  return result;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e003      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x608>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b1e      	subs	r3, #30
 8002d20:	051b      	lsls	r3, r3, #20
 8002d22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	e01d      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x644>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	613b      	str	r3, [r7, #16]
  return result;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e005      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x630>
 8002d44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f003 021f 	and.w	r2, r3, #31
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b1e      	subs	r3, #30
 8002d5e:	051b      	lsls	r3, r3, #20
 8002d60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d64:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7ff fab5 	bl	80022da <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b45      	ldr	r3, [pc, #276]	@ (8002e8c <HAL_ADC_ConfigChannel+0x76c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d07c      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d7c:	4844      	ldr	r0, [pc, #272]	@ (8002e90 <HAL_ADC_ConfigChannel+0x770>)
 8002d7e:	f7ff fa1d 	bl	80021bc <LL_ADC_GetCommonPathInternalCh>
 8002d82:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d86:	4843      	ldr	r0, [pc, #268]	@ (8002e94 <HAL_ADC_ConfigChannel+0x774>)
 8002d88:	f7ff fb44 	bl	8002414 <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d15e      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a40      	ldr	r2, [pc, #256]	@ (8002e98 <HAL_ADC_ConfigChannel+0x778>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d127      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x6cc>
 8002d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d121      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a39      	ldr	r2, [pc, #228]	@ (8002e94 <HAL_ADC_ConfigChannel+0x774>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d161      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4834      	ldr	r0, [pc, #208]	@ (8002e90 <HAL_ADC_ConfigChannel+0x770>)
 8002dbe:	f7ff f9ea 	bl	8002196 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc2:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <HAL_ADC_ConfigChannel+0x77c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	4a35      	ldr	r2, [pc, #212]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x780>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002ddc:	e002      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f9      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dea:	e044      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x784>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d113      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x6fe>
 8002df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <HAL_ADC_ConfigChannel+0x774>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d134      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e14:	4619      	mov	r1, r3
 8002e16:	481e      	ldr	r0, [pc, #120]	@ (8002e90 <HAL_ADC_ConfigChannel+0x770>)
 8002e18:	f7ff f9bd 	bl	8002196 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e1c:	e02b      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x788>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d126      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
 8002e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d120      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a16      	ldr	r2, [pc, #88]	@ (8002e94 <HAL_ADC_ConfigChannel+0x774>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d11b      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e46:	4619      	mov	r1, r3
 8002e48:	4811      	ldr	r0, [pc, #68]	@ (8002e90 <HAL_ADC_ConfigChannel+0x770>)
 8002e4a:	f7ff f9a4 	bl	8002196 <LL_ADC_SetCommonPathInternalCh>
 8002e4e:	e012      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e62:	e008      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002e7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	37d8      	adds	r7, #216	@ 0xd8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	80080000 	.word	0x80080000
 8002e90:	50040300 	.word	0x50040300
 8002e94:	50040000 	.word	0x50040000
 8002e98:	c7520000 	.word	0xc7520000
 8002e9c:	2000003c 	.word	0x2000003c
 8002ea0:	053e2d63 	.word	0x053e2d63
 8002ea4:	cb840000 	.word	0xcb840000
 8002ea8:	80000001 	.word	0x80000001

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	@ (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	@ (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	@ 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f7ff ff8e 	bl	8002f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff29 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff40 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff90 	bl	8002fa0 <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5f 	bl	8002f4c <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff33 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa4 	bl	8003008 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80030da:	4b1c      	ldr	r3, [pc, #112]	@ (800314c <HAL_FLASH_Program+0x80>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_FLASH_Program+0x1a>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e02d      	b.n	8003142 <HAL_FLASH_Program+0x76>
 80030e6:	4b19      	ldr	r3, [pc, #100]	@ (800314c <HAL_FLASH_Program+0x80>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030ec:	4b17      	ldr	r3, [pc, #92]	@ (800314c <HAL_FLASH_Program+0x80>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030f6:	f000 f869 	bl	80031cc <FLASH_WaitForLastOperation>
 80030fa:	4603      	mov	r3, r0
 80030fc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11a      	bne.n	800313a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800310a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800310e:	68b8      	ldr	r0, [r7, #8]
 8003110:	f000 f8ca 	bl	80032a8 <FLASH_Program_DoubleWord>
 8003114:	e004      	b.n	8003120 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	68b8      	ldr	r0, [r7, #8]
 800311c:	f005 ffa0 	bl	8009060 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003120:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003124:	f000 f852 	bl	80031cc <FLASH_WaitForLastOperation>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <HAL_FLASH_Program+0x84>)
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	4906      	ldr	r1, [pc, #24]	@ (8003150 <HAL_FLASH_Program+0x84>)
 8003136:	4013      	ands	r3, r2
 8003138:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <HAL_FLASH_Program+0x80>)
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003140:	7dfb      	ldrb	r3, [r7, #23]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000658 	.word	0x20000658
 8003150:	58004000 	.word	0x58004000

08003154 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_FLASH_Unlock+0x38>)
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	da0b      	bge.n	800317e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_FLASH_Unlock+0x38>)
 8003168:	4a09      	ldr	r2, [pc, #36]	@ (8003190 <HAL_FLASH_Unlock+0x3c>)
 800316a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800316c:	4b07      	ldr	r3, [pc, #28]	@ (800318c <HAL_FLASH_Unlock+0x38>)
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_FLASH_Unlock+0x40>)
 8003170:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003172:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_FLASH_Unlock+0x38>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	da01      	bge.n	800317e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800317e:	79fb      	ldrb	r3, [r7, #7]
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	58004000 	.word	0x58004000
 8003190:	45670123 	.word	0x45670123
 8003194:	cdef89ab 	.word	0xcdef89ab

08003198 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80031a2:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_FLASH_Lock+0x30>)
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4a08      	ldr	r2, [pc, #32]	@ (80031c8 <HAL_FLASH_Lock+0x30>)
 80031a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031ac:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_FLASH_Lock+0x30>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db01      	blt.n	80031ba <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	58004000 	.word	0x58004000

080031cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7fe ff90 	bl	80020f8 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031da:	e009      	b.n	80031f0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80031dc:	f7fe ff8c 	bl	80020f8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d801      	bhi.n	80031f0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e053      	b.n	8003298 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fc:	d0ee      	beq.n	80031dc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80031fe:	4b28      	ldr	r3, [pc, #160]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 8003210:	2201      	movs	r2, #1
 8003212:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 8003220:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003224:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800322c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d307      	bcc.n	8003250 <FLASH_WaitForLastOperation+0x84>
 8003240:	4b17      	ldr	r3, [pc, #92]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800324a:	4915      	ldr	r1, [pc, #84]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	618b      	str	r3, [r1, #24]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <FLASH_WaitForLastOperation+0x98>
 800325a:	4a11      	ldr	r2, [pc, #68]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003262:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800326a:	4a0e      	ldr	r2, [pc, #56]	@ (80032a4 <FLASH_WaitForLastOperation+0xd8>)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e011      	b.n	8003298 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003274:	f7fe ff40 	bl	80020f8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	d801      	bhi.n	8003288 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e007      	b.n	8003298 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003288:	4b05      	ldr	r3, [pc, #20]	@ (80032a0 <FLASH_WaitForLastOperation+0xd4>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003290:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003294:	d0ee      	beq.n	8003274 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	58004000 	.word	0x58004000
 80032a4:	20000658 	.word	0x20000658

080032a8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80032b4:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <FLASH_Program_DoubleWord+0x48>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <FLASH_Program_DoubleWord+0x48>)
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80032c6:	f3bf 8f6f 	isb	sy
}
 80032ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80032cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	000a      	movs	r2, r1
 80032da:	2300      	movs	r3, #0
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	3104      	adds	r1, #4
 80032e0:	4613      	mov	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	58004000 	.word	0x58004000

080032f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_FLASHEx_Erase+0x9c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_FLASHEx_Erase+0x16>
 8003306:	2302      	movs	r3, #2
 8003308:	e03d      	b.n	8003386 <HAL_FLASHEx_Erase+0x92>
 800330a:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <HAL_FLASHEx_Erase+0x9c>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003310:	4b1f      	ldr	r3, [pc, #124]	@ (8003390 <HAL_FLASHEx_Erase+0x9c>)
 8003312:	2200      	movs	r2, #0
 8003314:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003316:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800331a:	f7ff ff57 	bl	80031cc <FLASH_WaitForLastOperation>
 800331e:	4603      	mov	r3, r0
 8003320:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d12a      	bne.n	800337e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d124      	bne.n	800337a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	e012      	b.n	8003366 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8003340:	68b8      	ldr	r0, [r7, #8]
 8003342:	f000 f827 	bl	8003394 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800334a:	f7ff ff3f 	bl	80031cc <FLASH_WaitForLastOperation>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	601a      	str	r2, [r3, #0]
          break;
 800335e:	e00a      	b.n	8003376 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3301      	adds	r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4413      	add	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3e4      	bcc.n	8003340 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8003376:	f000 f86f 	bl	8003458 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800337a:	f000 f825 	bl	80033c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <HAL_FLASHEx_Erase+0x9c>)
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]

  return status;
 8003384:	7bfb      	ldrb	r3, [r7, #15]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000658 	.word	0x20000658

08003394 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <FLASH_PageErase+0x30>)
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	4a06      	ldr	r2, [pc, #24]	@ (80033c4 <FLASH_PageErase+0x30>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	6153      	str	r3, [r2, #20]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	58004000 	.word	0x58004000

080033c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80033cc:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d8:	d117      	bne.n	800340a <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80033da:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1d      	ldr	r2, [pc, #116]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033e4:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b18      	ldr	r3, [pc, #96]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 80033f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033fc:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033fe:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a14      	ldr	r2, [pc, #80]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 8003404:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003408:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003416:	d117      	bne.n	8003448 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 800341e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003422:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 800342a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b08      	ldr	r3, [pc, #32]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a07      	ldr	r2, [pc, #28]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 8003436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800343a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a04      	ldr	r2, [pc, #16]	@ (8003454 <FLASH_FlushCaches+0x8c>)
 8003442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003446:	6013      	str	r3, [r2, #0]
  }
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	58004000 	.word	0x58004000

08003458 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <FLASH_AcknowledgePageErase+0x20>)
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	4a05      	ldr	r2, [pc, #20]	@ (8003478 <FLASH_AcknowledgePageErase+0x20>)
 8003462:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003466:	f023 0302 	bic.w	r3, r3, #2
 800346a:	6153      	str	r3, [r2, #20]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	58004000 	.word	0x58004000

0800347c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	e146      	b.n	800371a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4013      	ands	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8138 	beq.w	8003714 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d005      	beq.n	80034bc <HAL_GPIO_Init+0x40>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d130      	bne.n	800351e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034f2:	2201      	movs	r2, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 0201 	and.w	r2, r3, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b03      	cmp	r3, #3
 8003528:	d017      	beq.n	800355a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d123      	bne.n	80035ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	220f      	movs	r2, #15
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	08da      	lsrs	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3208      	adds	r2, #8
 80035a8:	6939      	ldr	r1, [r7, #16]
 80035aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	2203      	movs	r2, #3
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0203 	and.w	r2, r3, #3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8092 	beq.w	8003714 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80035f0:	4a51      	ldr	r2, [pc, #324]	@ (8003738 <HAL_GPIO_Init+0x2bc>)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800361a:	d013      	beq.n	8003644 <HAL_GPIO_Init+0x1c8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a47      	ldr	r2, [pc, #284]	@ (800373c <HAL_GPIO_Init+0x2c0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00d      	beq.n	8003640 <HAL_GPIO_Init+0x1c4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a46      	ldr	r2, [pc, #280]	@ (8003740 <HAL_GPIO_Init+0x2c4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_GPIO_Init+0x1c0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a45      	ldr	r2, [pc, #276]	@ (8003744 <HAL_GPIO_Init+0x2c8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_GPIO_Init+0x1bc>
 8003634:	2304      	movs	r3, #4
 8003636:	e006      	b.n	8003646 <HAL_GPIO_Init+0x1ca>
 8003638:	2307      	movs	r3, #7
 800363a:	e004      	b.n	8003646 <HAL_GPIO_Init+0x1ca>
 800363c:	2302      	movs	r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x1ca>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_GPIO_Init+0x1ca>
 8003644:	2300      	movs	r3, #0
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	f002 0203 	and.w	r2, r2, #3
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	4093      	lsls	r3, r2
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003656:	4938      	ldr	r1, [pc, #224]	@ (8003738 <HAL_GPIO_Init+0x2bc>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3302      	adds	r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003664:	4b38      	ldr	r3, [pc, #224]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003688:	4a2f      	ldr	r2, [pc, #188]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800368e:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036b2:	4a25      	ldr	r2, [pc, #148]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036b8:	4b23      	ldr	r3, [pc, #140]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036de:	4a1a      	ldr	r2, [pc, #104]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80036e6:	4b18      	ldr	r3, [pc, #96]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800370c:	4a0e      	ldr	r2, [pc, #56]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	f47f aeb1 	bne.w	800348c <HAL_GPIO_Init+0x10>
  }
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40010000 	.word	0x40010000
 800373c:	48000400 	.word	0x48000400
 8003740:	48000800 	.word	0x48000800
 8003744:	48001000 	.word	0x48001000
 8003748:	58000800 	.word	0x58000800

0800374c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	e001      	b.n	800376e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
 8003788:	4613      	mov	r3, r2
 800378a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800378c:	787b      	ldrb	r3, [r7, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003792:	887a      	ldrh	r2, [r7, #2]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003798:	e002      	b.n	80037a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037c2:	4a05      	ldr	r2, [pc, #20]	@ (80037d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fafc 	bl	8000dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	58000800 	.word	0x58000800

080037dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e08d      	b.n	800390a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe f9aa 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	@ 0x24
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800382c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800383c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	e006      	b.n	8003864 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003862:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d108      	bne.n	800387e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	e007      	b.n	800388e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800389c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b20      	cmp	r3, #32
 8003926:	d138      	bne.n	800399a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003932:	2302      	movs	r3, #2
 8003934:	e032      	b.n	800399c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2224      	movs	r2, #36	@ 0x24
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003964:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d139      	bne.n	8003a32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e033      	b.n	8003a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2224      	movs	r2, #36	@ 0x24
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	58000400 	.word	0x58000400

08003a60 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a72:	d101      	bne.n	8003a78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ad2:	d101      	bne.n	8003ad8 <LL_RCC_HSE_IsReady+0x18>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <LL_RCC_HSE_IsReady+0x1a>
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b14:	6013      	str	r3, [r2, #0]
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b32:	d101      	bne.n	8003b38 <LL_RCC_HSI_IsReady+0x18>
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <LL_RCC_HSI_IsReady+0x1a>
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d101      	bne.n	8003bca <LL_RCC_HSI48_IsReady+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <LL_RCC_HSI48_IsReady+0x1a>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c2a:	f043 0304 	orr.w	r3, r3, #4
 8003c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d101      	bne.n	8003c76 <LL_RCC_LSE_IsReady+0x18>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <LL_RCC_LSE_IsReady+0x1a>
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d101      	bne.n	8003cde <LL_RCC_LSI1_IsReady+0x18>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <LL_RCC_LSI1_IsReady+0x1a>
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d101      	bne.n	8003d46 <LL_RCC_LSI2_IsReady+0x18>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_RCC_LSI2_IsReady+0x1a>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d8e:	f043 0301 	orr.w	r3, r3, #1
 8003d92:	6013      	str	r3, [r2, #0]
}
 8003d94:	bf00      	nop
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6013      	str	r3, [r2, #0]
}
 8003db2:	bf00      	nop
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d101      	bne.n	8003dd2 <LL_RCC_MSI_IsReady+0x16>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <LL_RCC_MSI_IsReady+0x18>
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e16:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2bb0      	cmp	r3, #176	@ 0xb0
 8003e1c:	d901      	bls.n	8003e22 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003e1e:	23b0      	movs	r3, #176	@ 0xb0
 8003e20:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003e22:	687b      	ldr	r3, [r7, #4]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 0203 	bic.w	r2, r3, #3
 8003e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003e82:	b480      	push	{r7}
 8003e84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ece:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ed2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003efe:	f023 020f 	bic.w	r2, r3, #15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004006:	d101      	bne.n	800400c <LL_RCC_PLL_IsReady+0x18>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <LL_RCC_PLL_IsReady+0x1a>
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800404e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0303 	and.w	r3, r3, #3
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d101      	bne.n	8004092 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b2:	d101      	bne.n	80040b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d8:	d101      	bne.n	80040de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040fc:	d101      	bne.n	8004102 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800411c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004120:	d101      	bne.n	8004126 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b08d      	sub	sp, #52	@ 0x34
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e35c      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 808d 	beq.w	800426e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004154:	f7ff fe95 	bl	8003e82 <LL_RCC_GetSysClkSource>
 8004158:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800415a:	f7ff ff82 	bl	8004062 <LL_RCC_PLL_GetMainSource>
 800415e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_RCC_OscConfig+0x3e>
 8004166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d147      	bne.n	80041fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	2b01      	cmp	r3, #1
 8004170:	d144      	bne.n	80041fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e340      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004182:	f7ff fe40 	bl	8003e06 <LL_RCC_MSI_GetRange>
 8004186:	4603      	mov	r3, r0
 8004188:	429c      	cmp	r4, r3
 800418a:	d914      	bls.n	80041b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fd0f 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e32f      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fe1a 	bl	8003dde <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fe3e 	bl	8003e30 <LL_RCC_MSI_SetCalibTrimming>
 80041b4:	e013      	b.n	80041de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fe0f 	bl	8003dde <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fe33 	bl	8003e30 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fcf0 	bl	8004bb4 <RCC_SetFlashLatencyFromMSIRange>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e310      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041de:	f000 fcbf 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4aa4      	ldr	r2, [pc, #656]	@ (8004478 <HAL_RCC_OscConfig+0x344>)
 80041e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041e8:	4ba4      	ldr	r3, [pc, #656]	@ (800447c <HAL_RCC_OscConfig+0x348>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fd ff35 	bl	800205c <HAL_InitTick>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d039      	beq.n	800426c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e301      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01e      	beq.n	8004242 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004204:	f7ff fdbc 	bl	8003d80 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004208:	f7fd ff76 	bl	80020f8 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004210:	f7fd ff72 	bl	80020f8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e2ee      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004222:	f7ff fdcb 	bl	8003dbc <LL_RCC_MSI_IsReady>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f1      	beq.n	8004210 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fdd4 	bl	8003dde <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fdf8 	bl	8003e30 <LL_RCC_MSI_SetCalibTrimming>
 8004240:	e015      	b.n	800426e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004242:	f7ff fdac 	bl	8003d9e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004246:	f7fd ff57 	bl	80020f8 <HAL_GetTick>
 800424a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800424e:	f7fd ff53 	bl	80020f8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e2cf      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004260:	f7ff fdac 	bl	8003dbc <LL_RCC_MSI_IsReady>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f1      	bne.n	800424e <HAL_RCC_OscConfig+0x11a>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800426c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d047      	beq.n	800430a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	f7ff fe02 	bl	8003e82 <LL_RCC_GetSysClkSource>
 800427e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004280:	f7ff feef 	bl	8004062 <LL_RCC_PLL_GetMainSource>
 8004284:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d005      	beq.n	8004298 <HAL_RCC_OscConfig+0x164>
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d108      	bne.n	80042a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d105      	bne.n	80042a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d134      	bne.n	800430a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e2ad      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d102      	bne.n	80042b4 <HAL_RCC_OscConfig+0x180>
 80042ae:	f7ff fbe9 	bl	8003a84 <LL_RCC_HSE_Enable>
 80042b2:	e001      	b.n	80042b8 <HAL_RCC_OscConfig+0x184>
 80042b4:	f7ff fbf5 	bl	8003aa2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fd ff1a 	bl	80020f8 <HAL_GetTick>
 80042c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fd ff16 	bl	80020f8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	@ 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e292      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042da:	f7ff fbf1 	bl	8003ac0 <LL_RCC_HSE_IsReady>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f1      	beq.n	80042c8 <HAL_RCC_OscConfig+0x194>
 80042e4:	e011      	b.n	800430a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fd ff07 	bl	80020f8 <HAL_GetTick>
 80042ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ee:	f7fd ff03 	bl	80020f8 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b64      	cmp	r3, #100	@ 0x64
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e27f      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004300:	f7ff fbde 	bl	8003ac0 <LL_RCC_HSE_IsReady>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f1      	bne.n	80042ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004316:	f7ff fdb4 	bl	8003e82 <LL_RCC_GetSysClkSource>
 800431a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800431c:	f7ff fea1 	bl	8004062 <LL_RCC_PLL_GetMainSource>
 8004320:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d005      	beq.n	8004334 <HAL_RCC_OscConfig+0x200>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d10e      	bne.n	800434c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d10b      	bne.n	800434c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e25f      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff fbfd 	bl	8003b44 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800434a:	e031      	b.n	80043b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d019      	beq.n	8004388 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	f7ff fbc6 	bl	8003ae4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd fece 	bl	80020f8 <HAL_GetTick>
 800435c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fd feca 	bl	80020f8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e246      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004372:	f7ff fbd5 	bl	8003b20 <LL_RCC_HSI_IsReady>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f1      	beq.n	8004360 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fbdf 	bl	8003b44 <LL_RCC_HSI_SetCalibTrimming>
 8004386:	e013      	b.n	80043b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004388:	f7ff fbbb 	bl	8003b02 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd feb4 	bl	80020f8 <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd feb0 	bl	80020f8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e22c      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043a6:	f7ff fbbb 	bl	8003b20 <LL_RCC_HSI_IsReady>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f1      	bne.n	8004394 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80a3 	beq.w	8004510 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d076      	beq.n	80044c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d046      	beq.n	800446c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80043de:	f7ff fc72 	bl	8003cc6 <LL_RCC_LSI1_IsReady>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d113      	bne.n	8004410 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80043e8:	f7ff fc4b 	bl	8003c82 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043ec:	f7fd fe84 	bl	80020f8 <HAL_GetTick>
 80043f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043f4:	f7fd fe80 	bl	80020f8 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e1fc      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004406:	f7ff fc5e 	bl	8003cc6 <LL_RCC_LSI1_IsReady>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f1      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004410:	f7ff fc6b 	bl	8003cea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd fe70 	bl	80020f8 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800441c:	f7fd fe6c 	bl	80020f8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b03      	cmp	r3, #3
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1e8      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800442e:	f7ff fc7e 	bl	8003d2e <LL_RCC_LSI2_IsReady>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f1      	beq.n	800441c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fc88 	bl	8003d52 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004442:	f7ff fc2f 	bl	8003ca4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fd fe57 	bl	80020f8 <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800444e:	f7fd fe53 	bl	80020f8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1cf      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004460:	f7ff fc31 	bl	8003cc6 <LL_RCC_LSI1_IsReady>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f1      	bne.n	800444e <HAL_RCC_OscConfig+0x31a>
 800446a:	e051      	b.n	8004510 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800446c:	f7ff fc09 	bl	8003c82 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd fe42 	bl	80020f8 <HAL_GetTick>
 8004474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004476:	e00c      	b.n	8004492 <HAL_RCC_OscConfig+0x35e>
 8004478:	2000003c 	.word	0x2000003c
 800447c:	20000040 	.word	0x20000040
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004480:	f7fd fe3a 	bl	80020f8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1b6      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004492:	f7ff fc18 	bl	8003cc6 <LL_RCC_LSI1_IsReady>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f1      	beq.n	8004480 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800449c:	f7ff fc36 	bl	8003d0c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044a2:	f7fd fe29 	bl	80020f8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a5      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044b4:	f7ff fc3b 	bl	8003d2e <LL_RCC_LSI2_IsReady>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f1      	bne.n	80044a2 <HAL_RCC_OscConfig+0x36e>
 80044be:	e027      	b.n	8004510 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044c0:	f7ff fc24 	bl	8003d0c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fe18 	bl	80020f8 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044cc:	f7fd fe14 	bl	80020f8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e190      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044de:	f7ff fc26 	bl	8003d2e <LL_RCC_LSI2_IsReady>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f1      	bne.n	80044cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80044e8:	f7ff fbdc 	bl	8003ca4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd fe04 	bl	80020f8 <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044f4:	f7fd fe00 	bl	80020f8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e17c      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004506:	f7ff fbde 	bl	8003cc6 <LL_RCC_LSI1_IsReady>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f1      	bne.n	80044f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	d05b      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451c:	4ba7      	ldr	r3, [pc, #668]	@ (80047bc <HAL_RCC_OscConfig+0x688>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d114      	bne.n	8004552 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004528:	f7ff fa8a 	bl	8003a40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452c:	f7fd fde4 	bl	80020f8 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004534:	f7fd fde0 	bl	80020f8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e15c      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004546:	4b9d      	ldr	r3, [pc, #628]	@ (80047bc <HAL_RCC_OscConfig+0x688>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_RCC_OscConfig+0x42c>
 800455a:	f7ff fb3c 	bl	8003bd6 <LL_RCC_LSE_Enable>
 800455e:	e00c      	b.n	800457a <HAL_RCC_OscConfig+0x446>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d104      	bne.n	8004572 <HAL_RCC_OscConfig+0x43e>
 8004568:	f7ff fb57 	bl	8003c1a <LL_RCC_LSE_EnableBypass>
 800456c:	f7ff fb33 	bl	8003bd6 <LL_RCC_LSE_Enable>
 8004570:	e003      	b.n	800457a <HAL_RCC_OscConfig+0x446>
 8004572:	f7ff fb41 	bl	8003bf8 <LL_RCC_LSE_Disable>
 8004576:	f7ff fb61 	bl	8003c3c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fd fdb9 	bl	80020f8 <HAL_GetTick>
 8004586:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fd fdb5 	bl	80020f8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e12f      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 80045a0:	f7ff fb5d 	bl	8003c5e <LL_RCC_LSE_IsReady>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ef      	beq.n	800458a <HAL_RCC_OscConfig+0x456>
 80045aa:	e013      	b.n	80045d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fd fda4 	bl	80020f8 <HAL_GetTick>
 80045b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fd fda0 	bl	80020f8 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e11a      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 80045ca:	f7ff fb48 	bl	8003c5e <LL_RCC_LSE_IsReady>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ef      	bne.n	80045b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02c      	beq.n	800463a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d014      	beq.n	8004612 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045e8:	f7ff fac1 	bl	8003b6e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd fd84 	bl	80020f8 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045f4:	f7fd fd80 	bl	80020f8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0fc      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004606:	f7ff fad4 	bl	8003bb2 <LL_RCC_HSI48_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f1      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4c0>
 8004610:	e013      	b.n	800463a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004612:	f7ff fabd 	bl	8003b90 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fd fd6f 	bl	80020f8 <HAL_GetTick>
 800461a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800461e:	f7fd fd6b 	bl	80020f8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0e7      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004630:	f7ff fabf 	bl	8003bb2 <LL_RCC_HSI48_IsReady>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f1      	bne.n	800461e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80dd 	beq.w	80047fe <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004644:	f7ff fc1d 	bl	8003e82 <LL_RCC_GetSysClkSource>
 8004648:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800464a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	2b02      	cmp	r3, #2
 8004658:	f040 80a6 	bne.w	80047a8 <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0203 	and.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004666:	429a      	cmp	r2, r3
 8004668:	d123      	bne.n	80046b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d11c      	bne.n	80046b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d114      	bne.n	80046b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d10d      	bne.n	80046b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d054      	beq.n	800475c <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b0c      	cmp	r3, #12
 80046b6:	d04f      	beq.n	8004758 <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046b8:	f7ff fc8d 	bl	8003fd6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046bc:	f7fd fd1c 	bl	80020f8 <HAL_GetTick>
 80046c0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd fd18 	bl	80020f8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e094      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ef      	bne.n	80046c4 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b35      	ldr	r3, [pc, #212]	@ (80047c0 <HAL_RCC_OscConfig+0x68c>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046fc:	0212      	lsls	r2, r2, #8
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004704:	4311      	orrs	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004710:	430a      	orrs	r2, r1
 8004712:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800471a:	f7ff fc4d 	bl	8003fb8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800472e:	f7fd fce3 	bl	80020f8 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fd fcdf 	bl	80020f8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e05b      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ef      	beq.n	8004736 <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004756:	e052      	b.n	80047fe <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e051      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d149      	bne.n	80047fe <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800476a:	f7ff fc25 	bl	8003fb8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800477e:	f7fd fcbb 	bl	80020f8 <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd fcb7 	bl	80020f8 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e033      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ef      	beq.n	8004786 <HAL_RCC_OscConfig+0x652>
 80047a6:	e02a      	b.n	80047fe <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d025      	beq.n	80047fa <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ae:	f7ff fc12 	bl	8003fd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd fca1 	bl	80020f8 <HAL_GetTick>
 80047b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b8:	e00d      	b.n	80047d6 <HAL_RCC_OscConfig+0x6a2>
 80047ba:	bf00      	nop
 80047bc:	58000400 	.word	0x58000400
 80047c0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd fc98 	bl	80020f8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e014      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ef      	bne.n	80047c4 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60d3      	str	r3, [r2, #12]
 80047f8:	e001      	b.n	80047fe <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3734      	adds	r7, #52	@ 0x34
 8004804:	46bd      	mov	sp, r7
 8004806:	bd90      	pop	{r4, r7, pc}

08004808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e12d      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b98      	ldr	r3, [pc, #608]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d91b      	bls.n	8004862 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b95      	ldr	r3, [pc, #596]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	4993      	ldr	r1, [pc, #588]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483a:	f7fd fc5d 	bl	80020f8 <HAL_GetTick>
 800483e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004840:	e008      	b.n	8004854 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004842:	f7fd fc59 	bl	80020f8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e111      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004854:	4b8a      	ldr	r3, [pc, #552]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d1ef      	bne.n	8004842 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff fb11 	bl	8003e9a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004878:	f7fd fc3e 	bl	80020f8 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004880:	f7fd fc3a 	bl	80020f8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0f2      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004892:	f7ff fbf2 	bl	800407a <LL_RCC_IsActiveFlag_HPRE>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f1      	beq.n	8004880 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d016      	beq.n	80048d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fb08 	bl	8003ec2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048b2:	f7fd fc21 	bl	80020f8 <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ba:	f7fd fc1d 	bl	80020f8 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0d5      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048cc:	f7ff fbe7 	bl	800409e <LL_RCC_IsActiveFlag_C2HPRE>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f1      	beq.n	80048ba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d016      	beq.n	8004910 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fb01 	bl	8003eee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048ec:	f7fd fc04 	bl	80020f8 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048f4:	f7fd fc00 	bl	80020f8 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0b8      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004906:	f7ff fbdd 	bl	80040c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f1      	beq.n	80048f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d016      	beq.n	800494a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fafb 	bl	8003f1c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004926:	f7fd fbe7 	bl	80020f8 <HAL_GetTick>
 800492a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800492e:	f7fd fbe3 	bl	80020f8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e09b      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004940:	f7ff fbd3 	bl	80040ea <LL_RCC_IsActiveFlag_PPRE1>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f1      	beq.n	800492e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d017      	beq.n	8004986 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff faf1 	bl	8003f44 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004962:	f7fd fbc9 	bl	80020f8 <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800496a:	f7fd fbc5 	bl	80020f8 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e07d      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800497c:	f7ff fbc7 	bl	800410e <LL_RCC_IsActiveFlag_PPRE2>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f1      	beq.n	800496a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d043      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800499a:	f7ff f891 	bl	8003ac0 <LL_RCC_HSE_IsReady>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11e      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e067      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d106      	bne.n	80049be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80049b0:	f7ff fb20 	bl	8003ff4 <LL_RCC_PLL_IsReady>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d113      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e05c      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80049c6:	f7ff f9f9 	bl	8003dbc <LL_RCC_MSI_IsReady>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e051      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80049d4:	f7ff f8a4 	bl	8003b20 <LL_RCC_HSI_IsReady>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e04a      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fa37 	bl	8003e5a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ec:	f7fd fb84 	bl	80020f8 <HAL_GetTick>
 80049f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f4:	f7fd fb80 	bl	80020f8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e036      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	f7ff fa3a 	bl	8003e82 <LL_RCC_GetSysClkSource>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d1ec      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1a:	4b19      	ldr	r3, [pc, #100]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d21b      	bcs.n	8004a60 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 0207 	bic.w	r2, r3, #7
 8004a30:	4913      	ldr	r1, [pc, #76]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fd fb5e 	bl	80020f8 <HAL_GetTick>
 8004a3c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a40:	f7fd fb5a 	bl	80020f8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e012      	b.n	8004a78 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <HAL_RCC_ClockConfig+0x278>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1ef      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a60:	f000 f87e 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004a64:	4603      	mov	r3, r0
 8004a66:	4a07      	ldr	r2, [pc, #28]	@ (8004a84 <HAL_RCC_ClockConfig+0x27c>)
 8004a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a6a:	f7fd fb51 	bl	8002110 <HAL_GetTickPrio>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fd faf3 	bl	800205c <HAL_InitTick>
 8004a76:	4603      	mov	r3, r0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	58004000 	.word	0x58004000
 8004a84:	2000003c 	.word	0x2000003c

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8e:	f7ff f9f8 	bl	8003e82 <LL_RCC_GetSysClkSource>
 8004a92:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a9a:	f7ff f9b4 	bl	8003e06 <LL_RCC_MSI_GetRange>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e04b      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d102      	bne.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ab6:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e045      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ac2:	f7fe ffcd 	bl	8003a60 <LL_RCC_HSE_IsEnabledDiv2>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004acc:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e03a      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ad2:	4b22      	ldr	r3, [pc, #136]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e037      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004ad8:	f7ff fac3 	bl	8004062 <LL_RCC_PLL_GetMainSource>
 8004adc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d003      	beq.n	8004aec <HAL_RCC_GetSysClockFreq+0x64>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCC_GetSysClockFreq+0x6a>
 8004aea:	e00d      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aee:	60bb      	str	r3, [r7, #8]
        break;
 8004af0:	e015      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004af2:	f7fe ffb5 	bl	8003a60 <LL_RCC_HSE_IsEnabledDiv2>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004afc:	4b16      	ldr	r3, [pc, #88]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004afe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b00:	e00d      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b02:	4b16      	ldr	r3, [pc, #88]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b04:	60bb      	str	r3, [r7, #8]
        break;
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b08:	f7ff f97d 	bl	8003e06 <LL_RCC_MSI_GetRange>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	4a0f      	ldr	r2, [pc, #60]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	60bb      	str	r3, [r7, #8]
        break;
 8004b1c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b1e:	f7ff fa7b 	bl	8004018 <LL_RCC_PLL_GetN>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	fb03 f402 	mul.w	r4, r3, r2
 8004b2a:	f7ff fa8e 	bl	800404a <LL_RCC_PLL_GetDivider>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	3301      	adds	r3, #1
 8004b34:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b38:	f7ff fa7b 	bl	8004032 <LL_RCC_PLL_GetR>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	0f5b      	lsrs	r3, r3, #29
 8004b40:	3301      	adds	r3, #1
 8004b42:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b46:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}
 8004b52:	bf00      	nop
 8004b54:	08009394 	.word	0x08009394
 8004b58:	00f42400 	.word	0x00f42400
 8004b5c:	01e84800 	.word	0x01e84800

08004b60 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b60:	b598      	push	{r3, r4, r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b64:	f7ff ff90 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004b68:	4604      	mov	r4, r0
 8004b6a:	f7ff f9ff 	bl	8003f6c <LL_RCC_GetAHBPrescaler>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	4a03      	ldr	r2, [pc, #12]	@ (8004b84 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd98      	pop	{r3, r4, r7, pc}
 8004b84:	08009334 	.word	0x08009334

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b598      	push	{r3, r4, r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004b8c:	f7ff ffe8 	bl	8004b60 <HAL_RCC_GetHCLKFreq>
 8004b90:	4604      	mov	r4, r0
 8004b92:	f7ff fa05 	bl	8003fa0 <LL_RCC_GetAPB2Prescaler>
 8004b96:	4603      	mov	r3, r0
 8004b98:	0adb      	lsrs	r3, r3, #11
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	4a04      	ldr	r2, [pc, #16]	@ (8004bb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd98      	pop	{r3, r4, r7, pc}
 8004bb0:	08009374 	.word	0x08009374

08004bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2bb0      	cmp	r3, #176	@ 0xb0
 8004bc0:	d903      	bls.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004bc2:	4b14      	ldr	r3, [pc, #80]	@ (8004c14 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e007      	b.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	4a10      	ldr	r2, [pc, #64]	@ (8004c14 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8004bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bda:	f7ff f9d3 	bl	8003f84 <LL_RCC_GetAHB4Prescaler>
 8004bde:	4603      	mov	r3, r0
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	4a0c      	ldr	r2, [pc, #48]	@ (8004c18 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4a09      	ldr	r2, [pc, #36]	@ (8004c1c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	0c9b      	lsrs	r3, r3, #18
 8004bfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f80c 	bl	8004c20 <RCC_SetFlashLatency>
 8004c08:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	08009394 	.word	0x08009394
 8004c18:	08009334 	.word	0x08009334
 8004c1c:	431bde83 	.word	0x431bde83

08004c20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b08f      	sub	sp, #60	@ 0x3c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <RCC_SetFlashLatency+0x9c>)
 8004c2c:	f107 041c 	add.w	r4, r7, #28
 8004c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <RCC_SetFlashLatency+0xa0>)
 8004c38:	f107 040c 	add.w	r4, r7, #12
 8004c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c42:	2300      	movs	r3, #0
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c4a:	e013      	b.n	8004c74 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	3338      	adds	r3, #56	@ 0x38
 8004c52:	443b      	add	r3, r7
 8004c54:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d807      	bhi.n	8004c6e <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3338      	adds	r3, #56	@ 0x38
 8004c64:	443b      	add	r3, r7
 8004c66:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8004c6c:	e005      	b.n	8004c7a <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	3301      	adds	r3, #1
 8004c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d9e8      	bls.n	8004c4c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <RCC_SetFlashLatency+0xa4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0207 	bic.w	r2, r3, #7
 8004c82:	4910      	ldr	r1, [pc, #64]	@ (8004cc4 <RCC_SetFlashLatency+0xa4>)
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c8a:	f7fd fa35 	bl	80020f8 <HAL_GetTick>
 8004c8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004c90:	e008      	b.n	8004ca4 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c92:	f7fd fa31 	bl	80020f8 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e007      	b.n	8004cb4 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004ca4:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <RCC_SetFlashLatency+0xa4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d1ef      	bne.n	8004c92 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	373c      	adds	r7, #60	@ 0x3c
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd90      	pop	{r4, r7, pc}
 8004cbc:	080092d8 	.word	0x080092d8
 8004cc0:	080092e8 	.word	0x080092e8
 8004cc4:	58004000 	.word	0x58004000

08004cc8 <LL_RCC_LSE_IsEnabled>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d101      	bne.n	8004ce0 <LL_RCC_LSE_IsEnabled+0x18>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e000      	b.n	8004ce2 <LL_RCC_LSE_IsEnabled+0x1a>
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_RCC_LSE_IsReady>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d101      	bne.n	8004d04 <LL_RCC_LSE_IsReady+0x18>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <LL_RCC_LSE_IsReady+0x1a>
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_RCC_SetRFWKPClockSource>:
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_SetUSARTClockSource>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f023 0203 	bic.w	r2, r3, #3
 8004d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_RCC_SetI2CClockSource>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004d8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <LL_RCC_SetLPTIMClockSource>:
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	43db      	mvns	r3, r3
 8004dba:	401a      	ands	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_RCC_SetRNGClockSource>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_SetCLK48ClockSource>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_SetADCClockSource>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_SetRTCClockSource>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_RCC_GetRTCClockSource>:
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_ForceBackupDomainReset>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004eda:	bf00      	nop
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004eec:	2300      	movs	r3, #0
 8004eee:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d046      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004f00:	f7ff ffc1 	bl	8004e86 <LL_RCC_GetRTCClockSource>
 8004f04:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d03c      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f10:	f7fe fd96 	bl	8003a40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff ff9b 	bl	8004e5a <LL_RCC_SetRTCClockSource>
 8004f24:	e02e      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004f30:	f7ff ffb6 	bl	8004ea0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004f34:	f7ff ffc5 	bl	8004ec2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004f46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004f50:	f7ff feba 	bl	8004cc8 <LL_RCC_LSE_IsEnabled>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d114      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f5a:	f7fd f8cd 	bl	80020f8 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f60:	e00b      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fd f8c9 	bl	80020f8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d902      	bls.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	77fb      	strb	r3, [r7, #31]
              break;
 8004f78:	e004      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004f7a:	f7ff feb7 	bl	8004cec <LL_RCC_LSE_IsReady>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d1ee      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004f84:	7ffb      	ldrb	r3, [r7, #31]
 8004f86:	77bb      	strb	r3, [r7, #30]
 8004f88:	e001      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8a:	7ffb      	ldrb	r3, [r7, #31]
 8004f8c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fecc 	bl	8004d3c <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fef4 	bl	8004da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff fee9 	bl	8004da2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fec1 	bl	8004d68 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02b      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffa:	d008      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005004:	d003      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fedf 	bl	8004dd6 <LL_RCC_SetRNGClockSource>
 8005018:	e00a      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	2000      	movs	r0, #0
 8005026:	f7ff fed6 	bl	8004dd6 <LL_RCC_SetRNGClockSource>
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fee9 	bl	8004e02 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005038:	d107      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800503a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005044:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005048:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005052:	2b00      	cmp	r3, #0
 8005054:	d011      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fee7 	bl	8004e2e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005068:	d107      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800506a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005078:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fe40 	bl	8004d10 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005090:	7fbb      	ldrb	r3, [r7, #30]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e049      	b.n	8005140 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fc fd93 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3304      	adds	r3, #4
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 f9bd 	bl	8005458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d001      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e036      	b.n	80051ce <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <HAL_TIM_Base_Start_IT+0x94>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x44>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518a:	d115      	bne.n	80051b8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	4b13      	ldr	r3, [pc, #76]	@ (80051e0 <HAL_TIM_Base_Start_IT+0x98>)
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d015      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x82>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a4:	d011      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	e008      	b.n	80051ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e000      	b.n	80051cc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	00010007 	.word	0x00010007

080051e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0202 	mvn.w	r2, #2
 8005218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8f3 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8e5 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f8f6 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d020      	beq.n	8005294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0204 	mvn.w	r2, #4
 8005264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8cd 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005280:	e005      	b.n	800528e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8bf 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f8d0 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d020      	beq.n	80052e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01b      	beq.n	80052e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8a7 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f899 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8aa 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d020      	beq.n	800532c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01b      	beq.n	800532c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0210 	mvn.w	r2, #16
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2208      	movs	r2, #8
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f881 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f873 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f884 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0201 	mvn.w	r2, #1
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f851 	bl	80053f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f8e1 	bl	8005540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8d9 	bl	8005554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00c      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f83e 	bl	8005442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0220 	mvn.w	r2, #32
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8a1 	bl	800552c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a2d      	ldr	r2, [pc, #180]	@ (8005520 <TIM_Base_SetConfig+0xc8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x20>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a24      	ldr	r2, [pc, #144]	@ (8005520 <TIM_Base_SetConfig+0xc8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0x52>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0x52>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a21      	ldr	r2, [pc, #132]	@ (8005524 <TIM_Base_SetConfig+0xcc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0x52>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a20      	ldr	r2, [pc, #128]	@ (8005528 <TIM_Base_SetConfig+0xd0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a10      	ldr	r2, [pc, #64]	@ (8005520 <TIM_Base_SetConfig+0xc8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005524 <TIM_Base_SetConfig+0xcc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_Base_SetConfig+0x9a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a0e      	ldr	r2, [pc, #56]	@ (8005528 <TIM_Base_SetConfig+0xd0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d103      	bne.n	80054fa <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f043 0204 	orr.w	r2, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	601a      	str	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <LL_RCC_GetUSARTClockSource>:
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005574:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4013      	ands	r3, r2
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e042      	b.n	8005620 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fc fb4d 	bl	8001c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2224      	movs	r2, #36	@ 0x24
 80055b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9f2 	bl	80059bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f8b3 	bl	8005744 <UART_SetConfig>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e01b      	b.n	8005620 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa71 	bl	8005b00 <UART_CheckIdleState>
 800561e:	4603      	mov	r3, r0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	@ 0x28
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	2b20      	cmp	r3, #32
 8005640:	d17b      	bne.n	800573a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_UART_Transmit+0x26>
 8005648:	88fb      	ldrh	r3, [r7, #6]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e074      	b.n	800573c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2221      	movs	r2, #33	@ 0x21
 800565e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005662:	f7fc fd49 	bl	80020f8 <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005680:	d108      	bne.n	8005694 <HAL_UART_Transmit+0x6c>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	e003      	b.n	800569c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800569c:	e030      	b.n	8005700 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	@ 0x80
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fad3 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e03d      	b.n	800573c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	3302      	adds	r3, #2
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e007      	b.n	80056ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	781a      	ldrb	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	3301      	adds	r3, #1
 80056ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1c8      	bne.n	800569e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	2140      	movs	r1, #64	@ 0x40
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa9c 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e006      	b.n	800573c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	e000      	b.n	800573c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
  }
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8f      	ldr	r3, [pc, #572]	@ (80059ac <UART_SetConfig+0x268>)
 8005770:	4013      	ands	r3, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	430b      	orrs	r3, r1
 800577a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80057ac:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6812      	ldr	r2, [r2, #0]
 80057b4:	6979      	ldr	r1, [r7, #20]
 80057b6:	430b      	orrs	r3, r1
 80057b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	f023 010f 	bic.w	r1, r3, #15
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a76      	ldr	r2, [pc, #472]	@ (80059b0 <UART_SetConfig+0x26c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d11f      	bne.n	800581a <UART_SetConfig+0xd6>
 80057da:	2003      	movs	r0, #3
 80057dc:	f7ff fec4 	bl	8005568 <LL_RCC_GetUSARTClockSource>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d816      	bhi.n	8005814 <UART_SetConfig+0xd0>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <UART_SetConfig+0xa8>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005809 	.word	0x08005809
 80057f4:	08005803 	.word	0x08005803
 80057f8:	0800580f 	.word	0x0800580f
 80057fc:	2301      	movs	r3, #1
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0xda>
 8005802:	2302      	movs	r3, #2
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e00a      	b.n	800581e <UART_SetConfig+0xda>
 8005808:	2304      	movs	r3, #4
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e007      	b.n	800581e <UART_SetConfig+0xda>
 800580e:	2308      	movs	r3, #8
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e004      	b.n	800581e <UART_SetConfig+0xda>
 8005814:	2310      	movs	r3, #16
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e001      	b.n	800581e <UART_SetConfig+0xda>
 800581a:	2310      	movs	r3, #16
 800581c:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005826:	d15e      	bne.n	80058e6 <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005828:	7ffb      	ldrb	r3, [r7, #31]
 800582a:	3b01      	subs	r3, #1
 800582c:	2b07      	cmp	r3, #7
 800582e:	d822      	bhi.n	8005876 <UART_SetConfig+0x132>
 8005830:	a201      	add	r2, pc, #4	@ (adr r2, 8005838 <UART_SetConfig+0xf4>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005859 	.word	0x08005859
 800583c:	08005861 	.word	0x08005861
 8005840:	08005877 	.word	0x08005877
 8005844:	08005867 	.word	0x08005867
 8005848:	08005877 	.word	0x08005877
 800584c:	08005877 	.word	0x08005877
 8005850:	08005877 	.word	0x08005877
 8005854:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7ff f996 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 800585c:	61b8      	str	r0, [r7, #24]
        break;
 800585e:	e00f      	b.n	8005880 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b54      	ldr	r3, [pc, #336]	@ (80059b4 <UART_SetConfig+0x270>)
 8005862:	61bb      	str	r3, [r7, #24]
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7ff f90f 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 800586a:	61b8      	str	r0, [r7, #24]
        break;
 800586c:	e008      	b.n	8005880 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005872:	61bb      	str	r3, [r7, #24]
        break;
 8005874:	e004      	b.n	8005880 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	77bb      	strb	r3, [r7, #30]
        break;
 800587e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d07e      	beq.n	8005984 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	4a4b      	ldr	r2, [pc, #300]	@ (80059b8 <UART_SetConfig+0x274>)
 800588c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005890:	461a      	mov	r2, r3
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	fbb3 f3f2 	udiv	r3, r3, r2
 8005898:	005a      	lsls	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	441a      	add	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b0f      	cmp	r3, #15
 80058b0:	d916      	bls.n	80058e0 <UART_SetConfig+0x19c>
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b8:	d212      	bcs.n	80058e0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f023 030f 	bic.w	r3, r3, #15
 80058c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	89fa      	ldrh	r2, [r7, #14]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e051      	b.n	8005984 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	77bb      	strb	r3, [r7, #30]
 80058e4:	e04e      	b.n	8005984 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e6:	7ffb      	ldrb	r3, [r7, #31]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	2b07      	cmp	r3, #7
 80058ec:	d821      	bhi.n	8005932 <UART_SetConfig+0x1ee>
 80058ee:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <UART_SetConfig+0x1b0>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005915 	.word	0x08005915
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005933 	.word	0x08005933
 8005900:	08005923 	.word	0x08005923
 8005904:	08005933 	.word	0x08005933
 8005908:	08005933 	.word	0x08005933
 800590c:	08005933 	.word	0x08005933
 8005910:	0800592b 	.word	0x0800592b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7ff f938 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 8005918:	61b8      	str	r0, [r7, #24]
        break;
 800591a:	e00f      	b.n	800593c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800591c:	4b25      	ldr	r3, [pc, #148]	@ (80059b4 <UART_SetConfig+0x270>)
 800591e:	61bb      	str	r3, [r7, #24]
        break;
 8005920:	e00c      	b.n	800593c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005922:	f7ff f8b1 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8005926:	61b8      	str	r0, [r7, #24]
        break;
 8005928:	e008      	b.n	800593c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592e:	61bb      	str	r3, [r7, #24]
        break;
 8005930:	e004      	b.n	800593c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	77bb      	strb	r3, [r7, #30]
        break;
 800593a:	bf00      	nop
    }

    if (pclk != 0U)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d020      	beq.n	8005984 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	4a1c      	ldr	r2, [pc, #112]	@ (80059b8 <UART_SetConfig+0x274>)
 8005948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594c:	461a      	mov	r2, r3
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	fbb3 f2f2 	udiv	r2, r3, r2
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d909      	bls.n	8005980 <UART_SetConfig+0x23c>
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005972:	d205      	bcs.n	8005980 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60da      	str	r2, [r3, #12]
 800597e:	e001      	b.n	8005984 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	cfff69f3 	.word	0xcfff69f3
 80059b0:	40013800 	.word	0x40013800
 80059b4:	00f42400 	.word	0x00f42400
 80059b8:	080093d4 	.word	0x080093d4

080059bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aba:	d10a      	bne.n	8005ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b098      	sub	sp, #96	@ 0x60
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b10:	f7fc faf2 	bl	80020f8 <HAL_GetTick>
 8005b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d12f      	bne.n	8005b84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f88e 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d022      	beq.n	8005b84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e063      	b.n	8005c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d149      	bne.n	8005c26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f857 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d03c      	beq.n	8005c26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bfe:	61fa      	str	r2, [r7, #28]
 8005c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e012      	b.n	8005c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3758      	adds	r7, #88	@ 0x58
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c64:	e04f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d04b      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6e:	f7fc fa43 	bl	80020f8 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e04e      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d037      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d034      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ca0:	d031      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d110      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f838 	bl	8005d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e029      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ce0:	d111      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f81e 	bl	8005d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e00f      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d0a0      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b095      	sub	sp, #84	@ 0x54
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e6      	bne.n	8005d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e3      	bne.n	8005d68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d118      	bne.n	8005dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f023 0310 	bic.w	r3, r3, #16
 8005dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e6      	bne.n	8005da8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dee:	bf00      	nop
 8005df0:	3754      	adds	r7, #84	@ 0x54
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e027      	b.n	8005e60 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2224      	movs	r2, #36	@ 0x24
 8005e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e02d      	b.n	8005ee0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2224      	movs	r2, #36	@ 0x24
 8005e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f84f 	bl	8005f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e02d      	b.n	8005f5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	@ 0x24
 8005f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f811 	bl	8005f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d108      	bne.n	8005f86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f84:	e031      	b.n	8005fea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f86:	2308      	movs	r3, #8
 8005f88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f8a:	2308      	movs	r3, #8
 8005f8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	0e5b      	lsrs	r3, r3, #25
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	0f5b      	lsrs	r3, r3, #29
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fae:	7bbb      	ldrb	r3, [r7, #14]
 8005fb0:	7b3a      	ldrb	r2, [r7, #12]
 8005fb2:	4911      	ldr	r1, [pc, #68]	@ (8005ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8005fb4:	5c8a      	ldrb	r2, [r1, r2]
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fba:	7b3a      	ldrb	r2, [r7, #12]
 8005fbc:	490f      	ldr	r1, [pc, #60]	@ (8005ffc <UARTEx_SetNbDataToProcess+0x98>)
 8005fbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	7b7a      	ldrb	r2, [r7, #13]
 8005fd0:	4909      	ldr	r1, [pc, #36]	@ (8005ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8005fd2:	5c8a      	ldrb	r2, [r1, r2]
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fd8:	7b7a      	ldrb	r2, [r7, #13]
 8005fda:	4908      	ldr	r1, [pc, #32]	@ (8005ffc <UARTEx_SetNbDataToProcess+0x98>)
 8005fdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fde:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	080093ec 	.word	0x080093ec
 8005ffc:	080093f4 	.word	0x080093f4

08006000 <i2c_init>:
#include "i2c.h"



void i2c_init(void)
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
    // 1. I2C1 클럭 Enable
    RCC->APB1ENR1 |= RCC_APB1ENR1_I2C1EN;
 8006004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800600e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006012:	6593      	str	r3, [r2, #88]	@ 0x58

    // 2. GPIOB 클럭 Enable
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8006014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // 3. PB8 (SCL), PB9 (SDA) Alternate Function 설정
    GPIOB->MODER &= ~((3 << (8 * 2)) | (3 << (9 * 2)));      // MODER clear
 8006024:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <i2c_init+0xac>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a20      	ldr	r2, [pc, #128]	@ (80060ac <i2c_init+0xac>)
 800602a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800602e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= ((2 << (8 * 2)) | (2 << (9 * 2)));       // AF mode
 8006030:	4b1e      	ldr	r3, [pc, #120]	@ (80060ac <i2c_init+0xac>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1d      	ldr	r2, [pc, #116]	@ (80060ac <i2c_init+0xac>)
 8006036:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800603a:	6013      	str	r3, [r2, #0]

    GPIOB->OTYPER |= (1 << 8) | (1 << 9);                    // Open-drain
 800603c:	4b1b      	ldr	r3, [pc, #108]	@ (80060ac <i2c_init+0xac>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4a1a      	ldr	r2, [pc, #104]	@ (80060ac <i2c_init+0xac>)
 8006042:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006046:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << (8 * 2)) | (3 << (9 * 2));       // High speed
 8006048:	4b18      	ldr	r3, [pc, #96]	@ (80060ac <i2c_init+0xac>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4a17      	ldr	r2, [pc, #92]	@ (80060ac <i2c_init+0xac>)
 800604e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8006052:	6093      	str	r3, [r2, #8]

    GPIOB->PUPDR &= ~((3 << (8 * 2)) | (3 << (9 * 2)));
 8006054:	4b15      	ldr	r3, [pc, #84]	@ (80060ac <i2c_init+0xac>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4a14      	ldr	r2, [pc, #80]	@ (80060ac <i2c_init+0xac>)
 800605a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800605e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= ((1 << (8 * 2)) | (1 << (9 * 2)));       // Pull-up
 8006060:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <i2c_init+0xac>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a11      	ldr	r2, [pc, #68]	@ (80060ac <i2c_init+0xac>)
 8006066:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800606a:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
 800606c:	4b0f      	ldr	r3, [pc, #60]	@ (80060ac <i2c_init+0xac>)
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	4a0e      	ldr	r2, [pc, #56]	@ (80060ac <i2c_init+0xac>)
 8006072:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006076:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |= ((4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4)));  // AF4 for I2C1
 8006078:	4b0c      	ldr	r3, [pc, #48]	@ (80060ac <i2c_init+0xac>)
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	4a0b      	ldr	r2, [pc, #44]	@ (80060ac <i2c_init+0xac>)
 800607e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006082:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. I2C1 Disable before config
    I2C1->CR1 &= ~I2C_CR1_PE;
 8006084:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <i2c_init+0xb0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a09      	ldr	r2, [pc, #36]	@ (80060b0 <i2c_init+0xb0>)
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	6013      	str	r3, [r2, #0]

    // 5. TIMINGR: Standard mode 100kHz @ 64MHz
    I2C1->TIMINGR = 0x106133FF;
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <i2c_init+0xb0>)
 8006092:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <i2c_init+0xb4>)
 8006094:	611a      	str	r2, [r3, #16]

    // 6. Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8006096:	4b06      	ldr	r3, [pc, #24]	@ (80060b0 <i2c_init+0xb0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a05      	ldr	r2, [pc, #20]	@ (80060b0 <i2c_init+0xb0>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
}
 80060a2:	bf00      	nop
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	48000400 	.word	0x48000400
 80060b0:	40005400 	.word	0x40005400
 80060b4:	106133ff 	.word	0x106133ff

080060b8 <i2c_write>:

void i2c_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
 80060c2:	460b      	mov	r3, r1
 80060c4:	71bb      	strb	r3, [r7, #6]
 80060c6:	4613      	mov	r3, r2
 80060c8:	717b      	strb	r3, [r7, #5]
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006144 <i2c_write+0x8c>)
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);   // 레지스터 + 데이터 = 2바이트
 80060d2:	4b1c      	ldr	r3, [pc, #112]	@ (8006144 <i2c_write+0x8c>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006144 <i2c_write+0x8c>)
 80060d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060dc:	6053      	str	r3, [r2, #4]
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;             // Write
 80060de:	4b19      	ldr	r3, [pc, #100]	@ (8006144 <i2c_write+0x8c>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	4a18      	ldr	r2, [pc, #96]	@ (8006144 <i2c_write+0x8c>)
 80060e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060e8:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START | I2C_CR2_AUTOEND;
 80060ea:	4b16      	ldr	r3, [pc, #88]	@ (8006144 <i2c_write+0x8c>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4a15      	ldr	r2, [pc, #84]	@ (8006144 <i2c_write+0x8c>)
 80060f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80060f8:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 80060fa:	bf00      	nop
 80060fc:	4b11      	ldr	r3, [pc, #68]	@ (8006144 <i2c_write+0x8c>)
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f9      	beq.n	80060fc <i2c_write+0x44>
    I2C1->TXDR = reg_addr;
 8006108:	4a0e      	ldr	r2, [pc, #56]	@ (8006144 <i2c_write+0x8c>)
 800610a:	79bb      	ldrb	r3, [r7, #6]
 800610c:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 800610e:	bf00      	nop
 8006110:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <i2c_write+0x8c>)
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f9      	beq.n	8006110 <i2c_write+0x58>
    I2C1->TXDR = data;
 800611c:	4a09      	ldr	r2, [pc, #36]	@ (8006144 <i2c_write+0x8c>)
 800611e:	797b      	ldrb	r3, [r7, #5]
 8006120:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_STOPF));
 8006122:	bf00      	nop
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <i2c_write+0x8c>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f9      	beq.n	8006124 <i2c_write+0x6c>
    I2C1->ICR = I2C_ICR_STOPCF;
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <i2c_write+0x8c>)
 8006132:	2220      	movs	r2, #32
 8006134:	61da      	str	r2, [r3, #28]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40005400 	.word	0x40005400

08006148 <i2c_read>:

uint8_t i2c_read(uint8_t slave_addr, uint8_t reg_addr)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	460a      	mov	r2, r1
 8006152:	71fb      	strb	r3, [r7, #7]
 8006154:	4613      	mov	r3, r2
 8006156:	71bb      	strb	r3, [r7, #6]
    uint8_t data;

    // Write phase: 레지스터 주소 보내기
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	4a2c      	ldr	r2, [pc, #176]	@ (800620c <i2c_read+0xc4>)
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8006160:	4b2a      	ldr	r3, [pc, #168]	@ (800620c <i2c_read+0xc4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a29      	ldr	r2, [pc, #164]	@ (800620c <i2c_read+0xc4>)
 8006166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616a:	6053      	str	r3, [r2, #4]
    I2C1->CR2 &= ~I2C_CR2_RD_WRN;            // Write
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <i2c_read+0xc4>)
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4a26      	ldr	r2, [pc, #152]	@ (800620c <i2c_read+0xc4>)
 8006172:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006176:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START;
 8006178:	4b24      	ldr	r3, [pc, #144]	@ (800620c <i2c_read+0xc4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a23      	ldr	r2, [pc, #140]	@ (800620c <i2c_read+0xc4>)
 800617e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006182:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_TXIS));
 8006184:	bf00      	nop
 8006186:	4b21      	ldr	r3, [pc, #132]	@ (800620c <i2c_read+0xc4>)
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f9      	beq.n	8006186 <i2c_read+0x3e>
    I2C1->TXDR = reg_addr;
 8006192:	4a1e      	ldr	r2, [pc, #120]	@ (800620c <i2c_read+0xc4>)
 8006194:	79bb      	ldrb	r3, [r7, #6]
 8006196:	6293      	str	r3, [r2, #40]	@ 0x28

    while (!(I2C1->ISR & I2C_ISR_TC));
 8006198:	bf00      	nop
 800619a:	4b1c      	ldr	r3, [pc, #112]	@ (800620c <i2c_read+0xc4>)
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f9      	beq.n	800619a <i2c_read+0x52>

    // Read phase: 데이터 1바이트 읽기
    I2C1->CR2 = (slave_addr << 1) << I2C_CR2_SADD_Pos;
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	4a18      	ldr	r2, [pc, #96]	@ (800620c <i2c_read+0xc4>)
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 80061ae:	4b17      	ldr	r3, [pc, #92]	@ (800620c <i2c_read+0xc4>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	4a16      	ldr	r2, [pc, #88]	@ (800620c <i2c_read+0xc4>)
 80061b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b8:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_RD_WRN;            // Read
 80061ba:	4b14      	ldr	r3, [pc, #80]	@ (800620c <i2c_read+0xc4>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4a13      	ldr	r2, [pc, #76]	@ (800620c <i2c_read+0xc4>)
 80061c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061c4:	6053      	str	r3, [r2, #4]
    I2C1->CR2 |= I2C_CR2_START | I2C_CR2_AUTOEND;
 80061c6:	4b11      	ldr	r3, [pc, #68]	@ (800620c <i2c_read+0xc4>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4a10      	ldr	r2, [pc, #64]	@ (800620c <i2c_read+0xc4>)
 80061cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80061d4:	6053      	str	r3, [r2, #4]

    while (!(I2C1->ISR & I2C_ISR_RXNE));
 80061d6:	bf00      	nop
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <i2c_read+0xc4>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f9      	beq.n	80061d8 <i2c_read+0x90>
    data = I2C1->RXDR;
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <i2c_read+0xc4>)
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	73fb      	strb	r3, [r7, #15]

    while (!(I2C1->ISR & I2C_ISR_STOPF));
 80061ea:	bf00      	nop
 80061ec:	4b07      	ldr	r3, [pc, #28]	@ (800620c <i2c_read+0xc4>)
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f9      	beq.n	80061ec <i2c_read+0xa4>
    I2C1->ICR = I2C_ICR_STOPCF;
 80061f8:	4b04      	ldr	r3, [pc, #16]	@ (800620c <i2c_read+0xc4>)
 80061fa:	2220      	movs	r2, #32
 80061fc:	61da      	str	r2, [r3, #28]

    return data;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40005400 	.word	0x40005400

08006210 <uart_init>:
extern UART_HandleTypeDef huart1;



void uart_init(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
	HAL_UART_Init(&huart1);
 8006214:	4802      	ldr	r0, [pc, #8]	@ (8006220 <uart_init+0x10>)
 8006216:	f7ff f9b7 	bl	8005588 <HAL_UART_Init>
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	200005bc 	.word	0x200005bc

08006224 <uart_printf>:


void uart_printf(const char *fmt, ...)
{
 8006224:	b40f      	push	{r0, r1, r2, r3}
 8006226:	b580      	push	{r7, lr}
 8006228:	b0a2      	sub	sp, #136	@ 0x88
 800622a:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;
    va_start(args, fmt);
 800622c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006230:	607b      	str	r3, [r7, #4]
    vsnprintf(buf, sizeof(buf), fmt, args);
 8006232:	f107 0008 	add.w	r0, r7, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800623c:	2180      	movs	r1, #128	@ 0x80
 800623e:	f000 fe27 	bl	8006e90 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart1, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	4618      	mov	r0, r3
 8006248:	f7f9 ffea 	bl	8000220 <strlen>
 800624c:	4603      	mov	r3, r0
 800624e:	b29a      	uxth	r2, r3
 8006250:	f107 0108 	add.w	r1, r7, #8
 8006254:	f04f 33ff 	mov.w	r3, #4294967295
 8006258:	4804      	ldr	r0, [pc, #16]	@ (800626c <uart_printf+0x48>)
 800625a:	f7ff f9e5 	bl	8005628 <HAL_UART_Transmit>
}
 800625e:	bf00      	nop
 8006260:	3788      	adds	r7, #136	@ 0x88
 8006262:	46bd      	mov	sp, r7
 8006264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006268:	b004      	add	sp, #16
 800626a:	4770      	bx	lr
 800626c:	200005bc 	.word	0x200005bc

08006270 <flash_write_color_reference>:

#include "flash.h"


void flash_write_color_reference(uint8_t sensor_side, uint8_t color_index, reference_entry_t entry)
{
 8006270:	b082      	sub	sp, #8
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	f107 0c20 	add.w	ip, r7, #32
 800627c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8006280:	4603      	mov	r3, r0
 8006282:	71fb      	strb	r3, [r7, #7]
 8006284:	460b      	mov	r3, r1
 8006286:	71bb      	strb	r3, [r7, #6]
    uint32_t base_addr = (sensor_side == BH1745_ADDR_LEFT) ? FLASH_COLOR_TABLE_ADDR_LEFT : FLASH_COLOR_TABLE_ADDR_RIGHT;
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	2b38      	cmp	r3, #56	@ 0x38
 800628c:	d101      	bne.n	8006292 <flash_write_color_reference+0x22>
 800628e:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <flash_write_color_reference+0x7c>)
 8006290:	e000      	b.n	8006294 <flash_write_color_reference+0x24>
 8006292:	4b17      	ldr	r3, [pc, #92]	@ (80062f0 <flash_write_color_reference+0x80>)
 8006294:	613b      	str	r3, [r7, #16]
    uint32_t addr = base_addr + color_index * FLASH_COLOR_ENTRY_SIZE;
 8006296:	79bb      	ldrb	r3, [r7, #6]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	4413      	add	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

    HAL_FLASH_Unlock();
 80062a0:	f7fc ff58 	bl	8003154 <HAL_FLASH_Unlock>

    // struct를 4바이트씩 나눠서 저장
    uint64_t* data = (uint64_t*)&entry;
 80062a4:	f107 0320 	add.w	r3, r7, #32
 80062a8:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(reference_entry_t) / 8; i++) {
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e010      	b.n	80062d2 <flash_write_color_reference+0x62>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i * 8, data[i]);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	461a      	mov	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	18d1      	adds	r1, r2, r3
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	4413      	add	r3, r2
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	2001      	movs	r0, #1
 80062c8:	f7fc ff00 	bl	80030cc <HAL_FLASH_Program>
    for (int i = 0; i < sizeof(reference_entry_t) / 8; i++) {
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3301      	adds	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d9eb      	bls.n	80062b0 <flash_write_color_reference+0x40>
    }

    HAL_FLASH_Lock();
 80062d8:	f7fc ff5e 	bl	8003198 <HAL_FLASH_Lock>
}
 80062dc:	bf00      	nop
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e6:	b002      	add	sp, #8
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	0807f800 	.word	0x0807f800
 80062f0:	0807f000 	.word	0x0807f000

080062f4 <flash_read_color_reference>:

reference_entry_t flash_read_color_reference(uint8_t sensor_side, uint8_t color_index)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b089      	sub	sp, #36	@ 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
 8006300:	4613      	mov	r3, r2
 8006302:	70bb      	strb	r3, [r7, #2]
    uint32_t base_addr = (sensor_side == BH1745_ADDR_LEFT) ? FLASH_COLOR_TABLE_ADDR_LEFT : FLASH_COLOR_TABLE_ADDR_RIGHT;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	2b38      	cmp	r3, #56	@ 0x38
 8006308:	d101      	bne.n	800630e <flash_read_color_reference+0x1a>
 800630a:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <flash_read_color_reference+0x4c>)
 800630c:	e000      	b.n	8006310 <flash_read_color_reference+0x1c>
 800630e:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <flash_read_color_reference+0x50>)
 8006310:	61fb      	str	r3, [r7, #28]
    uint32_t addr = base_addr + color_index * FLASH_COLOR_ENTRY_SIZE;
 8006312:	78bb      	ldrb	r3, [r7, #2]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]

    reference_entry_t entry;
    memcpy(&entry, (void*)addr, FLASH_COLOR_ENTRY_SIZE);
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	f107 0308 	add.w	r3, r7, #8
 8006322:	2210      	movs	r2, #16
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fe40 	bl	8006faa <memcpy>

    return entry;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	461c      	mov	r4, r3
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	3724      	adds	r7, #36	@ 0x24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}
 8006340:	0807f800 	.word	0x0807f800
 8006344:	0807f000 	.word	0x0807f000

08006348 <flash_erase_color_table>:

void flash_erase_color_table(uint8_t sensor_side)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8006352:	2302      	movs	r3, #2
 8006354:	60fb      	str	r3, [r7, #12]
    erase_init.Page      = (sensor_side == BH1745_ADDR_LEFT) ? (FLASH_COLOR_TABLE_ADDR_LEFT - 0x08000000) / FLASH_PAGE_SIZE : (FLASH_COLOR_TABLE_ADDR_RIGHT - 0x08000000) / FLASH_PAGE_SIZE;
 8006356:	237f      	movs	r3, #127	@ 0x7f
 8006358:	613b      	str	r3, [r7, #16]
    erase_init.NbPages   = 1;
 800635a:	2301      	movs	r3, #1
 800635c:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 800635e:	f7fc fef9 	bl	8003154 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 8006362:	f107 0208 	add.w	r2, r7, #8
 8006366:	f107 030c 	add.w	r3, r7, #12
 800636a:	4611      	mov	r1, r2
 800636c:	4618      	mov	r0, r3
 800636e:	f7fc ffc1 	bl	80032f4 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8006372:	f7fc ff11 	bl	8003198 <HAL_FLASH_Lock>
}
 8006376:	bf00      	nop
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <__cvt>:
 800637e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006382:	ec57 6b10 	vmov	r6, r7, d0
 8006386:	2f00      	cmp	r7, #0
 8006388:	460c      	mov	r4, r1
 800638a:	4619      	mov	r1, r3
 800638c:	463b      	mov	r3, r7
 800638e:	bfbb      	ittet	lt
 8006390:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006394:	461f      	movlt	r7, r3
 8006396:	2300      	movge	r3, #0
 8006398:	232d      	movlt	r3, #45	@ 0x2d
 800639a:	700b      	strb	r3, [r1, #0]
 800639c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800639e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063a2:	4691      	mov	r9, r2
 80063a4:	f023 0820 	bic.w	r8, r3, #32
 80063a8:	bfbc      	itt	lt
 80063aa:	4632      	movlt	r2, r6
 80063ac:	4616      	movlt	r6, r2
 80063ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063b2:	d005      	beq.n	80063c0 <__cvt+0x42>
 80063b4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063b8:	d100      	bne.n	80063bc <__cvt+0x3e>
 80063ba:	3401      	adds	r4, #1
 80063bc:	2102      	movs	r1, #2
 80063be:	e000      	b.n	80063c2 <__cvt+0x44>
 80063c0:	2103      	movs	r1, #3
 80063c2:	ab03      	add	r3, sp, #12
 80063c4:	9301      	str	r3, [sp, #4]
 80063c6:	ab02      	add	r3, sp, #8
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	ec47 6b10 	vmov	d0, r6, r7
 80063ce:	4653      	mov	r3, sl
 80063d0:	4622      	mov	r2, r4
 80063d2:	f000 fe81 	bl	80070d8 <_dtoa_r>
 80063d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063da:	4605      	mov	r5, r0
 80063dc:	d119      	bne.n	8006412 <__cvt+0x94>
 80063de:	f019 0f01 	tst.w	r9, #1
 80063e2:	d00e      	beq.n	8006402 <__cvt+0x84>
 80063e4:	eb00 0904 	add.w	r9, r0, r4
 80063e8:	2200      	movs	r2, #0
 80063ea:	2300      	movs	r3, #0
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7fa fb42 	bl	8000a78 <__aeabi_dcmpeq>
 80063f4:	b108      	cbz	r0, 80063fa <__cvt+0x7c>
 80063f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80063fa:	2230      	movs	r2, #48	@ 0x30
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	454b      	cmp	r3, r9
 8006400:	d31e      	bcc.n	8006440 <__cvt+0xc2>
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006406:	1b5b      	subs	r3, r3, r5
 8006408:	4628      	mov	r0, r5
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	b004      	add	sp, #16
 800640e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006412:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006416:	eb00 0904 	add.w	r9, r0, r4
 800641a:	d1e5      	bne.n	80063e8 <__cvt+0x6a>
 800641c:	7803      	ldrb	r3, [r0, #0]
 800641e:	2b30      	cmp	r3, #48	@ 0x30
 8006420:	d10a      	bne.n	8006438 <__cvt+0xba>
 8006422:	2200      	movs	r2, #0
 8006424:	2300      	movs	r3, #0
 8006426:	4630      	mov	r0, r6
 8006428:	4639      	mov	r1, r7
 800642a:	f7fa fb25 	bl	8000a78 <__aeabi_dcmpeq>
 800642e:	b918      	cbnz	r0, 8006438 <__cvt+0xba>
 8006430:	f1c4 0401 	rsb	r4, r4, #1
 8006434:	f8ca 4000 	str.w	r4, [sl]
 8006438:	f8da 3000 	ldr.w	r3, [sl]
 800643c:	4499      	add	r9, r3
 800643e:	e7d3      	b.n	80063e8 <__cvt+0x6a>
 8006440:	1c59      	adds	r1, r3, #1
 8006442:	9103      	str	r1, [sp, #12]
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e7d9      	b.n	80063fc <__cvt+0x7e>

08006448 <__exponent>:
 8006448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800644a:	2900      	cmp	r1, #0
 800644c:	bfba      	itte	lt
 800644e:	4249      	neglt	r1, r1
 8006450:	232d      	movlt	r3, #45	@ 0x2d
 8006452:	232b      	movge	r3, #43	@ 0x2b
 8006454:	2909      	cmp	r1, #9
 8006456:	7002      	strb	r2, [r0, #0]
 8006458:	7043      	strb	r3, [r0, #1]
 800645a:	dd29      	ble.n	80064b0 <__exponent+0x68>
 800645c:	f10d 0307 	add.w	r3, sp, #7
 8006460:	461d      	mov	r5, r3
 8006462:	270a      	movs	r7, #10
 8006464:	461a      	mov	r2, r3
 8006466:	fbb1 f6f7 	udiv	r6, r1, r7
 800646a:	fb07 1416 	mls	r4, r7, r6, r1
 800646e:	3430      	adds	r4, #48	@ 0x30
 8006470:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006474:	460c      	mov	r4, r1
 8006476:	2c63      	cmp	r4, #99	@ 0x63
 8006478:	f103 33ff 	add.w	r3, r3, #4294967295
 800647c:	4631      	mov	r1, r6
 800647e:	dcf1      	bgt.n	8006464 <__exponent+0x1c>
 8006480:	3130      	adds	r1, #48	@ 0x30
 8006482:	1e94      	subs	r4, r2, #2
 8006484:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006488:	1c41      	adds	r1, r0, #1
 800648a:	4623      	mov	r3, r4
 800648c:	42ab      	cmp	r3, r5
 800648e:	d30a      	bcc.n	80064a6 <__exponent+0x5e>
 8006490:	f10d 0309 	add.w	r3, sp, #9
 8006494:	1a9b      	subs	r3, r3, r2
 8006496:	42ac      	cmp	r4, r5
 8006498:	bf88      	it	hi
 800649a:	2300      	movhi	r3, #0
 800649c:	3302      	adds	r3, #2
 800649e:	4403      	add	r3, r0
 80064a0:	1a18      	subs	r0, r3, r0
 80064a2:	b003      	add	sp, #12
 80064a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064ae:	e7ed      	b.n	800648c <__exponent+0x44>
 80064b0:	2330      	movs	r3, #48	@ 0x30
 80064b2:	3130      	adds	r1, #48	@ 0x30
 80064b4:	7083      	strb	r3, [r0, #2]
 80064b6:	70c1      	strb	r1, [r0, #3]
 80064b8:	1d03      	adds	r3, r0, #4
 80064ba:	e7f1      	b.n	80064a0 <__exponent+0x58>

080064bc <_printf_float>:
 80064bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c0:	b08d      	sub	sp, #52	@ 0x34
 80064c2:	460c      	mov	r4, r1
 80064c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064c8:	4616      	mov	r6, r2
 80064ca:	461f      	mov	r7, r3
 80064cc:	4605      	mov	r5, r0
 80064ce:	f000 fcf5 	bl	8006ebc <_localeconv_r>
 80064d2:	6803      	ldr	r3, [r0, #0]
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7f9 fea2 	bl	8000220 <strlen>
 80064dc:	2300      	movs	r3, #0
 80064de:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e0:	f8d8 3000 	ldr.w	r3, [r8]
 80064e4:	9005      	str	r0, [sp, #20]
 80064e6:	3307      	adds	r3, #7
 80064e8:	f023 0307 	bic.w	r3, r3, #7
 80064ec:	f103 0208 	add.w	r2, r3, #8
 80064f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064f4:	f8d4 b000 	ldr.w	fp, [r4]
 80064f8:	f8c8 2000 	str.w	r2, [r8]
 80064fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006500:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006504:	9307      	str	r3, [sp, #28]
 8006506:	f8cd 8018 	str.w	r8, [sp, #24]
 800650a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800650e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006512:	4b9c      	ldr	r3, [pc, #624]	@ (8006784 <_printf_float+0x2c8>)
 8006514:	f04f 32ff 	mov.w	r2, #4294967295
 8006518:	f7fa fae0 	bl	8000adc <__aeabi_dcmpun>
 800651c:	bb70      	cbnz	r0, 800657c <_printf_float+0xc0>
 800651e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006522:	4b98      	ldr	r3, [pc, #608]	@ (8006784 <_printf_float+0x2c8>)
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	f7fa faba 	bl	8000aa0 <__aeabi_dcmple>
 800652c:	bb30      	cbnz	r0, 800657c <_printf_float+0xc0>
 800652e:	2200      	movs	r2, #0
 8006530:	2300      	movs	r3, #0
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7fa faa9 	bl	8000a8c <__aeabi_dcmplt>
 800653a:	b110      	cbz	r0, 8006542 <_printf_float+0x86>
 800653c:	232d      	movs	r3, #45	@ 0x2d
 800653e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006542:	4a91      	ldr	r2, [pc, #580]	@ (8006788 <_printf_float+0x2cc>)
 8006544:	4b91      	ldr	r3, [pc, #580]	@ (800678c <_printf_float+0x2d0>)
 8006546:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800654a:	bf8c      	ite	hi
 800654c:	4690      	movhi	r8, r2
 800654e:	4698      	movls	r8, r3
 8006550:	2303      	movs	r3, #3
 8006552:	6123      	str	r3, [r4, #16]
 8006554:	f02b 0304 	bic.w	r3, fp, #4
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	f04f 0900 	mov.w	r9, #0
 800655e:	9700      	str	r7, [sp, #0]
 8006560:	4633      	mov	r3, r6
 8006562:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006564:	4621      	mov	r1, r4
 8006566:	4628      	mov	r0, r5
 8006568:	f000 f9d2 	bl	8006910 <_printf_common>
 800656c:	3001      	adds	r0, #1
 800656e:	f040 808d 	bne.w	800668c <_printf_float+0x1d0>
 8006572:	f04f 30ff 	mov.w	r0, #4294967295
 8006576:	b00d      	add	sp, #52	@ 0x34
 8006578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7fa faaa 	bl	8000adc <__aeabi_dcmpun>
 8006588:	b140      	cbz	r0, 800659c <_printf_float+0xe0>
 800658a:	464b      	mov	r3, r9
 800658c:	2b00      	cmp	r3, #0
 800658e:	bfbc      	itt	lt
 8006590:	232d      	movlt	r3, #45	@ 0x2d
 8006592:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006596:	4a7e      	ldr	r2, [pc, #504]	@ (8006790 <_printf_float+0x2d4>)
 8006598:	4b7e      	ldr	r3, [pc, #504]	@ (8006794 <_printf_float+0x2d8>)
 800659a:	e7d4      	b.n	8006546 <_printf_float+0x8a>
 800659c:	6863      	ldr	r3, [r4, #4]
 800659e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065a2:	9206      	str	r2, [sp, #24]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	d13b      	bne.n	8006620 <_printf_float+0x164>
 80065a8:	2306      	movs	r3, #6
 80065aa:	6063      	str	r3, [r4, #4]
 80065ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065b0:	2300      	movs	r3, #0
 80065b2:	6022      	str	r2, [r4, #0]
 80065b4:	9303      	str	r3, [sp, #12]
 80065b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80065b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065bc:	ab09      	add	r3, sp, #36	@ 0x24
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	6861      	ldr	r1, [r4, #4]
 80065c2:	ec49 8b10 	vmov	d0, r8, r9
 80065c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065ca:	4628      	mov	r0, r5
 80065cc:	f7ff fed7 	bl	800637e <__cvt>
 80065d0:	9b06      	ldr	r3, [sp, #24]
 80065d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065d4:	2b47      	cmp	r3, #71	@ 0x47
 80065d6:	4680      	mov	r8, r0
 80065d8:	d129      	bne.n	800662e <_printf_float+0x172>
 80065da:	1cc8      	adds	r0, r1, #3
 80065dc:	db02      	blt.n	80065e4 <_printf_float+0x128>
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	4299      	cmp	r1, r3
 80065e2:	dd41      	ble.n	8006668 <_printf_float+0x1ac>
 80065e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80065e8:	fa5f fa8a 	uxtb.w	sl, sl
 80065ec:	3901      	subs	r1, #1
 80065ee:	4652      	mov	r2, sl
 80065f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80065f6:	f7ff ff27 	bl	8006448 <__exponent>
 80065fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065fc:	1813      	adds	r3, r2, r0
 80065fe:	2a01      	cmp	r2, #1
 8006600:	4681      	mov	r9, r0
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	dc02      	bgt.n	800660c <_printf_float+0x150>
 8006606:	6822      	ldr	r2, [r4, #0]
 8006608:	07d2      	lsls	r2, r2, #31
 800660a:	d501      	bpl.n	8006610 <_printf_float+0x154>
 800660c:	3301      	adds	r3, #1
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0a2      	beq.n	800655e <_printf_float+0xa2>
 8006618:	232d      	movs	r3, #45	@ 0x2d
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800661e:	e79e      	b.n	800655e <_printf_float+0xa2>
 8006620:	9a06      	ldr	r2, [sp, #24]
 8006622:	2a47      	cmp	r2, #71	@ 0x47
 8006624:	d1c2      	bne.n	80065ac <_printf_float+0xf0>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1c0      	bne.n	80065ac <_printf_float+0xf0>
 800662a:	2301      	movs	r3, #1
 800662c:	e7bd      	b.n	80065aa <_printf_float+0xee>
 800662e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006632:	d9db      	bls.n	80065ec <_printf_float+0x130>
 8006634:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006638:	d118      	bne.n	800666c <_printf_float+0x1b0>
 800663a:	2900      	cmp	r1, #0
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	dd0b      	ble.n	8006658 <_printf_float+0x19c>
 8006640:	6121      	str	r1, [r4, #16]
 8006642:	b913      	cbnz	r3, 800664a <_printf_float+0x18e>
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	07d0      	lsls	r0, r2, #31
 8006648:	d502      	bpl.n	8006650 <_printf_float+0x194>
 800664a:	3301      	adds	r3, #1
 800664c:	440b      	add	r3, r1
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	e7db      	b.n	8006610 <_printf_float+0x154>
 8006658:	b913      	cbnz	r3, 8006660 <_printf_float+0x1a4>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	07d2      	lsls	r2, r2, #31
 800665e:	d501      	bpl.n	8006664 <_printf_float+0x1a8>
 8006660:	3302      	adds	r3, #2
 8006662:	e7f4      	b.n	800664e <_printf_float+0x192>
 8006664:	2301      	movs	r3, #1
 8006666:	e7f2      	b.n	800664e <_printf_float+0x192>
 8006668:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800666c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800666e:	4299      	cmp	r1, r3
 8006670:	db05      	blt.n	800667e <_printf_float+0x1c2>
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	6121      	str	r1, [r4, #16]
 8006676:	07d8      	lsls	r0, r3, #31
 8006678:	d5ea      	bpl.n	8006650 <_printf_float+0x194>
 800667a:	1c4b      	adds	r3, r1, #1
 800667c:	e7e7      	b.n	800664e <_printf_float+0x192>
 800667e:	2900      	cmp	r1, #0
 8006680:	bfd4      	ite	le
 8006682:	f1c1 0202 	rsble	r2, r1, #2
 8006686:	2201      	movgt	r2, #1
 8006688:	4413      	add	r3, r2
 800668a:	e7e0      	b.n	800664e <_printf_float+0x192>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	055a      	lsls	r2, r3, #21
 8006690:	d407      	bmi.n	80066a2 <_printf_float+0x1e6>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	4642      	mov	r2, r8
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d12b      	bne.n	80066f8 <_printf_float+0x23c>
 80066a0:	e767      	b.n	8006572 <_printf_float+0xb6>
 80066a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066a6:	f240 80dd 	bls.w	8006864 <_printf_float+0x3a8>
 80066aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066ae:	2200      	movs	r2, #0
 80066b0:	2300      	movs	r3, #0
 80066b2:	f7fa f9e1 	bl	8000a78 <__aeabi_dcmpeq>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d033      	beq.n	8006722 <_printf_float+0x266>
 80066ba:	4a37      	ldr	r2, [pc, #220]	@ (8006798 <_printf_float+0x2dc>)
 80066bc:	2301      	movs	r3, #1
 80066be:	4631      	mov	r1, r6
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	f43f af54 	beq.w	8006572 <_printf_float+0xb6>
 80066ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066ce:	4543      	cmp	r3, r8
 80066d0:	db02      	blt.n	80066d8 <_printf_float+0x21c>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	07d8      	lsls	r0, r3, #31
 80066d6:	d50f      	bpl.n	80066f8 <_printf_float+0x23c>
 80066d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af45 	beq.w	8006572 <_printf_float+0xb6>
 80066e8:	f04f 0900 	mov.w	r9, #0
 80066ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80066f0:	f104 0a1a 	add.w	sl, r4, #26
 80066f4:	45c8      	cmp	r8, r9
 80066f6:	dc09      	bgt.n	800670c <_printf_float+0x250>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	079b      	lsls	r3, r3, #30
 80066fc:	f100 8103 	bmi.w	8006906 <_printf_float+0x44a>
 8006700:	68e0      	ldr	r0, [r4, #12]
 8006702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006704:	4298      	cmp	r0, r3
 8006706:	bfb8      	it	lt
 8006708:	4618      	movlt	r0, r3
 800670a:	e734      	b.n	8006576 <_printf_float+0xba>
 800670c:	2301      	movs	r3, #1
 800670e:	4652      	mov	r2, sl
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f af2b 	beq.w	8006572 <_printf_float+0xb6>
 800671c:	f109 0901 	add.w	r9, r9, #1
 8006720:	e7e8      	b.n	80066f4 <_printf_float+0x238>
 8006722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc39      	bgt.n	800679c <_printf_float+0x2e0>
 8006728:	4a1b      	ldr	r2, [pc, #108]	@ (8006798 <_printf_float+0x2dc>)
 800672a:	2301      	movs	r3, #1
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af1d 	beq.w	8006572 <_printf_float+0xb6>
 8006738:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800673c:	ea59 0303 	orrs.w	r3, r9, r3
 8006740:	d102      	bne.n	8006748 <_printf_float+0x28c>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	07d9      	lsls	r1, r3, #31
 8006746:	d5d7      	bpl.n	80066f8 <_printf_float+0x23c>
 8006748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af0d 	beq.w	8006572 <_printf_float+0xb6>
 8006758:	f04f 0a00 	mov.w	sl, #0
 800675c:	f104 0b1a 	add.w	fp, r4, #26
 8006760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006762:	425b      	negs	r3, r3
 8006764:	4553      	cmp	r3, sl
 8006766:	dc01      	bgt.n	800676c <_printf_float+0x2b0>
 8006768:	464b      	mov	r3, r9
 800676a:	e793      	b.n	8006694 <_printf_float+0x1d8>
 800676c:	2301      	movs	r3, #1
 800676e:	465a      	mov	r2, fp
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f aefb 	beq.w	8006572 <_printf_float+0xb6>
 800677c:	f10a 0a01 	add.w	sl, sl, #1
 8006780:	e7ee      	b.n	8006760 <_printf_float+0x2a4>
 8006782:	bf00      	nop
 8006784:	7fefffff 	.word	0x7fefffff
 8006788:	08009400 	.word	0x08009400
 800678c:	080093fc 	.word	0x080093fc
 8006790:	08009408 	.word	0x08009408
 8006794:	08009404 	.word	0x08009404
 8006798:	0800940c 	.word	0x0800940c
 800679c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800679e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067a2:	4553      	cmp	r3, sl
 80067a4:	bfa8      	it	ge
 80067a6:	4653      	movge	r3, sl
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	4699      	mov	r9, r3
 80067ac:	dc36      	bgt.n	800681c <_printf_float+0x360>
 80067ae:	f04f 0b00 	mov.w	fp, #0
 80067b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b6:	f104 021a 	add.w	r2, r4, #26
 80067ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	eba3 0309 	sub.w	r3, r3, r9
 80067c2:	455b      	cmp	r3, fp
 80067c4:	dc31      	bgt.n	800682a <_printf_float+0x36e>
 80067c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c8:	459a      	cmp	sl, r3
 80067ca:	dc3a      	bgt.n	8006842 <_printf_float+0x386>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07da      	lsls	r2, r3, #31
 80067d0:	d437      	bmi.n	8006842 <_printf_float+0x386>
 80067d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d4:	ebaa 0903 	sub.w	r9, sl, r3
 80067d8:	9b06      	ldr	r3, [sp, #24]
 80067da:	ebaa 0303 	sub.w	r3, sl, r3
 80067de:	4599      	cmp	r9, r3
 80067e0:	bfa8      	it	ge
 80067e2:	4699      	movge	r9, r3
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	dc33      	bgt.n	8006852 <_printf_float+0x396>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067f2:	f104 0b1a 	add.w	fp, r4, #26
 80067f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f8:	ebaa 0303 	sub.w	r3, sl, r3
 80067fc:	eba3 0309 	sub.w	r3, r3, r9
 8006800:	4543      	cmp	r3, r8
 8006802:	f77f af79 	ble.w	80066f8 <_printf_float+0x23c>
 8006806:	2301      	movs	r3, #1
 8006808:	465a      	mov	r2, fp
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f aeae 	beq.w	8006572 <_printf_float+0xb6>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	e7ec      	b.n	80067f6 <_printf_float+0x33a>
 800681c:	4642      	mov	r2, r8
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	d1c2      	bne.n	80067ae <_printf_float+0x2f2>
 8006828:	e6a3      	b.n	8006572 <_printf_float+0xb6>
 800682a:	2301      	movs	r3, #1
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	9206      	str	r2, [sp, #24]
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f ae9c 	beq.w	8006572 <_printf_float+0xb6>
 800683a:	9a06      	ldr	r2, [sp, #24]
 800683c:	f10b 0b01 	add.w	fp, fp, #1
 8006840:	e7bb      	b.n	80067ba <_printf_float+0x2fe>
 8006842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	d1c0      	bne.n	80067d2 <_printf_float+0x316>
 8006850:	e68f      	b.n	8006572 <_printf_float+0xb6>
 8006852:	9a06      	ldr	r2, [sp, #24]
 8006854:	464b      	mov	r3, r9
 8006856:	4442      	add	r2, r8
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	d1c3      	bne.n	80067ea <_printf_float+0x32e>
 8006862:	e686      	b.n	8006572 <_printf_float+0xb6>
 8006864:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006868:	f1ba 0f01 	cmp.w	sl, #1
 800686c:	dc01      	bgt.n	8006872 <_printf_float+0x3b6>
 800686e:	07db      	lsls	r3, r3, #31
 8006870:	d536      	bpl.n	80068e0 <_printf_float+0x424>
 8006872:	2301      	movs	r3, #1
 8006874:	4642      	mov	r2, r8
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae78 	beq.w	8006572 <_printf_float+0xb6>
 8006882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f ae70 	beq.w	8006572 <_printf_float+0xb6>
 8006892:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006896:	2200      	movs	r2, #0
 8006898:	2300      	movs	r3, #0
 800689a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800689e:	f7fa f8eb 	bl	8000a78 <__aeabi_dcmpeq>
 80068a2:	b9c0      	cbnz	r0, 80068d6 <_printf_float+0x41a>
 80068a4:	4653      	mov	r3, sl
 80068a6:	f108 0201 	add.w	r2, r8, #1
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d10c      	bne.n	80068ce <_printf_float+0x412>
 80068b4:	e65d      	b.n	8006572 <_printf_float+0xb6>
 80068b6:	2301      	movs	r3, #1
 80068b8:	465a      	mov	r2, fp
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f ae56 	beq.w	8006572 <_printf_float+0xb6>
 80068c6:	f108 0801 	add.w	r8, r8, #1
 80068ca:	45d0      	cmp	r8, sl
 80068cc:	dbf3      	blt.n	80068b6 <_printf_float+0x3fa>
 80068ce:	464b      	mov	r3, r9
 80068d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068d4:	e6df      	b.n	8006696 <_printf_float+0x1da>
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	f104 0b1a 	add.w	fp, r4, #26
 80068de:	e7f4      	b.n	80068ca <_printf_float+0x40e>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4642      	mov	r2, r8
 80068e4:	e7e1      	b.n	80068aa <_printf_float+0x3ee>
 80068e6:	2301      	movs	r3, #1
 80068e8:	464a      	mov	r2, r9
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f ae3e 	beq.w	8006572 <_printf_float+0xb6>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068fe:	1a5b      	subs	r3, r3, r1
 8006900:	4543      	cmp	r3, r8
 8006902:	dcf0      	bgt.n	80068e6 <_printf_float+0x42a>
 8006904:	e6fc      	b.n	8006700 <_printf_float+0x244>
 8006906:	f04f 0800 	mov.w	r8, #0
 800690a:	f104 0919 	add.w	r9, r4, #25
 800690e:	e7f4      	b.n	80068fa <_printf_float+0x43e>

08006910 <_printf_common>:
 8006910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	4616      	mov	r6, r2
 8006916:	4698      	mov	r8, r3
 8006918:	688a      	ldr	r2, [r1, #8]
 800691a:	690b      	ldr	r3, [r1, #16]
 800691c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006920:	4293      	cmp	r3, r2
 8006922:	bfb8      	it	lt
 8006924:	4613      	movlt	r3, r2
 8006926:	6033      	str	r3, [r6, #0]
 8006928:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800692c:	4607      	mov	r7, r0
 800692e:	460c      	mov	r4, r1
 8006930:	b10a      	cbz	r2, 8006936 <_printf_common+0x26>
 8006932:	3301      	adds	r3, #1
 8006934:	6033      	str	r3, [r6, #0]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	0699      	lsls	r1, r3, #26
 800693a:	bf42      	ittt	mi
 800693c:	6833      	ldrmi	r3, [r6, #0]
 800693e:	3302      	addmi	r3, #2
 8006940:	6033      	strmi	r3, [r6, #0]
 8006942:	6825      	ldr	r5, [r4, #0]
 8006944:	f015 0506 	ands.w	r5, r5, #6
 8006948:	d106      	bne.n	8006958 <_printf_common+0x48>
 800694a:	f104 0a19 	add.w	sl, r4, #25
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	6832      	ldr	r2, [r6, #0]
 8006952:	1a9b      	subs	r3, r3, r2
 8006954:	42ab      	cmp	r3, r5
 8006956:	dc26      	bgt.n	80069a6 <_printf_common+0x96>
 8006958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800695c:	6822      	ldr	r2, [r4, #0]
 800695e:	3b00      	subs	r3, #0
 8006960:	bf18      	it	ne
 8006962:	2301      	movne	r3, #1
 8006964:	0692      	lsls	r2, r2, #26
 8006966:	d42b      	bmi.n	80069c0 <_printf_common+0xb0>
 8006968:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800696c:	4641      	mov	r1, r8
 800696e:	4638      	mov	r0, r7
 8006970:	47c8      	blx	r9
 8006972:	3001      	adds	r0, #1
 8006974:	d01e      	beq.n	80069b4 <_printf_common+0xa4>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	6922      	ldr	r2, [r4, #16]
 800697a:	f003 0306 	and.w	r3, r3, #6
 800697e:	2b04      	cmp	r3, #4
 8006980:	bf02      	ittt	eq
 8006982:	68e5      	ldreq	r5, [r4, #12]
 8006984:	6833      	ldreq	r3, [r6, #0]
 8006986:	1aed      	subeq	r5, r5, r3
 8006988:	68a3      	ldr	r3, [r4, #8]
 800698a:	bf0c      	ite	eq
 800698c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006990:	2500      	movne	r5, #0
 8006992:	4293      	cmp	r3, r2
 8006994:	bfc4      	itt	gt
 8006996:	1a9b      	subgt	r3, r3, r2
 8006998:	18ed      	addgt	r5, r5, r3
 800699a:	2600      	movs	r6, #0
 800699c:	341a      	adds	r4, #26
 800699e:	42b5      	cmp	r5, r6
 80069a0:	d11a      	bne.n	80069d8 <_printf_common+0xc8>
 80069a2:	2000      	movs	r0, #0
 80069a4:	e008      	b.n	80069b8 <_printf_common+0xa8>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4652      	mov	r2, sl
 80069aa:	4641      	mov	r1, r8
 80069ac:	4638      	mov	r0, r7
 80069ae:	47c8      	blx	r9
 80069b0:	3001      	adds	r0, #1
 80069b2:	d103      	bne.n	80069bc <_printf_common+0xac>
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069bc:	3501      	adds	r5, #1
 80069be:	e7c6      	b.n	800694e <_printf_common+0x3e>
 80069c0:	18e1      	adds	r1, r4, r3
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	2030      	movs	r0, #48	@ 0x30
 80069c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069ca:	4422      	add	r2, r4
 80069cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069d4:	3302      	adds	r3, #2
 80069d6:	e7c7      	b.n	8006968 <_printf_common+0x58>
 80069d8:	2301      	movs	r3, #1
 80069da:	4622      	mov	r2, r4
 80069dc:	4641      	mov	r1, r8
 80069de:	4638      	mov	r0, r7
 80069e0:	47c8      	blx	r9
 80069e2:	3001      	adds	r0, #1
 80069e4:	d0e6      	beq.n	80069b4 <_printf_common+0xa4>
 80069e6:	3601      	adds	r6, #1
 80069e8:	e7d9      	b.n	800699e <_printf_common+0x8e>
	...

080069ec <_printf_i>:
 80069ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f0:	7e0f      	ldrb	r7, [r1, #24]
 80069f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069f4:	2f78      	cmp	r7, #120	@ 0x78
 80069f6:	4691      	mov	r9, r2
 80069f8:	4680      	mov	r8, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	469a      	mov	sl, r3
 80069fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a02:	d807      	bhi.n	8006a14 <_printf_i+0x28>
 8006a04:	2f62      	cmp	r7, #98	@ 0x62
 8006a06:	d80a      	bhi.n	8006a1e <_printf_i+0x32>
 8006a08:	2f00      	cmp	r7, #0
 8006a0a:	f000 80d1 	beq.w	8006bb0 <_printf_i+0x1c4>
 8006a0e:	2f58      	cmp	r7, #88	@ 0x58
 8006a10:	f000 80b8 	beq.w	8006b84 <_printf_i+0x198>
 8006a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a1c:	e03a      	b.n	8006a94 <_printf_i+0xa8>
 8006a1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a22:	2b15      	cmp	r3, #21
 8006a24:	d8f6      	bhi.n	8006a14 <_printf_i+0x28>
 8006a26:	a101      	add	r1, pc, #4	@ (adr r1, 8006a2c <_printf_i+0x40>)
 8006a28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a99 	.word	0x08006a99
 8006a34:	08006a15 	.word	0x08006a15
 8006a38:	08006a15 	.word	0x08006a15
 8006a3c:	08006a15 	.word	0x08006a15
 8006a40:	08006a15 	.word	0x08006a15
 8006a44:	08006a99 	.word	0x08006a99
 8006a48:	08006a15 	.word	0x08006a15
 8006a4c:	08006a15 	.word	0x08006a15
 8006a50:	08006a15 	.word	0x08006a15
 8006a54:	08006a15 	.word	0x08006a15
 8006a58:	08006b97 	.word	0x08006b97
 8006a5c:	08006ac3 	.word	0x08006ac3
 8006a60:	08006b51 	.word	0x08006b51
 8006a64:	08006a15 	.word	0x08006a15
 8006a68:	08006a15 	.word	0x08006a15
 8006a6c:	08006bb9 	.word	0x08006bb9
 8006a70:	08006a15 	.word	0x08006a15
 8006a74:	08006ac3 	.word	0x08006ac3
 8006a78:	08006a15 	.word	0x08006a15
 8006a7c:	08006a15 	.word	0x08006a15
 8006a80:	08006b59 	.word	0x08006b59
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	1d1a      	adds	r2, r3, #4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6032      	str	r2, [r6, #0]
 8006a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a94:	2301      	movs	r3, #1
 8006a96:	e09c      	b.n	8006bd2 <_printf_i+0x1e6>
 8006a98:	6833      	ldr	r3, [r6, #0]
 8006a9a:	6820      	ldr	r0, [r4, #0]
 8006a9c:	1d19      	adds	r1, r3, #4
 8006a9e:	6031      	str	r1, [r6, #0]
 8006aa0:	0606      	lsls	r6, r0, #24
 8006aa2:	d501      	bpl.n	8006aa8 <_printf_i+0xbc>
 8006aa4:	681d      	ldr	r5, [r3, #0]
 8006aa6:	e003      	b.n	8006ab0 <_printf_i+0xc4>
 8006aa8:	0645      	lsls	r5, r0, #25
 8006aaa:	d5fb      	bpl.n	8006aa4 <_printf_i+0xb8>
 8006aac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	da03      	bge.n	8006abc <_printf_i+0xd0>
 8006ab4:	232d      	movs	r3, #45	@ 0x2d
 8006ab6:	426d      	negs	r5, r5
 8006ab8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006abc:	4858      	ldr	r0, [pc, #352]	@ (8006c20 <_printf_i+0x234>)
 8006abe:	230a      	movs	r3, #10
 8006ac0:	e011      	b.n	8006ae6 <_printf_i+0xfa>
 8006ac2:	6821      	ldr	r1, [r4, #0]
 8006ac4:	6833      	ldr	r3, [r6, #0]
 8006ac6:	0608      	lsls	r0, r1, #24
 8006ac8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006acc:	d402      	bmi.n	8006ad4 <_printf_i+0xe8>
 8006ace:	0649      	lsls	r1, r1, #25
 8006ad0:	bf48      	it	mi
 8006ad2:	b2ad      	uxthmi	r5, r5
 8006ad4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ad6:	4852      	ldr	r0, [pc, #328]	@ (8006c20 <_printf_i+0x234>)
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	bf14      	ite	ne
 8006adc:	230a      	movne	r3, #10
 8006ade:	2308      	moveq	r3, #8
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ae6:	6866      	ldr	r6, [r4, #4]
 8006ae8:	60a6      	str	r6, [r4, #8]
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	db05      	blt.n	8006afa <_printf_i+0x10e>
 8006aee:	6821      	ldr	r1, [r4, #0]
 8006af0:	432e      	orrs	r6, r5
 8006af2:	f021 0104 	bic.w	r1, r1, #4
 8006af6:	6021      	str	r1, [r4, #0]
 8006af8:	d04b      	beq.n	8006b92 <_printf_i+0x1a6>
 8006afa:	4616      	mov	r6, r2
 8006afc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b00:	fb03 5711 	mls	r7, r3, r1, r5
 8006b04:	5dc7      	ldrb	r7, [r0, r7]
 8006b06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b0a:	462f      	mov	r7, r5
 8006b0c:	42bb      	cmp	r3, r7
 8006b0e:	460d      	mov	r5, r1
 8006b10:	d9f4      	bls.n	8006afc <_printf_i+0x110>
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d10b      	bne.n	8006b2e <_printf_i+0x142>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	07df      	lsls	r7, r3, #31
 8006b1a:	d508      	bpl.n	8006b2e <_printf_i+0x142>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	6861      	ldr	r1, [r4, #4]
 8006b20:	4299      	cmp	r1, r3
 8006b22:	bfde      	ittt	le
 8006b24:	2330      	movle	r3, #48	@ 0x30
 8006b26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b2e:	1b92      	subs	r2, r2, r6
 8006b30:	6122      	str	r2, [r4, #16]
 8006b32:	f8cd a000 	str.w	sl, [sp]
 8006b36:	464b      	mov	r3, r9
 8006b38:	aa03      	add	r2, sp, #12
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	f7ff fee7 	bl	8006910 <_printf_common>
 8006b42:	3001      	adds	r0, #1
 8006b44:	d14a      	bne.n	8006bdc <_printf_i+0x1f0>
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	b004      	add	sp, #16
 8006b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	f043 0320 	orr.w	r3, r3, #32
 8006b56:	6023      	str	r3, [r4, #0]
 8006b58:	4832      	ldr	r0, [pc, #200]	@ (8006c24 <_printf_i+0x238>)
 8006b5a:	2778      	movs	r7, #120	@ 0x78
 8006b5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	6831      	ldr	r1, [r6, #0]
 8006b64:	061f      	lsls	r7, r3, #24
 8006b66:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b6a:	d402      	bmi.n	8006b72 <_printf_i+0x186>
 8006b6c:	065f      	lsls	r7, r3, #25
 8006b6e:	bf48      	it	mi
 8006b70:	b2ad      	uxthmi	r5, r5
 8006b72:	6031      	str	r1, [r6, #0]
 8006b74:	07d9      	lsls	r1, r3, #31
 8006b76:	bf44      	itt	mi
 8006b78:	f043 0320 	orrmi.w	r3, r3, #32
 8006b7c:	6023      	strmi	r3, [r4, #0]
 8006b7e:	b11d      	cbz	r5, 8006b88 <_printf_i+0x19c>
 8006b80:	2310      	movs	r3, #16
 8006b82:	e7ad      	b.n	8006ae0 <_printf_i+0xf4>
 8006b84:	4826      	ldr	r0, [pc, #152]	@ (8006c20 <_printf_i+0x234>)
 8006b86:	e7e9      	b.n	8006b5c <_printf_i+0x170>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	f023 0320 	bic.w	r3, r3, #32
 8006b8e:	6023      	str	r3, [r4, #0]
 8006b90:	e7f6      	b.n	8006b80 <_printf_i+0x194>
 8006b92:	4616      	mov	r6, r2
 8006b94:	e7bd      	b.n	8006b12 <_printf_i+0x126>
 8006b96:	6833      	ldr	r3, [r6, #0]
 8006b98:	6825      	ldr	r5, [r4, #0]
 8006b9a:	6961      	ldr	r1, [r4, #20]
 8006b9c:	1d18      	adds	r0, r3, #4
 8006b9e:	6030      	str	r0, [r6, #0]
 8006ba0:	062e      	lsls	r6, r5, #24
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	d501      	bpl.n	8006baa <_printf_i+0x1be>
 8006ba6:	6019      	str	r1, [r3, #0]
 8006ba8:	e002      	b.n	8006bb0 <_printf_i+0x1c4>
 8006baa:	0668      	lsls	r0, r5, #25
 8006bac:	d5fb      	bpl.n	8006ba6 <_printf_i+0x1ba>
 8006bae:	8019      	strh	r1, [r3, #0]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	e7bc      	b.n	8006b32 <_printf_i+0x146>
 8006bb8:	6833      	ldr	r3, [r6, #0]
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	6032      	str	r2, [r6, #0]
 8006bbe:	681e      	ldr	r6, [r3, #0]
 8006bc0:	6862      	ldr	r2, [r4, #4]
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7f9 fadb 	bl	8000180 <memchr>
 8006bca:	b108      	cbz	r0, 8006bd0 <_printf_i+0x1e4>
 8006bcc:	1b80      	subs	r0, r0, r6
 8006bce:	6060      	str	r0, [r4, #4]
 8006bd0:	6863      	ldr	r3, [r4, #4]
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bda:	e7aa      	b.n	8006b32 <_printf_i+0x146>
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	4632      	mov	r2, r6
 8006be0:	4649      	mov	r1, r9
 8006be2:	4640      	mov	r0, r8
 8006be4:	47d0      	blx	sl
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0ad      	beq.n	8006b46 <_printf_i+0x15a>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	079b      	lsls	r3, r3, #30
 8006bee:	d413      	bmi.n	8006c18 <_printf_i+0x22c>
 8006bf0:	68e0      	ldr	r0, [r4, #12]
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	4298      	cmp	r0, r3
 8006bf6:	bfb8      	it	lt
 8006bf8:	4618      	movlt	r0, r3
 8006bfa:	e7a6      	b.n	8006b4a <_printf_i+0x15e>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4632      	mov	r2, r6
 8006c00:	4649      	mov	r1, r9
 8006c02:	4640      	mov	r0, r8
 8006c04:	47d0      	blx	sl
 8006c06:	3001      	adds	r0, #1
 8006c08:	d09d      	beq.n	8006b46 <_printf_i+0x15a>
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	68e3      	ldr	r3, [r4, #12]
 8006c0e:	9903      	ldr	r1, [sp, #12]
 8006c10:	1a5b      	subs	r3, r3, r1
 8006c12:	42ab      	cmp	r3, r5
 8006c14:	dcf2      	bgt.n	8006bfc <_printf_i+0x210>
 8006c16:	e7eb      	b.n	8006bf0 <_printf_i+0x204>
 8006c18:	2500      	movs	r5, #0
 8006c1a:	f104 0619 	add.w	r6, r4, #25
 8006c1e:	e7f5      	b.n	8006c0c <_printf_i+0x220>
 8006c20:	0800940e 	.word	0x0800940e
 8006c24:	0800941f 	.word	0x0800941f

08006c28 <std>:
 8006c28:	2300      	movs	r3, #0
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c36:	6083      	str	r3, [r0, #8]
 8006c38:	8181      	strh	r1, [r0, #12]
 8006c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c3c:	81c2      	strh	r2, [r0, #14]
 8006c3e:	6183      	str	r3, [r0, #24]
 8006c40:	4619      	mov	r1, r3
 8006c42:	2208      	movs	r2, #8
 8006c44:	305c      	adds	r0, #92	@ 0x5c
 8006c46:	f000 f931 	bl	8006eac <memset>
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <std+0x58>)
 8006c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <std+0x5c>)
 8006c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c52:	4b0d      	ldr	r3, [pc, #52]	@ (8006c88 <std+0x60>)
 8006c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c56:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <std+0x64>)
 8006c58:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c90 <std+0x68>)
 8006c5c:	6224      	str	r4, [r4, #32]
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d006      	beq.n	8006c70 <std+0x48>
 8006c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c66:	4294      	cmp	r4, r2
 8006c68:	d002      	beq.n	8006c70 <std+0x48>
 8006c6a:	33d0      	adds	r3, #208	@ 0xd0
 8006c6c:	429c      	cmp	r4, r3
 8006c6e:	d105      	bne.n	8006c7c <std+0x54>
 8006c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c78:	f000 b994 	b.w	8006fa4 <__retarget_lock_init_recursive>
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	bf00      	nop
 8006c80:	08006dad 	.word	0x08006dad
 8006c84:	08006dcf 	.word	0x08006dcf
 8006c88:	08006e07 	.word	0x08006e07
 8006c8c:	08006e2b 	.word	0x08006e2b
 8006c90:	20000670 	.word	0x20000670

08006c94 <stdio_exit_handler>:
 8006c94:	4a02      	ldr	r2, [pc, #8]	@ (8006ca0 <stdio_exit_handler+0xc>)
 8006c96:	4903      	ldr	r1, [pc, #12]	@ (8006ca4 <stdio_exit_handler+0x10>)
 8006c98:	4803      	ldr	r0, [pc, #12]	@ (8006ca8 <stdio_exit_handler+0x14>)
 8006c9a:	f000 b869 	b.w	8006d70 <_fwalk_sglue>
 8006c9e:	bf00      	nop
 8006ca0:	20000048 	.word	0x20000048
 8006ca4:	08008925 	.word	0x08008925
 8006ca8:	20000058 	.word	0x20000058

08006cac <cleanup_stdio>:
 8006cac:	6841      	ldr	r1, [r0, #4]
 8006cae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <cleanup_stdio+0x34>)
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	d001      	beq.n	8006cbc <cleanup_stdio+0x10>
 8006cb8:	f001 fe34 	bl	8008924 <_fflush_r>
 8006cbc:	68a1      	ldr	r1, [r4, #8]
 8006cbe:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <cleanup_stdio+0x38>)
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <cleanup_stdio+0x1e>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f001 fe2d 	bl	8008924 <_fflush_r>
 8006cca:	68e1      	ldr	r1, [r4, #12]
 8006ccc:	4b06      	ldr	r3, [pc, #24]	@ (8006ce8 <cleanup_stdio+0x3c>)
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d004      	beq.n	8006cdc <cleanup_stdio+0x30>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd8:	f001 be24 	b.w	8008924 <_fflush_r>
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000670 	.word	0x20000670
 8006ce4:	200006d8 	.word	0x200006d8
 8006ce8:	20000740 	.word	0x20000740

08006cec <global_stdio_init.part.0>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <global_stdio_init.part.0+0x30>)
 8006cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8006d20 <global_stdio_init.part.0+0x34>)
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d24 <global_stdio_init.part.0+0x38>)
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	f7ff ff94 	bl	8006c28 <std>
 8006d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d04:	2201      	movs	r2, #1
 8006d06:	2109      	movs	r1, #9
 8006d08:	f7ff ff8e 	bl	8006c28 <std>
 8006d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d10:	2202      	movs	r2, #2
 8006d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d16:	2112      	movs	r1, #18
 8006d18:	f7ff bf86 	b.w	8006c28 <std>
 8006d1c:	200007a8 	.word	0x200007a8
 8006d20:	20000670 	.word	0x20000670
 8006d24:	08006c95 	.word	0x08006c95

08006d28 <__sfp_lock_acquire>:
 8006d28:	4801      	ldr	r0, [pc, #4]	@ (8006d30 <__sfp_lock_acquire+0x8>)
 8006d2a:	f000 b93c 	b.w	8006fa6 <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	200007b1 	.word	0x200007b1

08006d34 <__sfp_lock_release>:
 8006d34:	4801      	ldr	r0, [pc, #4]	@ (8006d3c <__sfp_lock_release+0x8>)
 8006d36:	f000 b937 	b.w	8006fa8 <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	200007b1 	.word	0x200007b1

08006d40 <__sinit>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	f7ff fff0 	bl	8006d28 <__sfp_lock_acquire>
 8006d48:	6a23      	ldr	r3, [r4, #32]
 8006d4a:	b11b      	cbz	r3, 8006d54 <__sinit+0x14>
 8006d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d50:	f7ff bff0 	b.w	8006d34 <__sfp_lock_release>
 8006d54:	4b04      	ldr	r3, [pc, #16]	@ (8006d68 <__sinit+0x28>)
 8006d56:	6223      	str	r3, [r4, #32]
 8006d58:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <__sinit+0x2c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f5      	bne.n	8006d4c <__sinit+0xc>
 8006d60:	f7ff ffc4 	bl	8006cec <global_stdio_init.part.0>
 8006d64:	e7f2      	b.n	8006d4c <__sinit+0xc>
 8006d66:	bf00      	nop
 8006d68:	08006cad 	.word	0x08006cad
 8006d6c:	200007a8 	.word	0x200007a8

08006d70 <_fwalk_sglue>:
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	4607      	mov	r7, r0
 8006d76:	4688      	mov	r8, r1
 8006d78:	4614      	mov	r4, r2
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d80:	f1b9 0901 	subs.w	r9, r9, #1
 8006d84:	d505      	bpl.n	8006d92 <_fwalk_sglue+0x22>
 8006d86:	6824      	ldr	r4, [r4, #0]
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d1f7      	bne.n	8006d7c <_fwalk_sglue+0xc>
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d907      	bls.n	8006da8 <_fwalk_sglue+0x38>
 8006d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	d003      	beq.n	8006da8 <_fwalk_sglue+0x38>
 8006da0:	4629      	mov	r1, r5
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c0      	blx	r8
 8006da6:	4306      	orrs	r6, r0
 8006da8:	3568      	adds	r5, #104	@ 0x68
 8006daa:	e7e9      	b.n	8006d80 <_fwalk_sglue+0x10>

08006dac <__sread>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db4:	f000 f8a8 	bl	8006f08 <_read_r>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	bfab      	itete	ge
 8006dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc0:	181b      	addge	r3, r3, r0
 8006dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dc6:	bfac      	ite	ge
 8006dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dca:	81a3      	strhlt	r3, [r4, #12]
 8006dcc:	bd10      	pop	{r4, pc}

08006dce <__swrite>:
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	05db      	lsls	r3, r3, #23
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4616      	mov	r6, r2
 8006dde:	d505      	bpl.n	8006dec <__swrite+0x1e>
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	2302      	movs	r3, #2
 8006de6:	2200      	movs	r2, #0
 8006de8:	f000 f87c 	bl	8006ee4 <_lseek_r>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	f000 b893 	b.w	8006f2c <_write_r>

08006e06 <__sseek>:
 8006e06:	b510      	push	{r4, lr}
 8006e08:	460c      	mov	r4, r1
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 f869 	bl	8006ee4 <_lseek_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	bf15      	itete	ne
 8006e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e22:	81a3      	strheq	r3, [r4, #12]
 8006e24:	bf18      	it	ne
 8006e26:	81a3      	strhne	r3, [r4, #12]
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <__sclose>:
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 b849 	b.w	8006ec4 <_close_r>

08006e32 <_vsniprintf_r>:
 8006e32:	b530      	push	{r4, r5, lr}
 8006e34:	4614      	mov	r4, r2
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	b09b      	sub	sp, #108	@ 0x6c
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	da05      	bge.n	8006e4c <_vsniprintf_r+0x1a>
 8006e40:	238b      	movs	r3, #139	@ 0x8b
 8006e42:	6003      	str	r3, [r0, #0]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	b01b      	add	sp, #108	@ 0x6c
 8006e4a:	bd30      	pop	{r4, r5, pc}
 8006e4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e50:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006e54:	f04f 0300 	mov.w	r3, #0
 8006e58:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e5a:	bf14      	ite	ne
 8006e5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e60:	4623      	moveq	r3, r4
 8006e62:	9302      	str	r3, [sp, #8]
 8006e64:	9305      	str	r3, [sp, #20]
 8006e66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e6a:	9100      	str	r1, [sp, #0]
 8006e6c:	9104      	str	r1, [sp, #16]
 8006e6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006e72:	4669      	mov	r1, sp
 8006e74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006e76:	f001 fbd5 	bl	8008624 <_svfiprintf_r>
 8006e7a:	1c43      	adds	r3, r0, #1
 8006e7c:	bfbc      	itt	lt
 8006e7e:	238b      	movlt	r3, #139	@ 0x8b
 8006e80:	602b      	strlt	r3, [r5, #0]
 8006e82:	2c00      	cmp	r4, #0
 8006e84:	d0e0      	beq.n	8006e48 <_vsniprintf_r+0x16>
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e7dc      	b.n	8006e48 <_vsniprintf_r+0x16>
	...

08006e90 <vsniprintf>:
 8006e90:	b507      	push	{r0, r1, r2, lr}
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	460a      	mov	r2, r1
 8006e98:	4601      	mov	r1, r0
 8006e9a:	4803      	ldr	r0, [pc, #12]	@ (8006ea8 <vsniprintf+0x18>)
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f7ff ffc8 	bl	8006e32 <_vsniprintf_r>
 8006ea2:	b003      	add	sp, #12
 8006ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ea8:	20000054 	.word	0x20000054

08006eac <memset>:
 8006eac:	4402      	add	r2, r0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d100      	bne.n	8006eb6 <memset+0xa>
 8006eb4:	4770      	bx	lr
 8006eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eba:	e7f9      	b.n	8006eb0 <memset+0x4>

08006ebc <_localeconv_r>:
 8006ebc:	4800      	ldr	r0, [pc, #0]	@ (8006ec0 <_localeconv_r+0x4>)
 8006ebe:	4770      	bx	lr
 8006ec0:	20000194 	.word	0x20000194

08006ec4 <_close_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d06      	ldr	r5, [pc, #24]	@ (8006ee0 <_close_r+0x1c>)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	602b      	str	r3, [r5, #0]
 8006ed0:	f7fa ffac 	bl	8001e2c <_close>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_close_r+0x1a>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_close_r+0x1a>
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	200007ac 	.word	0x200007ac

08006ee4 <_lseek_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	@ (8006f04 <_lseek_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7fa ffc1 	bl	8001e7a <_lseek>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_lseek_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_lseek_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	200007ac 	.word	0x200007ac

08006f08 <_read_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	@ (8006f28 <_read_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fa ff4f 	bl	8001dba <_read>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_read_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_read_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	200007ac 	.word	0x200007ac

08006f2c <_write_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	@ (8006f4c <_write_r+0x20>)
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7fa ff5a 	bl	8001df4 <_write>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_write_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_write_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	200007ac 	.word	0x200007ac

08006f50 <__errno>:
 8006f50:	4b01      	ldr	r3, [pc, #4]	@ (8006f58 <__errno+0x8>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000054 	.word	0x20000054

08006f5c <__libc_init_array>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f94 <__libc_init_array+0x38>)
 8006f60:	4c0d      	ldr	r4, [pc, #52]	@ (8006f98 <__libc_init_array+0x3c>)
 8006f62:	1b64      	subs	r4, r4, r5
 8006f64:	10a4      	asrs	r4, r4, #2
 8006f66:	2600      	movs	r6, #0
 8006f68:	42a6      	cmp	r6, r4
 8006f6a:	d109      	bne.n	8006f80 <__libc_init_array+0x24>
 8006f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f9c <__libc_init_array+0x40>)
 8006f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006fa0 <__libc_init_array+0x44>)
 8006f70:	f002 f868 	bl	8009044 <_init>
 8006f74:	1b64      	subs	r4, r4, r5
 8006f76:	10a4      	asrs	r4, r4, #2
 8006f78:	2600      	movs	r6, #0
 8006f7a:	42a6      	cmp	r6, r4
 8006f7c:	d105      	bne.n	8006f8a <__libc_init_array+0x2e>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f84:	4798      	blx	r3
 8006f86:	3601      	adds	r6, #1
 8006f88:	e7ee      	b.n	8006f68 <__libc_init_array+0xc>
 8006f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8e:	4798      	blx	r3
 8006f90:	3601      	adds	r6, #1
 8006f92:	e7f2      	b.n	8006f7a <__libc_init_array+0x1e>
 8006f94:	0800977c 	.word	0x0800977c
 8006f98:	0800977c 	.word	0x0800977c
 8006f9c:	0800977c 	.word	0x0800977c
 8006fa0:	08009780 	.word	0x08009780

08006fa4 <__retarget_lock_init_recursive>:
 8006fa4:	4770      	bx	lr

08006fa6 <__retarget_lock_acquire_recursive>:
 8006fa6:	4770      	bx	lr

08006fa8 <__retarget_lock_release_recursive>:
 8006fa8:	4770      	bx	lr

08006faa <memcpy>:
 8006faa:	440a      	add	r2, r1
 8006fac:	4291      	cmp	r1, r2
 8006fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb2:	d100      	bne.n	8006fb6 <memcpy+0xc>
 8006fb4:	4770      	bx	lr
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc0:	4291      	cmp	r1, r2
 8006fc2:	d1f9      	bne.n	8006fb8 <memcpy+0xe>
 8006fc4:	bd10      	pop	{r4, pc}

08006fc6 <quorem>:
 8006fc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fca:	6903      	ldr	r3, [r0, #16]
 8006fcc:	690c      	ldr	r4, [r1, #16]
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	db7e      	blt.n	80070d2 <quorem+0x10c>
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	f101 0814 	add.w	r8, r1, #20
 8006fda:	00a3      	lsls	r3, r4, #2
 8006fdc:	f100 0514 	add.w	r5, r0, #20
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ffc:	d32e      	bcc.n	800705c <quorem+0x96>
 8006ffe:	f04f 0a00 	mov.w	sl, #0
 8007002:	46c4      	mov	ip, r8
 8007004:	46ae      	mov	lr, r5
 8007006:	46d3      	mov	fp, sl
 8007008:	f85c 3b04 	ldr.w	r3, [ip], #4
 800700c:	b298      	uxth	r0, r3
 800700e:	fb06 a000 	mla	r0, r6, r0, sl
 8007012:	0c02      	lsrs	r2, r0, #16
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	fb06 2303 	mla	r3, r6, r3, r2
 800701a:	f8de 2000 	ldr.w	r2, [lr]
 800701e:	b280      	uxth	r0, r0
 8007020:	b292      	uxth	r2, r2
 8007022:	1a12      	subs	r2, r2, r0
 8007024:	445a      	add	r2, fp
 8007026:	f8de 0000 	ldr.w	r0, [lr]
 800702a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800702e:	b29b      	uxth	r3, r3
 8007030:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007034:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007038:	b292      	uxth	r2, r2
 800703a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800703e:	45e1      	cmp	r9, ip
 8007040:	f84e 2b04 	str.w	r2, [lr], #4
 8007044:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007048:	d2de      	bcs.n	8007008 <quorem+0x42>
 800704a:	9b00      	ldr	r3, [sp, #0]
 800704c:	58eb      	ldr	r3, [r5, r3]
 800704e:	b92b      	cbnz	r3, 800705c <quorem+0x96>
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	3b04      	subs	r3, #4
 8007054:	429d      	cmp	r5, r3
 8007056:	461a      	mov	r2, r3
 8007058:	d32f      	bcc.n	80070ba <quorem+0xf4>
 800705a:	613c      	str	r4, [r7, #16]
 800705c:	4638      	mov	r0, r7
 800705e:	f001 f97d 	bl	800835c <__mcmp>
 8007062:	2800      	cmp	r0, #0
 8007064:	db25      	blt.n	80070b2 <quorem+0xec>
 8007066:	4629      	mov	r1, r5
 8007068:	2000      	movs	r0, #0
 800706a:	f858 2b04 	ldr.w	r2, [r8], #4
 800706e:	f8d1 c000 	ldr.w	ip, [r1]
 8007072:	fa1f fe82 	uxth.w	lr, r2
 8007076:	fa1f f38c 	uxth.w	r3, ip
 800707a:	eba3 030e 	sub.w	r3, r3, lr
 800707e:	4403      	add	r3, r0
 8007080:	0c12      	lsrs	r2, r2, #16
 8007082:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007086:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007090:	45c1      	cmp	r9, r8
 8007092:	f841 3b04 	str.w	r3, [r1], #4
 8007096:	ea4f 4022 	mov.w	r0, r2, asr #16
 800709a:	d2e6      	bcs.n	800706a <quorem+0xa4>
 800709c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a4:	b922      	cbnz	r2, 80070b0 <quorem+0xea>
 80070a6:	3b04      	subs	r3, #4
 80070a8:	429d      	cmp	r5, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	d30b      	bcc.n	80070c6 <quorem+0x100>
 80070ae:	613c      	str	r4, [r7, #16]
 80070b0:	3601      	adds	r6, #1
 80070b2:	4630      	mov	r0, r6
 80070b4:	b003      	add	sp, #12
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	3b04      	subs	r3, #4
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d1cb      	bne.n	800705a <quorem+0x94>
 80070c2:	3c01      	subs	r4, #1
 80070c4:	e7c6      	b.n	8007054 <quorem+0x8e>
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	d1ef      	bne.n	80070ae <quorem+0xe8>
 80070ce:	3c01      	subs	r4, #1
 80070d0:	e7ea      	b.n	80070a8 <quorem+0xe2>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7ee      	b.n	80070b4 <quorem+0xee>
	...

080070d8 <_dtoa_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	69c7      	ldr	r7, [r0, #28]
 80070de:	b097      	sub	sp, #92	@ 0x5c
 80070e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80070e4:	ec55 4b10 	vmov	r4, r5, d0
 80070e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80070ea:	9107      	str	r1, [sp, #28]
 80070ec:	4681      	mov	r9, r0
 80070ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80070f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80070f2:	b97f      	cbnz	r7, 8007114 <_dtoa_r+0x3c>
 80070f4:	2010      	movs	r0, #16
 80070f6:	f000 fe09 	bl	8007d0c <malloc>
 80070fa:	4602      	mov	r2, r0
 80070fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007100:	b920      	cbnz	r0, 800710c <_dtoa_r+0x34>
 8007102:	4ba9      	ldr	r3, [pc, #676]	@ (80073a8 <_dtoa_r+0x2d0>)
 8007104:	21ef      	movs	r1, #239	@ 0xef
 8007106:	48a9      	ldr	r0, [pc, #676]	@ (80073ac <_dtoa_r+0x2d4>)
 8007108:	f001 fc5e 	bl	80089c8 <__assert_func>
 800710c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007110:	6007      	str	r7, [r0, #0]
 8007112:	60c7      	str	r7, [r0, #12]
 8007114:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	b159      	cbz	r1, 8007134 <_dtoa_r+0x5c>
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	604a      	str	r2, [r1, #4]
 8007120:	2301      	movs	r3, #1
 8007122:	4093      	lsls	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
 8007126:	4648      	mov	r0, r9
 8007128:	f000 fee6 	bl	8007ef8 <_Bfree>
 800712c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	1e2b      	subs	r3, r5, #0
 8007136:	bfb9      	ittee	lt
 8007138:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800713c:	9305      	strlt	r3, [sp, #20]
 800713e:	2300      	movge	r3, #0
 8007140:	6033      	strge	r3, [r6, #0]
 8007142:	9f05      	ldr	r7, [sp, #20]
 8007144:	4b9a      	ldr	r3, [pc, #616]	@ (80073b0 <_dtoa_r+0x2d8>)
 8007146:	bfbc      	itt	lt
 8007148:	2201      	movlt	r2, #1
 800714a:	6032      	strlt	r2, [r6, #0]
 800714c:	43bb      	bics	r3, r7
 800714e:	d112      	bne.n	8007176 <_dtoa_r+0x9e>
 8007150:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007152:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800715c:	4323      	orrs	r3, r4
 800715e:	f000 855a 	beq.w	8007c16 <_dtoa_r+0xb3e>
 8007162:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007164:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80073c4 <_dtoa_r+0x2ec>
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 855c 	beq.w	8007c26 <_dtoa_r+0xb4e>
 800716e:	f10a 0303 	add.w	r3, sl, #3
 8007172:	f000 bd56 	b.w	8007c22 <_dtoa_r+0xb4a>
 8007176:	ed9d 7b04 	vldr	d7, [sp, #16]
 800717a:	2200      	movs	r2, #0
 800717c:	ec51 0b17 	vmov	r0, r1, d7
 8007180:	2300      	movs	r3, #0
 8007182:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007186:	f7f9 fc77 	bl	8000a78 <__aeabi_dcmpeq>
 800718a:	4680      	mov	r8, r0
 800718c:	b158      	cbz	r0, 80071a6 <_dtoa_r+0xce>
 800718e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007190:	2301      	movs	r3, #1
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007196:	b113      	cbz	r3, 800719e <_dtoa_r+0xc6>
 8007198:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800719a:	4b86      	ldr	r3, [pc, #536]	@ (80073b4 <_dtoa_r+0x2dc>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80073c8 <_dtoa_r+0x2f0>
 80071a2:	f000 bd40 	b.w	8007c26 <_dtoa_r+0xb4e>
 80071a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80071aa:	aa14      	add	r2, sp, #80	@ 0x50
 80071ac:	a915      	add	r1, sp, #84	@ 0x54
 80071ae:	4648      	mov	r0, r9
 80071b0:	f001 f984 	bl	80084bc <__d2b>
 80071b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071b8:	9002      	str	r0, [sp, #8]
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	d078      	beq.n	80072b0 <_dtoa_r+0x1d8>
 80071be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80071c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071d8:	4619      	mov	r1, r3
 80071da:	2200      	movs	r2, #0
 80071dc:	4b76      	ldr	r3, [pc, #472]	@ (80073b8 <_dtoa_r+0x2e0>)
 80071de:	f7f9 f82b 	bl	8000238 <__aeabi_dsub>
 80071e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007390 <_dtoa_r+0x2b8>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f7f9 f9de 	bl	80005a8 <__aeabi_dmul>
 80071ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8007398 <_dtoa_r+0x2c0>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 f823 	bl	800023c <__adddf3>
 80071f6:	4604      	mov	r4, r0
 80071f8:	4630      	mov	r0, r6
 80071fa:	460d      	mov	r5, r1
 80071fc:	f7f9 f96a 	bl	80004d4 <__aeabi_i2d>
 8007200:	a367      	add	r3, pc, #412	@ (adr r3, 80073a0 <_dtoa_r+0x2c8>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f9 f9cf 	bl	80005a8 <__aeabi_dmul>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 f813 	bl	800023c <__adddf3>
 8007216:	4604      	mov	r4, r0
 8007218:	460d      	mov	r5, r1
 800721a:	f7f9 fc75 	bl	8000b08 <__aeabi_d2iz>
 800721e:	2200      	movs	r2, #0
 8007220:	4607      	mov	r7, r0
 8007222:	2300      	movs	r3, #0
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	f7f9 fc30 	bl	8000a8c <__aeabi_dcmplt>
 800722c:	b140      	cbz	r0, 8007240 <_dtoa_r+0x168>
 800722e:	4638      	mov	r0, r7
 8007230:	f7f9 f950 	bl	80004d4 <__aeabi_i2d>
 8007234:	4622      	mov	r2, r4
 8007236:	462b      	mov	r3, r5
 8007238:	f7f9 fc1e 	bl	8000a78 <__aeabi_dcmpeq>
 800723c:	b900      	cbnz	r0, 8007240 <_dtoa_r+0x168>
 800723e:	3f01      	subs	r7, #1
 8007240:	2f16      	cmp	r7, #22
 8007242:	d852      	bhi.n	80072ea <_dtoa_r+0x212>
 8007244:	4b5d      	ldr	r3, [pc, #372]	@ (80073bc <_dtoa_r+0x2e4>)
 8007246:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007252:	f7f9 fc1b 	bl	8000a8c <__aeabi_dcmplt>
 8007256:	2800      	cmp	r0, #0
 8007258:	d049      	beq.n	80072ee <_dtoa_r+0x216>
 800725a:	3f01      	subs	r7, #1
 800725c:	2300      	movs	r3, #0
 800725e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007260:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007262:	1b9b      	subs	r3, r3, r6
 8007264:	1e5a      	subs	r2, r3, #1
 8007266:	bf45      	ittet	mi
 8007268:	f1c3 0301 	rsbmi	r3, r3, #1
 800726c:	9300      	strmi	r3, [sp, #0]
 800726e:	2300      	movpl	r3, #0
 8007270:	2300      	movmi	r3, #0
 8007272:	9206      	str	r2, [sp, #24]
 8007274:	bf54      	ite	pl
 8007276:	9300      	strpl	r3, [sp, #0]
 8007278:	9306      	strmi	r3, [sp, #24]
 800727a:	2f00      	cmp	r7, #0
 800727c:	db39      	blt.n	80072f2 <_dtoa_r+0x21a>
 800727e:	9b06      	ldr	r3, [sp, #24]
 8007280:	970d      	str	r7, [sp, #52]	@ 0x34
 8007282:	443b      	add	r3, r7
 8007284:	9306      	str	r3, [sp, #24]
 8007286:	2300      	movs	r3, #0
 8007288:	9308      	str	r3, [sp, #32]
 800728a:	9b07      	ldr	r3, [sp, #28]
 800728c:	2b09      	cmp	r3, #9
 800728e:	d863      	bhi.n	8007358 <_dtoa_r+0x280>
 8007290:	2b05      	cmp	r3, #5
 8007292:	bfc4      	itt	gt
 8007294:	3b04      	subgt	r3, #4
 8007296:	9307      	strgt	r3, [sp, #28]
 8007298:	9b07      	ldr	r3, [sp, #28]
 800729a:	f1a3 0302 	sub.w	r3, r3, #2
 800729e:	bfcc      	ite	gt
 80072a0:	2400      	movgt	r4, #0
 80072a2:	2401      	movle	r4, #1
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d863      	bhi.n	8007370 <_dtoa_r+0x298>
 80072a8:	e8df f003 	tbb	[pc, r3]
 80072ac:	2b375452 	.word	0x2b375452
 80072b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072b4:	441e      	add	r6, r3
 80072b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	bfc1      	itttt	gt
 80072be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072c2:	409f      	lslgt	r7, r3
 80072c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072cc:	bfd6      	itet	le
 80072ce:	f1c3 0320 	rsble	r3, r3, #32
 80072d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80072d6:	fa04 f003 	lslle.w	r0, r4, r3
 80072da:	f7f9 f8eb 	bl	80004b4 <__aeabi_ui2d>
 80072de:	2201      	movs	r2, #1
 80072e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072e4:	3e01      	subs	r6, #1
 80072e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80072e8:	e776      	b.n	80071d8 <_dtoa_r+0x100>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e7b7      	b.n	800725e <_dtoa_r+0x186>
 80072ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80072f0:	e7b6      	b.n	8007260 <_dtoa_r+0x188>
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	1bdb      	subs	r3, r3, r7
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	427b      	negs	r3, r7
 80072fa:	9308      	str	r3, [sp, #32]
 80072fc:	2300      	movs	r3, #0
 80072fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8007300:	e7c3      	b.n	800728a <_dtoa_r+0x1b2>
 8007302:	2301      	movs	r3, #1
 8007304:	9309      	str	r3, [sp, #36]	@ 0x24
 8007306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007308:	eb07 0b03 	add.w	fp, r7, r3
 800730c:	f10b 0301 	add.w	r3, fp, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	bfb8      	it	lt
 8007316:	2301      	movlt	r3, #1
 8007318:	e006      	b.n	8007328 <_dtoa_r+0x250>
 800731a:	2301      	movs	r3, #1
 800731c:	9309      	str	r3, [sp, #36]	@ 0x24
 800731e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007320:	2b00      	cmp	r3, #0
 8007322:	dd28      	ble.n	8007376 <_dtoa_r+0x29e>
 8007324:	469b      	mov	fp, r3
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800732c:	2100      	movs	r1, #0
 800732e:	2204      	movs	r2, #4
 8007330:	f102 0514 	add.w	r5, r2, #20
 8007334:	429d      	cmp	r5, r3
 8007336:	d926      	bls.n	8007386 <_dtoa_r+0x2ae>
 8007338:	6041      	str	r1, [r0, #4]
 800733a:	4648      	mov	r0, r9
 800733c:	f000 fd9c 	bl	8007e78 <_Balloc>
 8007340:	4682      	mov	sl, r0
 8007342:	2800      	cmp	r0, #0
 8007344:	d142      	bne.n	80073cc <_dtoa_r+0x2f4>
 8007346:	4b1e      	ldr	r3, [pc, #120]	@ (80073c0 <_dtoa_r+0x2e8>)
 8007348:	4602      	mov	r2, r0
 800734a:	f240 11af 	movw	r1, #431	@ 0x1af
 800734e:	e6da      	b.n	8007106 <_dtoa_r+0x2e>
 8007350:	2300      	movs	r3, #0
 8007352:	e7e3      	b.n	800731c <_dtoa_r+0x244>
 8007354:	2300      	movs	r3, #0
 8007356:	e7d5      	b.n	8007304 <_dtoa_r+0x22c>
 8007358:	2401      	movs	r4, #1
 800735a:	2300      	movs	r3, #0
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007360:	f04f 3bff 	mov.w	fp, #4294967295
 8007364:	2200      	movs	r2, #0
 8007366:	f8cd b00c 	str.w	fp, [sp, #12]
 800736a:	2312      	movs	r3, #18
 800736c:	920c      	str	r2, [sp, #48]	@ 0x30
 800736e:	e7db      	b.n	8007328 <_dtoa_r+0x250>
 8007370:	2301      	movs	r3, #1
 8007372:	9309      	str	r3, [sp, #36]	@ 0x24
 8007374:	e7f4      	b.n	8007360 <_dtoa_r+0x288>
 8007376:	f04f 0b01 	mov.w	fp, #1
 800737a:	f8cd b00c 	str.w	fp, [sp, #12]
 800737e:	465b      	mov	r3, fp
 8007380:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007384:	e7d0      	b.n	8007328 <_dtoa_r+0x250>
 8007386:	3101      	adds	r1, #1
 8007388:	0052      	lsls	r2, r2, #1
 800738a:	e7d1      	b.n	8007330 <_dtoa_r+0x258>
 800738c:	f3af 8000 	nop.w
 8007390:	636f4361 	.word	0x636f4361
 8007394:	3fd287a7 	.word	0x3fd287a7
 8007398:	8b60c8b3 	.word	0x8b60c8b3
 800739c:	3fc68a28 	.word	0x3fc68a28
 80073a0:	509f79fb 	.word	0x509f79fb
 80073a4:	3fd34413 	.word	0x3fd34413
 80073a8:	0800943d 	.word	0x0800943d
 80073ac:	08009454 	.word	0x08009454
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	0800940d 	.word	0x0800940d
 80073b8:	3ff80000 	.word	0x3ff80000
 80073bc:	080095a8 	.word	0x080095a8
 80073c0:	080094ac 	.word	0x080094ac
 80073c4:	08009439 	.word	0x08009439
 80073c8:	0800940c 	.word	0x0800940c
 80073cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80073d0:	6018      	str	r0, [r3, #0]
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	2b0e      	cmp	r3, #14
 80073d6:	f200 80a1 	bhi.w	800751c <_dtoa_r+0x444>
 80073da:	2c00      	cmp	r4, #0
 80073dc:	f000 809e 	beq.w	800751c <_dtoa_r+0x444>
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	dd33      	ble.n	800744c <_dtoa_r+0x374>
 80073e4:	4b9c      	ldr	r3, [pc, #624]	@ (8007658 <_dtoa_r+0x580>)
 80073e6:	f007 020f 	and.w	r2, r7, #15
 80073ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ee:	ed93 7b00 	vldr	d7, [r3]
 80073f2:	05f8      	lsls	r0, r7, #23
 80073f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80073f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073fc:	d516      	bpl.n	800742c <_dtoa_r+0x354>
 80073fe:	4b97      	ldr	r3, [pc, #604]	@ (800765c <_dtoa_r+0x584>)
 8007400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007408:	f7f9 f9f8 	bl	80007fc <__aeabi_ddiv>
 800740c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007410:	f004 040f 	and.w	r4, r4, #15
 8007414:	2603      	movs	r6, #3
 8007416:	4d91      	ldr	r5, [pc, #580]	@ (800765c <_dtoa_r+0x584>)
 8007418:	b954      	cbnz	r4, 8007430 <_dtoa_r+0x358>
 800741a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800741e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007422:	f7f9 f9eb 	bl	80007fc <__aeabi_ddiv>
 8007426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800742a:	e028      	b.n	800747e <_dtoa_r+0x3a6>
 800742c:	2602      	movs	r6, #2
 800742e:	e7f2      	b.n	8007416 <_dtoa_r+0x33e>
 8007430:	07e1      	lsls	r1, r4, #31
 8007432:	d508      	bpl.n	8007446 <_dtoa_r+0x36e>
 8007434:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800743c:	f7f9 f8b4 	bl	80005a8 <__aeabi_dmul>
 8007440:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007444:	3601      	adds	r6, #1
 8007446:	1064      	asrs	r4, r4, #1
 8007448:	3508      	adds	r5, #8
 800744a:	e7e5      	b.n	8007418 <_dtoa_r+0x340>
 800744c:	f000 80af 	beq.w	80075ae <_dtoa_r+0x4d6>
 8007450:	427c      	negs	r4, r7
 8007452:	4b81      	ldr	r3, [pc, #516]	@ (8007658 <_dtoa_r+0x580>)
 8007454:	4d81      	ldr	r5, [pc, #516]	@ (800765c <_dtoa_r+0x584>)
 8007456:	f004 020f 	and.w	r2, r4, #15
 800745a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007466:	f7f9 f89f 	bl	80005a8 <__aeabi_dmul>
 800746a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800746e:	1124      	asrs	r4, r4, #4
 8007470:	2300      	movs	r3, #0
 8007472:	2602      	movs	r6, #2
 8007474:	2c00      	cmp	r4, #0
 8007476:	f040 808f 	bne.w	8007598 <_dtoa_r+0x4c0>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1d3      	bne.n	8007426 <_dtoa_r+0x34e>
 800747e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007480:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8094 	beq.w	80075b2 <_dtoa_r+0x4da>
 800748a:	4b75      	ldr	r3, [pc, #468]	@ (8007660 <_dtoa_r+0x588>)
 800748c:	2200      	movs	r2, #0
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	f7f9 fafb 	bl	8000a8c <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f000 808b 	beq.w	80075b2 <_dtoa_r+0x4da>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8087 	beq.w	80075b2 <_dtoa_r+0x4da>
 80074a4:	f1bb 0f00 	cmp.w	fp, #0
 80074a8:	dd34      	ble.n	8007514 <_dtoa_r+0x43c>
 80074aa:	4620      	mov	r0, r4
 80074ac:	4b6d      	ldr	r3, [pc, #436]	@ (8007664 <_dtoa_r+0x58c>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7f9 f879 	bl	80005a8 <__aeabi_dmul>
 80074b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80074be:	3601      	adds	r6, #1
 80074c0:	465c      	mov	r4, fp
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7f9 f806 	bl	80004d4 <__aeabi_i2d>
 80074c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074cc:	f7f9 f86c 	bl	80005a8 <__aeabi_dmul>
 80074d0:	4b65      	ldr	r3, [pc, #404]	@ (8007668 <_dtoa_r+0x590>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	f7f8 feb2 	bl	800023c <__adddf3>
 80074d8:	4605      	mov	r5, r0
 80074da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074de:	2c00      	cmp	r4, #0
 80074e0:	d16a      	bne.n	80075b8 <_dtoa_r+0x4e0>
 80074e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e6:	4b61      	ldr	r3, [pc, #388]	@ (800766c <_dtoa_r+0x594>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7f8 fea5 	bl	8000238 <__aeabi_dsub>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074f6:	462a      	mov	r2, r5
 80074f8:	4633      	mov	r3, r6
 80074fa:	f7f9 fae5 	bl	8000ac8 <__aeabi_dcmpgt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	f040 8298 	bne.w	8007a34 <_dtoa_r+0x95c>
 8007504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007508:	462a      	mov	r2, r5
 800750a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800750e:	f7f9 fabd 	bl	8000a8c <__aeabi_dcmplt>
 8007512:	bb38      	cbnz	r0, 8007564 <_dtoa_r+0x48c>
 8007514:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007518:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800751c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800751e:	2b00      	cmp	r3, #0
 8007520:	f2c0 8157 	blt.w	80077d2 <_dtoa_r+0x6fa>
 8007524:	2f0e      	cmp	r7, #14
 8007526:	f300 8154 	bgt.w	80077d2 <_dtoa_r+0x6fa>
 800752a:	4b4b      	ldr	r3, [pc, #300]	@ (8007658 <_dtoa_r+0x580>)
 800752c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007530:	ed93 7b00 	vldr	d7, [r3]
 8007534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	ed8d 7b00 	vstr	d7, [sp]
 800753c:	f280 80e5 	bge.w	800770a <_dtoa_r+0x632>
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f300 80e1 	bgt.w	800770a <_dtoa_r+0x632>
 8007548:	d10c      	bne.n	8007564 <_dtoa_r+0x48c>
 800754a:	4b48      	ldr	r3, [pc, #288]	@ (800766c <_dtoa_r+0x594>)
 800754c:	2200      	movs	r2, #0
 800754e:	ec51 0b17 	vmov	r0, r1, d7
 8007552:	f7f9 f829 	bl	80005a8 <__aeabi_dmul>
 8007556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755a:	f7f9 faab 	bl	8000ab4 <__aeabi_dcmpge>
 800755e:	2800      	cmp	r0, #0
 8007560:	f000 8266 	beq.w	8007a30 <_dtoa_r+0x958>
 8007564:	2400      	movs	r4, #0
 8007566:	4625      	mov	r5, r4
 8007568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800756a:	4656      	mov	r6, sl
 800756c:	ea6f 0803 	mvn.w	r8, r3
 8007570:	2700      	movs	r7, #0
 8007572:	4621      	mov	r1, r4
 8007574:	4648      	mov	r0, r9
 8007576:	f000 fcbf 	bl	8007ef8 <_Bfree>
 800757a:	2d00      	cmp	r5, #0
 800757c:	f000 80bd 	beq.w	80076fa <_dtoa_r+0x622>
 8007580:	b12f      	cbz	r7, 800758e <_dtoa_r+0x4b6>
 8007582:	42af      	cmp	r7, r5
 8007584:	d003      	beq.n	800758e <_dtoa_r+0x4b6>
 8007586:	4639      	mov	r1, r7
 8007588:	4648      	mov	r0, r9
 800758a:	f000 fcb5 	bl	8007ef8 <_Bfree>
 800758e:	4629      	mov	r1, r5
 8007590:	4648      	mov	r0, r9
 8007592:	f000 fcb1 	bl	8007ef8 <_Bfree>
 8007596:	e0b0      	b.n	80076fa <_dtoa_r+0x622>
 8007598:	07e2      	lsls	r2, r4, #31
 800759a:	d505      	bpl.n	80075a8 <_dtoa_r+0x4d0>
 800759c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075a0:	f7f9 f802 	bl	80005a8 <__aeabi_dmul>
 80075a4:	3601      	adds	r6, #1
 80075a6:	2301      	movs	r3, #1
 80075a8:	1064      	asrs	r4, r4, #1
 80075aa:	3508      	adds	r5, #8
 80075ac:	e762      	b.n	8007474 <_dtoa_r+0x39c>
 80075ae:	2602      	movs	r6, #2
 80075b0:	e765      	b.n	800747e <_dtoa_r+0x3a6>
 80075b2:	9c03      	ldr	r4, [sp, #12]
 80075b4:	46b8      	mov	r8, r7
 80075b6:	e784      	b.n	80074c2 <_dtoa_r+0x3ea>
 80075b8:	4b27      	ldr	r3, [pc, #156]	@ (8007658 <_dtoa_r+0x580>)
 80075ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075c4:	4454      	add	r4, sl
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d054      	beq.n	8007674 <_dtoa_r+0x59c>
 80075ca:	4929      	ldr	r1, [pc, #164]	@ (8007670 <_dtoa_r+0x598>)
 80075cc:	2000      	movs	r0, #0
 80075ce:	f7f9 f915 	bl	80007fc <__aeabi_ddiv>
 80075d2:	4633      	mov	r3, r6
 80075d4:	462a      	mov	r2, r5
 80075d6:	f7f8 fe2f 	bl	8000238 <__aeabi_dsub>
 80075da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075de:	4656      	mov	r6, sl
 80075e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e4:	f7f9 fa90 	bl	8000b08 <__aeabi_d2iz>
 80075e8:	4605      	mov	r5, r0
 80075ea:	f7f8 ff73 	bl	80004d4 <__aeabi_i2d>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075f6:	f7f8 fe1f 	bl	8000238 <__aeabi_dsub>
 80075fa:	3530      	adds	r5, #48	@ 0x30
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007604:	f806 5b01 	strb.w	r5, [r6], #1
 8007608:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800760c:	f7f9 fa3e 	bl	8000a8c <__aeabi_dcmplt>
 8007610:	2800      	cmp	r0, #0
 8007612:	d172      	bne.n	80076fa <_dtoa_r+0x622>
 8007614:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007618:	4911      	ldr	r1, [pc, #68]	@ (8007660 <_dtoa_r+0x588>)
 800761a:	2000      	movs	r0, #0
 800761c:	f7f8 fe0c 	bl	8000238 <__aeabi_dsub>
 8007620:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007624:	f7f9 fa32 	bl	8000a8c <__aeabi_dcmplt>
 8007628:	2800      	cmp	r0, #0
 800762a:	f040 80b4 	bne.w	8007796 <_dtoa_r+0x6be>
 800762e:	42a6      	cmp	r6, r4
 8007630:	f43f af70 	beq.w	8007514 <_dtoa_r+0x43c>
 8007634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007638:	4b0a      	ldr	r3, [pc, #40]	@ (8007664 <_dtoa_r+0x58c>)
 800763a:	2200      	movs	r2, #0
 800763c:	f7f8 ffb4 	bl	80005a8 <__aeabi_dmul>
 8007640:	4b08      	ldr	r3, [pc, #32]	@ (8007664 <_dtoa_r+0x58c>)
 8007642:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007646:	2200      	movs	r2, #0
 8007648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800764c:	f7f8 ffac 	bl	80005a8 <__aeabi_dmul>
 8007650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007654:	e7c4      	b.n	80075e0 <_dtoa_r+0x508>
 8007656:	bf00      	nop
 8007658:	080095a8 	.word	0x080095a8
 800765c:	08009580 	.word	0x08009580
 8007660:	3ff00000 	.word	0x3ff00000
 8007664:	40240000 	.word	0x40240000
 8007668:	401c0000 	.word	0x401c0000
 800766c:	40140000 	.word	0x40140000
 8007670:	3fe00000 	.word	0x3fe00000
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	f7f8 ff96 	bl	80005a8 <__aeabi_dmul>
 800767c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007680:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007682:	4656      	mov	r6, sl
 8007684:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007688:	f7f9 fa3e 	bl	8000b08 <__aeabi_d2iz>
 800768c:	4605      	mov	r5, r0
 800768e:	f7f8 ff21 	bl	80004d4 <__aeabi_i2d>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800769a:	f7f8 fdcd 	bl	8000238 <__aeabi_dsub>
 800769e:	3530      	adds	r5, #48	@ 0x30
 80076a0:	f806 5b01 	strb.w	r5, [r6], #1
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	42a6      	cmp	r6, r4
 80076aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	d124      	bne.n	80076fe <_dtoa_r+0x626>
 80076b4:	4baf      	ldr	r3, [pc, #700]	@ (8007974 <_dtoa_r+0x89c>)
 80076b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076ba:	f7f8 fdbf 	bl	800023c <__adddf3>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076c6:	f7f9 f9ff 	bl	8000ac8 <__aeabi_dcmpgt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d163      	bne.n	8007796 <_dtoa_r+0x6be>
 80076ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076d2:	49a8      	ldr	r1, [pc, #672]	@ (8007974 <_dtoa_r+0x89c>)
 80076d4:	2000      	movs	r0, #0
 80076d6:	f7f8 fdaf 	bl	8000238 <__aeabi_dsub>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e2:	f7f9 f9d3 	bl	8000a8c <__aeabi_dcmplt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f43f af14 	beq.w	8007514 <_dtoa_r+0x43c>
 80076ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80076ee:	1e73      	subs	r3, r6, #1
 80076f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076f6:	2b30      	cmp	r3, #48	@ 0x30
 80076f8:	d0f8      	beq.n	80076ec <_dtoa_r+0x614>
 80076fa:	4647      	mov	r7, r8
 80076fc:	e03b      	b.n	8007776 <_dtoa_r+0x69e>
 80076fe:	4b9e      	ldr	r3, [pc, #632]	@ (8007978 <_dtoa_r+0x8a0>)
 8007700:	f7f8 ff52 	bl	80005a8 <__aeabi_dmul>
 8007704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007708:	e7bc      	b.n	8007684 <_dtoa_r+0x5ac>
 800770a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800770e:	4656      	mov	r6, sl
 8007710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007714:	4620      	mov	r0, r4
 8007716:	4629      	mov	r1, r5
 8007718:	f7f9 f870 	bl	80007fc <__aeabi_ddiv>
 800771c:	f7f9 f9f4 	bl	8000b08 <__aeabi_d2iz>
 8007720:	4680      	mov	r8, r0
 8007722:	f7f8 fed7 	bl	80004d4 <__aeabi_i2d>
 8007726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772a:	f7f8 ff3d 	bl	80005a8 <__aeabi_dmul>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4620      	mov	r0, r4
 8007734:	4629      	mov	r1, r5
 8007736:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800773a:	f7f8 fd7d 	bl	8000238 <__aeabi_dsub>
 800773e:	f806 4b01 	strb.w	r4, [r6], #1
 8007742:	9d03      	ldr	r5, [sp, #12]
 8007744:	eba6 040a 	sub.w	r4, r6, sl
 8007748:	42a5      	cmp	r5, r4
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	d133      	bne.n	80077b8 <_dtoa_r+0x6e0>
 8007750:	f7f8 fd74 	bl	800023c <__adddf3>
 8007754:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007758:	4604      	mov	r4, r0
 800775a:	460d      	mov	r5, r1
 800775c:	f7f9 f9b4 	bl	8000ac8 <__aeabi_dcmpgt>
 8007760:	b9c0      	cbnz	r0, 8007794 <_dtoa_r+0x6bc>
 8007762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f9 f985 	bl	8000a78 <__aeabi_dcmpeq>
 800776e:	b110      	cbz	r0, 8007776 <_dtoa_r+0x69e>
 8007770:	f018 0f01 	tst.w	r8, #1
 8007774:	d10e      	bne.n	8007794 <_dtoa_r+0x6bc>
 8007776:	9902      	ldr	r1, [sp, #8]
 8007778:	4648      	mov	r0, r9
 800777a:	f000 fbbd 	bl	8007ef8 <_Bfree>
 800777e:	2300      	movs	r3, #0
 8007780:	7033      	strb	r3, [r6, #0]
 8007782:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007784:	3701      	adds	r7, #1
 8007786:	601f      	str	r7, [r3, #0]
 8007788:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 824b 	beq.w	8007c26 <_dtoa_r+0xb4e>
 8007790:	601e      	str	r6, [r3, #0]
 8007792:	e248      	b.n	8007c26 <_dtoa_r+0xb4e>
 8007794:	46b8      	mov	r8, r7
 8007796:	4633      	mov	r3, r6
 8007798:	461e      	mov	r6, r3
 800779a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800779e:	2a39      	cmp	r2, #57	@ 0x39
 80077a0:	d106      	bne.n	80077b0 <_dtoa_r+0x6d8>
 80077a2:	459a      	cmp	sl, r3
 80077a4:	d1f8      	bne.n	8007798 <_dtoa_r+0x6c0>
 80077a6:	2230      	movs	r2, #48	@ 0x30
 80077a8:	f108 0801 	add.w	r8, r8, #1
 80077ac:	f88a 2000 	strb.w	r2, [sl]
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	3201      	adds	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	e7a0      	b.n	80076fa <_dtoa_r+0x622>
 80077b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007978 <_dtoa_r+0x8a0>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fef4 	bl	80005a8 <__aeabi_dmul>
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	4604      	mov	r4, r0
 80077c6:	460d      	mov	r5, r1
 80077c8:	f7f9 f956 	bl	8000a78 <__aeabi_dcmpeq>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d09f      	beq.n	8007710 <_dtoa_r+0x638>
 80077d0:	e7d1      	b.n	8007776 <_dtoa_r+0x69e>
 80077d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077d4:	2a00      	cmp	r2, #0
 80077d6:	f000 80ea 	beq.w	80079ae <_dtoa_r+0x8d6>
 80077da:	9a07      	ldr	r2, [sp, #28]
 80077dc:	2a01      	cmp	r2, #1
 80077de:	f300 80cd 	bgt.w	800797c <_dtoa_r+0x8a4>
 80077e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	f000 80c1 	beq.w	800796c <_dtoa_r+0x894>
 80077ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077ee:	9c08      	ldr	r4, [sp, #32]
 80077f0:	9e00      	ldr	r6, [sp, #0]
 80077f2:	9a00      	ldr	r2, [sp, #0]
 80077f4:	441a      	add	r2, r3
 80077f6:	9200      	str	r2, [sp, #0]
 80077f8:	9a06      	ldr	r2, [sp, #24]
 80077fa:	2101      	movs	r1, #1
 80077fc:	441a      	add	r2, r3
 80077fe:	4648      	mov	r0, r9
 8007800:	9206      	str	r2, [sp, #24]
 8007802:	f000 fc2d 	bl	8008060 <__i2b>
 8007806:	4605      	mov	r5, r0
 8007808:	b166      	cbz	r6, 8007824 <_dtoa_r+0x74c>
 800780a:	9b06      	ldr	r3, [sp, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	dd09      	ble.n	8007824 <_dtoa_r+0x74c>
 8007810:	42b3      	cmp	r3, r6
 8007812:	9a00      	ldr	r2, [sp, #0]
 8007814:	bfa8      	it	ge
 8007816:	4633      	movge	r3, r6
 8007818:	1ad2      	subs	r2, r2, r3
 800781a:	9200      	str	r2, [sp, #0]
 800781c:	9a06      	ldr	r2, [sp, #24]
 800781e:	1af6      	subs	r6, r6, r3
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	9306      	str	r3, [sp, #24]
 8007824:	9b08      	ldr	r3, [sp, #32]
 8007826:	b30b      	cbz	r3, 800786c <_dtoa_r+0x794>
 8007828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 80c6 	beq.w	80079bc <_dtoa_r+0x8e4>
 8007830:	2c00      	cmp	r4, #0
 8007832:	f000 80c0 	beq.w	80079b6 <_dtoa_r+0x8de>
 8007836:	4629      	mov	r1, r5
 8007838:	4622      	mov	r2, r4
 800783a:	4648      	mov	r0, r9
 800783c:	f000 fcc8 	bl	80081d0 <__pow5mult>
 8007840:	9a02      	ldr	r2, [sp, #8]
 8007842:	4601      	mov	r1, r0
 8007844:	4605      	mov	r5, r0
 8007846:	4648      	mov	r0, r9
 8007848:	f000 fc20 	bl	800808c <__multiply>
 800784c:	9902      	ldr	r1, [sp, #8]
 800784e:	4680      	mov	r8, r0
 8007850:	4648      	mov	r0, r9
 8007852:	f000 fb51 	bl	8007ef8 <_Bfree>
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	1b1b      	subs	r3, r3, r4
 800785a:	9308      	str	r3, [sp, #32]
 800785c:	f000 80b1 	beq.w	80079c2 <_dtoa_r+0x8ea>
 8007860:	9a08      	ldr	r2, [sp, #32]
 8007862:	4641      	mov	r1, r8
 8007864:	4648      	mov	r0, r9
 8007866:	f000 fcb3 	bl	80081d0 <__pow5mult>
 800786a:	9002      	str	r0, [sp, #8]
 800786c:	2101      	movs	r1, #1
 800786e:	4648      	mov	r0, r9
 8007870:	f000 fbf6 	bl	8008060 <__i2b>
 8007874:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007876:	4604      	mov	r4, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 81d8 	beq.w	8007c2e <_dtoa_r+0xb56>
 800787e:	461a      	mov	r2, r3
 8007880:	4601      	mov	r1, r0
 8007882:	4648      	mov	r0, r9
 8007884:	f000 fca4 	bl	80081d0 <__pow5mult>
 8007888:	9b07      	ldr	r3, [sp, #28]
 800788a:	2b01      	cmp	r3, #1
 800788c:	4604      	mov	r4, r0
 800788e:	f300 809f 	bgt.w	80079d0 <_dtoa_r+0x8f8>
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f040 8097 	bne.w	80079c8 <_dtoa_r+0x8f0>
 800789a:	9b05      	ldr	r3, [sp, #20]
 800789c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8093 	bne.w	80079cc <_dtoa_r+0x8f4>
 80078a6:	9b05      	ldr	r3, [sp, #20]
 80078a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ac:	0d1b      	lsrs	r3, r3, #20
 80078ae:	051b      	lsls	r3, r3, #20
 80078b0:	b133      	cbz	r3, 80078c0 <_dtoa_r+0x7e8>
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	9b06      	ldr	r3, [sp, #24]
 80078ba:	3301      	adds	r3, #1
 80078bc:	9306      	str	r3, [sp, #24]
 80078be:	2301      	movs	r3, #1
 80078c0:	9308      	str	r3, [sp, #32]
 80078c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 81b8 	beq.w	8007c3a <_dtoa_r+0xb62>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078d0:	6918      	ldr	r0, [r3, #16]
 80078d2:	f000 fb79 	bl	8007fc8 <__hi0bits>
 80078d6:	f1c0 0020 	rsb	r0, r0, #32
 80078da:	9b06      	ldr	r3, [sp, #24]
 80078dc:	4418      	add	r0, r3
 80078de:	f010 001f 	ands.w	r0, r0, #31
 80078e2:	f000 8082 	beq.w	80079ea <_dtoa_r+0x912>
 80078e6:	f1c0 0320 	rsb	r3, r0, #32
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	dd73      	ble.n	80079d6 <_dtoa_r+0x8fe>
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	f1c0 001c 	rsb	r0, r0, #28
 80078f4:	4403      	add	r3, r0
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	9b06      	ldr	r3, [sp, #24]
 80078fa:	4403      	add	r3, r0
 80078fc:	4406      	add	r6, r0
 80078fe:	9306      	str	r3, [sp, #24]
 8007900:	9b00      	ldr	r3, [sp, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	dd05      	ble.n	8007912 <_dtoa_r+0x83a>
 8007906:	9902      	ldr	r1, [sp, #8]
 8007908:	461a      	mov	r2, r3
 800790a:	4648      	mov	r0, r9
 800790c:	f000 fcba 	bl	8008284 <__lshift>
 8007910:	9002      	str	r0, [sp, #8]
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dd05      	ble.n	8007924 <_dtoa_r+0x84c>
 8007918:	4621      	mov	r1, r4
 800791a:	461a      	mov	r2, r3
 800791c:	4648      	mov	r0, r9
 800791e:	f000 fcb1 	bl	8008284 <__lshift>
 8007922:	4604      	mov	r4, r0
 8007924:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d061      	beq.n	80079ee <_dtoa_r+0x916>
 800792a:	9802      	ldr	r0, [sp, #8]
 800792c:	4621      	mov	r1, r4
 800792e:	f000 fd15 	bl	800835c <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	da5b      	bge.n	80079ee <_dtoa_r+0x916>
 8007936:	2300      	movs	r3, #0
 8007938:	9902      	ldr	r1, [sp, #8]
 800793a:	220a      	movs	r2, #10
 800793c:	4648      	mov	r0, r9
 800793e:	f000 fafd 	bl	8007f3c <__multadd>
 8007942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007944:	9002      	str	r0, [sp, #8]
 8007946:	f107 38ff 	add.w	r8, r7, #4294967295
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8177 	beq.w	8007c3e <_dtoa_r+0xb66>
 8007950:	4629      	mov	r1, r5
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4648      	mov	r0, r9
 8007958:	f000 faf0 	bl	8007f3c <__multadd>
 800795c:	f1bb 0f00 	cmp.w	fp, #0
 8007960:	4605      	mov	r5, r0
 8007962:	dc6f      	bgt.n	8007a44 <_dtoa_r+0x96c>
 8007964:	9b07      	ldr	r3, [sp, #28]
 8007966:	2b02      	cmp	r3, #2
 8007968:	dc49      	bgt.n	80079fe <_dtoa_r+0x926>
 800796a:	e06b      	b.n	8007a44 <_dtoa_r+0x96c>
 800796c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800796e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007972:	e73c      	b.n	80077ee <_dtoa_r+0x716>
 8007974:	3fe00000 	.word	0x3fe00000
 8007978:	40240000 	.word	0x40240000
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	1e5c      	subs	r4, r3, #1
 8007980:	9b08      	ldr	r3, [sp, #32]
 8007982:	42a3      	cmp	r3, r4
 8007984:	db09      	blt.n	800799a <_dtoa_r+0x8c2>
 8007986:	1b1c      	subs	r4, r3, r4
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f6bf af30 	bge.w	80077f0 <_dtoa_r+0x718>
 8007990:	9b00      	ldr	r3, [sp, #0]
 8007992:	9a03      	ldr	r2, [sp, #12]
 8007994:	1a9e      	subs	r6, r3, r2
 8007996:	2300      	movs	r3, #0
 8007998:	e72b      	b.n	80077f2 <_dtoa_r+0x71a>
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800799e:	9408      	str	r4, [sp, #32]
 80079a0:	1ae3      	subs	r3, r4, r3
 80079a2:	441a      	add	r2, r3
 80079a4:	9e00      	ldr	r6, [sp, #0]
 80079a6:	9b03      	ldr	r3, [sp, #12]
 80079a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80079aa:	2400      	movs	r4, #0
 80079ac:	e721      	b.n	80077f2 <_dtoa_r+0x71a>
 80079ae:	9c08      	ldr	r4, [sp, #32]
 80079b0:	9e00      	ldr	r6, [sp, #0]
 80079b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80079b4:	e728      	b.n	8007808 <_dtoa_r+0x730>
 80079b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80079ba:	e751      	b.n	8007860 <_dtoa_r+0x788>
 80079bc:	9a08      	ldr	r2, [sp, #32]
 80079be:	9902      	ldr	r1, [sp, #8]
 80079c0:	e750      	b.n	8007864 <_dtoa_r+0x78c>
 80079c2:	f8cd 8008 	str.w	r8, [sp, #8]
 80079c6:	e751      	b.n	800786c <_dtoa_r+0x794>
 80079c8:	2300      	movs	r3, #0
 80079ca:	e779      	b.n	80078c0 <_dtoa_r+0x7e8>
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	e777      	b.n	80078c0 <_dtoa_r+0x7e8>
 80079d0:	2300      	movs	r3, #0
 80079d2:	9308      	str	r3, [sp, #32]
 80079d4:	e779      	b.n	80078ca <_dtoa_r+0x7f2>
 80079d6:	d093      	beq.n	8007900 <_dtoa_r+0x828>
 80079d8:	9a00      	ldr	r2, [sp, #0]
 80079da:	331c      	adds	r3, #28
 80079dc:	441a      	add	r2, r3
 80079de:	9200      	str	r2, [sp, #0]
 80079e0:	9a06      	ldr	r2, [sp, #24]
 80079e2:	441a      	add	r2, r3
 80079e4:	441e      	add	r6, r3
 80079e6:	9206      	str	r2, [sp, #24]
 80079e8:	e78a      	b.n	8007900 <_dtoa_r+0x828>
 80079ea:	4603      	mov	r3, r0
 80079ec:	e7f4      	b.n	80079d8 <_dtoa_r+0x900>
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	46b8      	mov	r8, r7
 80079f4:	dc20      	bgt.n	8007a38 <_dtoa_r+0x960>
 80079f6:	469b      	mov	fp, r3
 80079f8:	9b07      	ldr	r3, [sp, #28]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	dd1e      	ble.n	8007a3c <_dtoa_r+0x964>
 80079fe:	f1bb 0f00 	cmp.w	fp, #0
 8007a02:	f47f adb1 	bne.w	8007568 <_dtoa_r+0x490>
 8007a06:	4621      	mov	r1, r4
 8007a08:	465b      	mov	r3, fp
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	4648      	mov	r0, r9
 8007a0e:	f000 fa95 	bl	8007f3c <__multadd>
 8007a12:	4601      	mov	r1, r0
 8007a14:	4604      	mov	r4, r0
 8007a16:	9802      	ldr	r0, [sp, #8]
 8007a18:	f000 fca0 	bl	800835c <__mcmp>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f77f ada3 	ble.w	8007568 <_dtoa_r+0x490>
 8007a22:	4656      	mov	r6, sl
 8007a24:	2331      	movs	r3, #49	@ 0x31
 8007a26:	f806 3b01 	strb.w	r3, [r6], #1
 8007a2a:	f108 0801 	add.w	r8, r8, #1
 8007a2e:	e59f      	b.n	8007570 <_dtoa_r+0x498>
 8007a30:	9c03      	ldr	r4, [sp, #12]
 8007a32:	46b8      	mov	r8, r7
 8007a34:	4625      	mov	r5, r4
 8007a36:	e7f4      	b.n	8007a22 <_dtoa_r+0x94a>
 8007a38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 8101 	beq.w	8007c46 <_dtoa_r+0xb6e>
 8007a44:	2e00      	cmp	r6, #0
 8007a46:	dd05      	ble.n	8007a54 <_dtoa_r+0x97c>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4632      	mov	r2, r6
 8007a4c:	4648      	mov	r0, r9
 8007a4e:	f000 fc19 	bl	8008284 <__lshift>
 8007a52:	4605      	mov	r5, r0
 8007a54:	9b08      	ldr	r3, [sp, #32]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d05c      	beq.n	8007b14 <_dtoa_r+0xa3c>
 8007a5a:	6869      	ldr	r1, [r5, #4]
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	f000 fa0b 	bl	8007e78 <_Balloc>
 8007a62:	4606      	mov	r6, r0
 8007a64:	b928      	cbnz	r0, 8007a72 <_dtoa_r+0x99a>
 8007a66:	4b82      	ldr	r3, [pc, #520]	@ (8007c70 <_dtoa_r+0xb98>)
 8007a68:	4602      	mov	r2, r0
 8007a6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a6e:	f7ff bb4a 	b.w	8007106 <_dtoa_r+0x2e>
 8007a72:	692a      	ldr	r2, [r5, #16]
 8007a74:	3202      	adds	r2, #2
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	f105 010c 	add.w	r1, r5, #12
 8007a7c:	300c      	adds	r0, #12
 8007a7e:	f7ff fa94 	bl	8006faa <memcpy>
 8007a82:	2201      	movs	r2, #1
 8007a84:	4631      	mov	r1, r6
 8007a86:	4648      	mov	r0, r9
 8007a88:	f000 fbfc 	bl	8008284 <__lshift>
 8007a8c:	f10a 0301 	add.w	r3, sl, #1
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	eb0a 030b 	add.w	r3, sl, fp
 8007a96:	9308      	str	r3, [sp, #32]
 8007a98:	9b04      	ldr	r3, [sp, #16]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	462f      	mov	r7, r5
 8007aa0:	9306      	str	r3, [sp, #24]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	9802      	ldr	r0, [sp, #8]
 8007aa8:	4621      	mov	r1, r4
 8007aaa:	f103 3bff 	add.w	fp, r3, #4294967295
 8007aae:	f7ff fa8a 	bl	8006fc6 <quorem>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	3330      	adds	r3, #48	@ 0x30
 8007ab6:	9003      	str	r0, [sp, #12]
 8007ab8:	4639      	mov	r1, r7
 8007aba:	9802      	ldr	r0, [sp, #8]
 8007abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007abe:	f000 fc4d 	bl	800835c <__mcmp>
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	9004      	str	r0, [sp, #16]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4648      	mov	r0, r9
 8007aca:	f000 fc63 	bl	8008394 <__mdiff>
 8007ace:	68c2      	ldr	r2, [r0, #12]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	4606      	mov	r6, r0
 8007ad4:	bb02      	cbnz	r2, 8007b18 <_dtoa_r+0xa40>
 8007ad6:	4601      	mov	r1, r0
 8007ad8:	9802      	ldr	r0, [sp, #8]
 8007ada:	f000 fc3f 	bl	800835c <__mcmp>
 8007ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4648      	mov	r0, r9
 8007ae6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aea:	f000 fa05 	bl	8007ef8 <_Bfree>
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007af2:	9e00      	ldr	r6, [sp, #0]
 8007af4:	ea42 0103 	orr.w	r1, r2, r3
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	4319      	orrs	r1, r3
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	d10d      	bne.n	8007b1c <_dtoa_r+0xa44>
 8007b00:	2b39      	cmp	r3, #57	@ 0x39
 8007b02:	d027      	beq.n	8007b54 <_dtoa_r+0xa7c>
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dd01      	ble.n	8007b0e <_dtoa_r+0xa36>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	3331      	adds	r3, #49	@ 0x31
 8007b0e:	f88b 3000 	strb.w	r3, [fp]
 8007b12:	e52e      	b.n	8007572 <_dtoa_r+0x49a>
 8007b14:	4628      	mov	r0, r5
 8007b16:	e7b9      	b.n	8007a8c <_dtoa_r+0x9b4>
 8007b18:	2201      	movs	r2, #1
 8007b1a:	e7e2      	b.n	8007ae2 <_dtoa_r+0xa0a>
 8007b1c:	9904      	ldr	r1, [sp, #16]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	db04      	blt.n	8007b2c <_dtoa_r+0xa54>
 8007b22:	9807      	ldr	r0, [sp, #28]
 8007b24:	4301      	orrs	r1, r0
 8007b26:	9806      	ldr	r0, [sp, #24]
 8007b28:	4301      	orrs	r1, r0
 8007b2a:	d120      	bne.n	8007b6e <_dtoa_r+0xa96>
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	ddee      	ble.n	8007b0e <_dtoa_r+0xa36>
 8007b30:	9902      	ldr	r1, [sp, #8]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2201      	movs	r2, #1
 8007b36:	4648      	mov	r0, r9
 8007b38:	f000 fba4 	bl	8008284 <__lshift>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	9002      	str	r0, [sp, #8]
 8007b40:	f000 fc0c 	bl	800835c <__mcmp>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	9b00      	ldr	r3, [sp, #0]
 8007b48:	dc02      	bgt.n	8007b50 <_dtoa_r+0xa78>
 8007b4a:	d1e0      	bne.n	8007b0e <_dtoa_r+0xa36>
 8007b4c:	07da      	lsls	r2, r3, #31
 8007b4e:	d5de      	bpl.n	8007b0e <_dtoa_r+0xa36>
 8007b50:	2b39      	cmp	r3, #57	@ 0x39
 8007b52:	d1da      	bne.n	8007b0a <_dtoa_r+0xa32>
 8007b54:	2339      	movs	r3, #57	@ 0x39
 8007b56:	f88b 3000 	strb.w	r3, [fp]
 8007b5a:	4633      	mov	r3, r6
 8007b5c:	461e      	mov	r6, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b64:	2a39      	cmp	r2, #57	@ 0x39
 8007b66:	d04e      	beq.n	8007c06 <_dtoa_r+0xb2e>
 8007b68:	3201      	adds	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e501      	b.n	8007572 <_dtoa_r+0x49a>
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	dd03      	ble.n	8007b7a <_dtoa_r+0xaa2>
 8007b72:	2b39      	cmp	r3, #57	@ 0x39
 8007b74:	d0ee      	beq.n	8007b54 <_dtoa_r+0xa7c>
 8007b76:	3301      	adds	r3, #1
 8007b78:	e7c9      	b.n	8007b0e <_dtoa_r+0xa36>
 8007b7a:	9a00      	ldr	r2, [sp, #0]
 8007b7c:	9908      	ldr	r1, [sp, #32]
 8007b7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b82:	428a      	cmp	r2, r1
 8007b84:	d028      	beq.n	8007bd8 <_dtoa_r+0xb00>
 8007b86:	9902      	ldr	r1, [sp, #8]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	220a      	movs	r2, #10
 8007b8c:	4648      	mov	r0, r9
 8007b8e:	f000 f9d5 	bl	8007f3c <__multadd>
 8007b92:	42af      	cmp	r7, r5
 8007b94:	9002      	str	r0, [sp, #8]
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	f04f 020a 	mov.w	r2, #10
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	4648      	mov	r0, r9
 8007ba2:	d107      	bne.n	8007bb4 <_dtoa_r+0xadc>
 8007ba4:	f000 f9ca 	bl	8007f3c <__multadd>
 8007ba8:	4607      	mov	r7, r0
 8007baa:	4605      	mov	r5, r0
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	e777      	b.n	8007aa4 <_dtoa_r+0x9cc>
 8007bb4:	f000 f9c2 	bl	8007f3c <__multadd>
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4607      	mov	r7, r0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	220a      	movs	r2, #10
 8007bc0:	4648      	mov	r0, r9
 8007bc2:	f000 f9bb 	bl	8007f3c <__multadd>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	e7f0      	b.n	8007bac <_dtoa_r+0xad4>
 8007bca:	f1bb 0f00 	cmp.w	fp, #0
 8007bce:	bfcc      	ite	gt
 8007bd0:	465e      	movgt	r6, fp
 8007bd2:	2601      	movle	r6, #1
 8007bd4:	4456      	add	r6, sl
 8007bd6:	2700      	movs	r7, #0
 8007bd8:	9902      	ldr	r1, [sp, #8]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	4648      	mov	r0, r9
 8007be0:	f000 fb50 	bl	8008284 <__lshift>
 8007be4:	4621      	mov	r1, r4
 8007be6:	9002      	str	r0, [sp, #8]
 8007be8:	f000 fbb8 	bl	800835c <__mcmp>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	dcb4      	bgt.n	8007b5a <_dtoa_r+0xa82>
 8007bf0:	d102      	bne.n	8007bf8 <_dtoa_r+0xb20>
 8007bf2:	9b00      	ldr	r3, [sp, #0]
 8007bf4:	07db      	lsls	r3, r3, #31
 8007bf6:	d4b0      	bmi.n	8007b5a <_dtoa_r+0xa82>
 8007bf8:	4633      	mov	r3, r6
 8007bfa:	461e      	mov	r6, r3
 8007bfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c00:	2a30      	cmp	r2, #48	@ 0x30
 8007c02:	d0fa      	beq.n	8007bfa <_dtoa_r+0xb22>
 8007c04:	e4b5      	b.n	8007572 <_dtoa_r+0x49a>
 8007c06:	459a      	cmp	sl, r3
 8007c08:	d1a8      	bne.n	8007b5c <_dtoa_r+0xa84>
 8007c0a:	2331      	movs	r3, #49	@ 0x31
 8007c0c:	f108 0801 	add.w	r8, r8, #1
 8007c10:	f88a 3000 	strb.w	r3, [sl]
 8007c14:	e4ad      	b.n	8007572 <_dtoa_r+0x49a>
 8007c16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007c74 <_dtoa_r+0xb9c>
 8007c1c:	b11b      	cbz	r3, 8007c26 <_dtoa_r+0xb4e>
 8007c1e:	f10a 0308 	add.w	r3, sl, #8
 8007c22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	4650      	mov	r0, sl
 8007c28:	b017      	add	sp, #92	@ 0x5c
 8007c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2e:	9b07      	ldr	r3, [sp, #28]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	f77f ae2e 	ble.w	8007892 <_dtoa_r+0x7ba>
 8007c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	2001      	movs	r0, #1
 8007c3c:	e64d      	b.n	80078da <_dtoa_r+0x802>
 8007c3e:	f1bb 0f00 	cmp.w	fp, #0
 8007c42:	f77f aed9 	ble.w	80079f8 <_dtoa_r+0x920>
 8007c46:	4656      	mov	r6, sl
 8007c48:	9802      	ldr	r0, [sp, #8]
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	f7ff f9bb 	bl	8006fc6 <quorem>
 8007c50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007c54:	f806 3b01 	strb.w	r3, [r6], #1
 8007c58:	eba6 020a 	sub.w	r2, r6, sl
 8007c5c:	4593      	cmp	fp, r2
 8007c5e:	ddb4      	ble.n	8007bca <_dtoa_r+0xaf2>
 8007c60:	9902      	ldr	r1, [sp, #8]
 8007c62:	2300      	movs	r3, #0
 8007c64:	220a      	movs	r2, #10
 8007c66:	4648      	mov	r0, r9
 8007c68:	f000 f968 	bl	8007f3c <__multadd>
 8007c6c:	9002      	str	r0, [sp, #8]
 8007c6e:	e7eb      	b.n	8007c48 <_dtoa_r+0xb70>
 8007c70:	080094ac 	.word	0x080094ac
 8007c74:	08009430 	.word	0x08009430

08007c78 <_free_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d041      	beq.n	8007d04 <_free_r+0x8c>
 8007c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c84:	1f0c      	subs	r4, r1, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfb8      	it	lt
 8007c8a:	18e4      	addlt	r4, r4, r3
 8007c8c:	f000 f8e8 	bl	8007e60 <__malloc_lock>
 8007c90:	4a1d      	ldr	r2, [pc, #116]	@ (8007d08 <_free_r+0x90>)
 8007c92:	6813      	ldr	r3, [r2, #0]
 8007c94:	b933      	cbnz	r3, 8007ca4 <_free_r+0x2c>
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	6014      	str	r4, [r2, #0]
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ca0:	f000 b8e4 	b.w	8007e6c <__malloc_unlock>
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	d908      	bls.n	8007cba <_free_r+0x42>
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	1821      	adds	r1, r4, r0
 8007cac:	428b      	cmp	r3, r1
 8007cae:	bf01      	itttt	eq
 8007cb0:	6819      	ldreq	r1, [r3, #0]
 8007cb2:	685b      	ldreq	r3, [r3, #4]
 8007cb4:	1809      	addeq	r1, r1, r0
 8007cb6:	6021      	streq	r1, [r4, #0]
 8007cb8:	e7ed      	b.n	8007c96 <_free_r+0x1e>
 8007cba:	461a      	mov	r2, r3
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b10b      	cbz	r3, 8007cc4 <_free_r+0x4c>
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	d9fa      	bls.n	8007cba <_free_r+0x42>
 8007cc4:	6811      	ldr	r1, [r2, #0]
 8007cc6:	1850      	adds	r0, r2, r1
 8007cc8:	42a0      	cmp	r0, r4
 8007cca:	d10b      	bne.n	8007ce4 <_free_r+0x6c>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	4401      	add	r1, r0
 8007cd0:	1850      	adds	r0, r2, r1
 8007cd2:	4283      	cmp	r3, r0
 8007cd4:	6011      	str	r1, [r2, #0]
 8007cd6:	d1e0      	bne.n	8007c9a <_free_r+0x22>
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	6053      	str	r3, [r2, #4]
 8007cde:	4408      	add	r0, r1
 8007ce0:	6010      	str	r0, [r2, #0]
 8007ce2:	e7da      	b.n	8007c9a <_free_r+0x22>
 8007ce4:	d902      	bls.n	8007cec <_free_r+0x74>
 8007ce6:	230c      	movs	r3, #12
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	e7d6      	b.n	8007c9a <_free_r+0x22>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	1821      	adds	r1, r4, r0
 8007cf0:	428b      	cmp	r3, r1
 8007cf2:	bf04      	itt	eq
 8007cf4:	6819      	ldreq	r1, [r3, #0]
 8007cf6:	685b      	ldreq	r3, [r3, #4]
 8007cf8:	6063      	str	r3, [r4, #4]
 8007cfa:	bf04      	itt	eq
 8007cfc:	1809      	addeq	r1, r1, r0
 8007cfe:	6021      	streq	r1, [r4, #0]
 8007d00:	6054      	str	r4, [r2, #4]
 8007d02:	e7ca      	b.n	8007c9a <_free_r+0x22>
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	bf00      	nop
 8007d08:	200007b8 	.word	0x200007b8

08007d0c <malloc>:
 8007d0c:	4b02      	ldr	r3, [pc, #8]	@ (8007d18 <malloc+0xc>)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f000 b825 	b.w	8007d60 <_malloc_r>
 8007d16:	bf00      	nop
 8007d18:	20000054 	.word	0x20000054

08007d1c <sbrk_aligned>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d5c <sbrk_aligned+0x40>)
 8007d20:	460c      	mov	r4, r1
 8007d22:	6831      	ldr	r1, [r6, #0]
 8007d24:	4605      	mov	r5, r0
 8007d26:	b911      	cbnz	r1, 8007d2e <sbrk_aligned+0x12>
 8007d28:	f000 fe3e 	bl	80089a8 <_sbrk_r>
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 fe39 	bl	80089a8 <_sbrk_r>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d103      	bne.n	8007d42 <sbrk_aligned+0x26>
 8007d3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d3e:	4620      	mov	r0, r4
 8007d40:	bd70      	pop	{r4, r5, r6, pc}
 8007d42:	1cc4      	adds	r4, r0, #3
 8007d44:	f024 0403 	bic.w	r4, r4, #3
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d0f8      	beq.n	8007d3e <sbrk_aligned+0x22>
 8007d4c:	1a21      	subs	r1, r4, r0
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 fe2a 	bl	80089a8 <_sbrk_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1f2      	bne.n	8007d3e <sbrk_aligned+0x22>
 8007d58:	e7ef      	b.n	8007d3a <sbrk_aligned+0x1e>
 8007d5a:	bf00      	nop
 8007d5c:	200007b4 	.word	0x200007b4

08007d60 <_malloc_r>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	1ccd      	adds	r5, r1, #3
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	4606      	mov	r6, r0
 8007d76:	db01      	blt.n	8007d7c <_malloc_r+0x1c>
 8007d78:	42a9      	cmp	r1, r5
 8007d7a:	d904      	bls.n	8007d86 <_malloc_r+0x26>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	2000      	movs	r0, #0
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e5c <_malloc_r+0xfc>
 8007d8a:	f000 f869 	bl	8007e60 <__malloc_lock>
 8007d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d92:	461c      	mov	r4, r3
 8007d94:	bb44      	cbnz	r4, 8007de8 <_malloc_r+0x88>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff ffbf 	bl	8007d1c <sbrk_aligned>
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	4604      	mov	r4, r0
 8007da2:	d158      	bne.n	8007e56 <_malloc_r+0xf6>
 8007da4:	f8d8 4000 	ldr.w	r4, [r8]
 8007da8:	4627      	mov	r7, r4
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	d143      	bne.n	8007e36 <_malloc_r+0xd6>
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	d04b      	beq.n	8007e4a <_malloc_r+0xea>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	4639      	mov	r1, r7
 8007db6:	4630      	mov	r0, r6
 8007db8:	eb04 0903 	add.w	r9, r4, r3
 8007dbc:	f000 fdf4 	bl	80089a8 <_sbrk_r>
 8007dc0:	4581      	cmp	r9, r0
 8007dc2:	d142      	bne.n	8007e4a <_malloc_r+0xea>
 8007dc4:	6821      	ldr	r1, [r4, #0]
 8007dc6:	1a6d      	subs	r5, r5, r1
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ffa6 	bl	8007d1c <sbrk_aligned>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d03a      	beq.n	8007e4a <_malloc_r+0xea>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	442b      	add	r3, r5
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	f8d8 3000 	ldr.w	r3, [r8]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	bb62      	cbnz	r2, 8007e3c <_malloc_r+0xdc>
 8007de2:	f8c8 7000 	str.w	r7, [r8]
 8007de6:	e00f      	b.n	8007e08 <_malloc_r+0xa8>
 8007de8:	6822      	ldr	r2, [r4, #0]
 8007dea:	1b52      	subs	r2, r2, r5
 8007dec:	d420      	bmi.n	8007e30 <_malloc_r+0xd0>
 8007dee:	2a0b      	cmp	r2, #11
 8007df0:	d917      	bls.n	8007e22 <_malloc_r+0xc2>
 8007df2:	1961      	adds	r1, r4, r5
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	6025      	str	r5, [r4, #0]
 8007df8:	bf18      	it	ne
 8007dfa:	6059      	strne	r1, [r3, #4]
 8007dfc:	6863      	ldr	r3, [r4, #4]
 8007dfe:	bf08      	it	eq
 8007e00:	f8c8 1000 	streq.w	r1, [r8]
 8007e04:	5162      	str	r2, [r4, r5]
 8007e06:	604b      	str	r3, [r1, #4]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f82f 	bl	8007e6c <__malloc_unlock>
 8007e0e:	f104 000b 	add.w	r0, r4, #11
 8007e12:	1d23      	adds	r3, r4, #4
 8007e14:	f020 0007 	bic.w	r0, r0, #7
 8007e18:	1ac2      	subs	r2, r0, r3
 8007e1a:	bf1c      	itt	ne
 8007e1c:	1a1b      	subne	r3, r3, r0
 8007e1e:	50a3      	strne	r3, [r4, r2]
 8007e20:	e7af      	b.n	8007d82 <_malloc_r+0x22>
 8007e22:	6862      	ldr	r2, [r4, #4]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	bf0c      	ite	eq
 8007e28:	f8c8 2000 	streq.w	r2, [r8]
 8007e2c:	605a      	strne	r2, [r3, #4]
 8007e2e:	e7eb      	b.n	8007e08 <_malloc_r+0xa8>
 8007e30:	4623      	mov	r3, r4
 8007e32:	6864      	ldr	r4, [r4, #4]
 8007e34:	e7ae      	b.n	8007d94 <_malloc_r+0x34>
 8007e36:	463c      	mov	r4, r7
 8007e38:	687f      	ldr	r7, [r7, #4]
 8007e3a:	e7b6      	b.n	8007daa <_malloc_r+0x4a>
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d1fb      	bne.n	8007e3c <_malloc_r+0xdc>
 8007e44:	2300      	movs	r3, #0
 8007e46:	6053      	str	r3, [r2, #4]
 8007e48:	e7de      	b.n	8007e08 <_malloc_r+0xa8>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	6033      	str	r3, [r6, #0]
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f000 f80c 	bl	8007e6c <__malloc_unlock>
 8007e54:	e794      	b.n	8007d80 <_malloc_r+0x20>
 8007e56:	6005      	str	r5, [r0, #0]
 8007e58:	e7d6      	b.n	8007e08 <_malloc_r+0xa8>
 8007e5a:	bf00      	nop
 8007e5c:	200007b8 	.word	0x200007b8

08007e60 <__malloc_lock>:
 8007e60:	4801      	ldr	r0, [pc, #4]	@ (8007e68 <__malloc_lock+0x8>)
 8007e62:	f7ff b8a0 	b.w	8006fa6 <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	200007b0 	.word	0x200007b0

08007e6c <__malloc_unlock>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	@ (8007e74 <__malloc_unlock+0x8>)
 8007e6e:	f7ff b89b 	b.w	8006fa8 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	200007b0 	.word	0x200007b0

08007e78 <_Balloc>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	69c6      	ldr	r6, [r0, #28]
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	460d      	mov	r5, r1
 8007e80:	b976      	cbnz	r6, 8007ea0 <_Balloc+0x28>
 8007e82:	2010      	movs	r0, #16
 8007e84:	f7ff ff42 	bl	8007d0c <malloc>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	61e0      	str	r0, [r4, #28]
 8007e8c:	b920      	cbnz	r0, 8007e98 <_Balloc+0x20>
 8007e8e:	4b18      	ldr	r3, [pc, #96]	@ (8007ef0 <_Balloc+0x78>)
 8007e90:	4818      	ldr	r0, [pc, #96]	@ (8007ef4 <_Balloc+0x7c>)
 8007e92:	216b      	movs	r1, #107	@ 0x6b
 8007e94:	f000 fd98 	bl	80089c8 <__assert_func>
 8007e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e9c:	6006      	str	r6, [r0, #0]
 8007e9e:	60c6      	str	r6, [r0, #12]
 8007ea0:	69e6      	ldr	r6, [r4, #28]
 8007ea2:	68f3      	ldr	r3, [r6, #12]
 8007ea4:	b183      	cbz	r3, 8007ec8 <_Balloc+0x50>
 8007ea6:	69e3      	ldr	r3, [r4, #28]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007eae:	b9b8      	cbnz	r0, 8007ee0 <_Balloc+0x68>
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	fa01 f605 	lsl.w	r6, r1, r5
 8007eb6:	1d72      	adds	r2, r6, #5
 8007eb8:	0092      	lsls	r2, r2, #2
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fda2 	bl	8008a04 <_calloc_r>
 8007ec0:	b160      	cbz	r0, 8007edc <_Balloc+0x64>
 8007ec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ec6:	e00e      	b.n	8007ee6 <_Balloc+0x6e>
 8007ec8:	2221      	movs	r2, #33	@ 0x21
 8007eca:	2104      	movs	r1, #4
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fd99 	bl	8008a04 <_calloc_r>
 8007ed2:	69e3      	ldr	r3, [r4, #28]
 8007ed4:	60f0      	str	r0, [r6, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e4      	bne.n	8007ea6 <_Balloc+0x2e>
 8007edc:	2000      	movs	r0, #0
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	6802      	ldr	r2, [r0, #0]
 8007ee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007eec:	e7f7      	b.n	8007ede <_Balloc+0x66>
 8007eee:	bf00      	nop
 8007ef0:	0800943d 	.word	0x0800943d
 8007ef4:	080094bd 	.word	0x080094bd

08007ef8 <_Bfree>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	69c6      	ldr	r6, [r0, #28]
 8007efc:	4605      	mov	r5, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	b976      	cbnz	r6, 8007f20 <_Bfree+0x28>
 8007f02:	2010      	movs	r0, #16
 8007f04:	f7ff ff02 	bl	8007d0c <malloc>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	61e8      	str	r0, [r5, #28]
 8007f0c:	b920      	cbnz	r0, 8007f18 <_Bfree+0x20>
 8007f0e:	4b09      	ldr	r3, [pc, #36]	@ (8007f34 <_Bfree+0x3c>)
 8007f10:	4809      	ldr	r0, [pc, #36]	@ (8007f38 <_Bfree+0x40>)
 8007f12:	218f      	movs	r1, #143	@ 0x8f
 8007f14:	f000 fd58 	bl	80089c8 <__assert_func>
 8007f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f1c:	6006      	str	r6, [r0, #0]
 8007f1e:	60c6      	str	r6, [r0, #12]
 8007f20:	b13c      	cbz	r4, 8007f32 <_Bfree+0x3a>
 8007f22:	69eb      	ldr	r3, [r5, #28]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f2c:	6021      	str	r1, [r4, #0]
 8007f2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	0800943d 	.word	0x0800943d
 8007f38:	080094bd 	.word	0x080094bd

08007f3c <__multadd>:
 8007f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	690d      	ldr	r5, [r1, #16]
 8007f42:	4607      	mov	r7, r0
 8007f44:	460c      	mov	r4, r1
 8007f46:	461e      	mov	r6, r3
 8007f48:	f101 0c14 	add.w	ip, r1, #20
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f52:	b299      	uxth	r1, r3
 8007f54:	fb02 6101 	mla	r1, r2, r1, r6
 8007f58:	0c1e      	lsrs	r6, r3, #16
 8007f5a:	0c0b      	lsrs	r3, r1, #16
 8007f5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f60:	b289      	uxth	r1, r1
 8007f62:	3001      	adds	r0, #1
 8007f64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f68:	4285      	cmp	r5, r0
 8007f6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f72:	dcec      	bgt.n	8007f4e <__multadd+0x12>
 8007f74:	b30e      	cbz	r6, 8007fba <__multadd+0x7e>
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	dc19      	bgt.n	8007fb0 <__multadd+0x74>
 8007f7c:	6861      	ldr	r1, [r4, #4]
 8007f7e:	4638      	mov	r0, r7
 8007f80:	3101      	adds	r1, #1
 8007f82:	f7ff ff79 	bl	8007e78 <_Balloc>
 8007f86:	4680      	mov	r8, r0
 8007f88:	b928      	cbnz	r0, 8007f96 <__multadd+0x5a>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc0 <__multadd+0x84>)
 8007f8e:	480d      	ldr	r0, [pc, #52]	@ (8007fc4 <__multadd+0x88>)
 8007f90:	21ba      	movs	r1, #186	@ 0xba
 8007f92:	f000 fd19 	bl	80089c8 <__assert_func>
 8007f96:	6922      	ldr	r2, [r4, #16]
 8007f98:	3202      	adds	r2, #2
 8007f9a:	f104 010c 	add.w	r1, r4, #12
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	300c      	adds	r0, #12
 8007fa2:	f7ff f802 	bl	8006faa <memcpy>
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4638      	mov	r0, r7
 8007faa:	f7ff ffa5 	bl	8007ef8 <_Bfree>
 8007fae:	4644      	mov	r4, r8
 8007fb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fb4:	3501      	adds	r5, #1
 8007fb6:	615e      	str	r6, [r3, #20]
 8007fb8:	6125      	str	r5, [r4, #16]
 8007fba:	4620      	mov	r0, r4
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	080094ac 	.word	0x080094ac
 8007fc4:	080094bd 	.word	0x080094bd

08007fc8 <__hi0bits>:
 8007fc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007fcc:	4603      	mov	r3, r0
 8007fce:	bf36      	itet	cc
 8007fd0:	0403      	lslcc	r3, r0, #16
 8007fd2:	2000      	movcs	r0, #0
 8007fd4:	2010      	movcc	r0, #16
 8007fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fda:	bf3c      	itt	cc
 8007fdc:	021b      	lslcc	r3, r3, #8
 8007fde:	3008      	addcc	r0, #8
 8007fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fe4:	bf3c      	itt	cc
 8007fe6:	011b      	lslcc	r3, r3, #4
 8007fe8:	3004      	addcc	r0, #4
 8007fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fee:	bf3c      	itt	cc
 8007ff0:	009b      	lslcc	r3, r3, #2
 8007ff2:	3002      	addcc	r0, #2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	db05      	blt.n	8008004 <__hi0bits+0x3c>
 8007ff8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ffc:	f100 0001 	add.w	r0, r0, #1
 8008000:	bf08      	it	eq
 8008002:	2020      	moveq	r0, #32
 8008004:	4770      	bx	lr

08008006 <__lo0bits>:
 8008006:	6803      	ldr	r3, [r0, #0]
 8008008:	4602      	mov	r2, r0
 800800a:	f013 0007 	ands.w	r0, r3, #7
 800800e:	d00b      	beq.n	8008028 <__lo0bits+0x22>
 8008010:	07d9      	lsls	r1, r3, #31
 8008012:	d421      	bmi.n	8008058 <__lo0bits+0x52>
 8008014:	0798      	lsls	r0, r3, #30
 8008016:	bf49      	itett	mi
 8008018:	085b      	lsrmi	r3, r3, #1
 800801a:	089b      	lsrpl	r3, r3, #2
 800801c:	2001      	movmi	r0, #1
 800801e:	6013      	strmi	r3, [r2, #0]
 8008020:	bf5c      	itt	pl
 8008022:	6013      	strpl	r3, [r2, #0]
 8008024:	2002      	movpl	r0, #2
 8008026:	4770      	bx	lr
 8008028:	b299      	uxth	r1, r3
 800802a:	b909      	cbnz	r1, 8008030 <__lo0bits+0x2a>
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	2010      	movs	r0, #16
 8008030:	b2d9      	uxtb	r1, r3
 8008032:	b909      	cbnz	r1, 8008038 <__lo0bits+0x32>
 8008034:	3008      	adds	r0, #8
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	0719      	lsls	r1, r3, #28
 800803a:	bf04      	itt	eq
 800803c:	091b      	lsreq	r3, r3, #4
 800803e:	3004      	addeq	r0, #4
 8008040:	0799      	lsls	r1, r3, #30
 8008042:	bf04      	itt	eq
 8008044:	089b      	lsreq	r3, r3, #2
 8008046:	3002      	addeq	r0, #2
 8008048:	07d9      	lsls	r1, r3, #31
 800804a:	d403      	bmi.n	8008054 <__lo0bits+0x4e>
 800804c:	085b      	lsrs	r3, r3, #1
 800804e:	f100 0001 	add.w	r0, r0, #1
 8008052:	d003      	beq.n	800805c <__lo0bits+0x56>
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	4770      	bx	lr
 8008058:	2000      	movs	r0, #0
 800805a:	4770      	bx	lr
 800805c:	2020      	movs	r0, #32
 800805e:	4770      	bx	lr

08008060 <__i2b>:
 8008060:	b510      	push	{r4, lr}
 8008062:	460c      	mov	r4, r1
 8008064:	2101      	movs	r1, #1
 8008066:	f7ff ff07 	bl	8007e78 <_Balloc>
 800806a:	4602      	mov	r2, r0
 800806c:	b928      	cbnz	r0, 800807a <__i2b+0x1a>
 800806e:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <__i2b+0x24>)
 8008070:	4805      	ldr	r0, [pc, #20]	@ (8008088 <__i2b+0x28>)
 8008072:	f240 1145 	movw	r1, #325	@ 0x145
 8008076:	f000 fca7 	bl	80089c8 <__assert_func>
 800807a:	2301      	movs	r3, #1
 800807c:	6144      	str	r4, [r0, #20]
 800807e:	6103      	str	r3, [r0, #16]
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	080094ac 	.word	0x080094ac
 8008088:	080094bd 	.word	0x080094bd

0800808c <__multiply>:
 800808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	4617      	mov	r7, r2
 8008092:	690a      	ldr	r2, [r1, #16]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	429a      	cmp	r2, r3
 8008098:	bfa8      	it	ge
 800809a:	463b      	movge	r3, r7
 800809c:	4689      	mov	r9, r1
 800809e:	bfa4      	itt	ge
 80080a0:	460f      	movge	r7, r1
 80080a2:	4699      	movge	r9, r3
 80080a4:	693d      	ldr	r5, [r7, #16]
 80080a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	eb05 060a 	add.w	r6, r5, sl
 80080b2:	42b3      	cmp	r3, r6
 80080b4:	b085      	sub	sp, #20
 80080b6:	bfb8      	it	lt
 80080b8:	3101      	addlt	r1, #1
 80080ba:	f7ff fedd 	bl	8007e78 <_Balloc>
 80080be:	b930      	cbnz	r0, 80080ce <__multiply+0x42>
 80080c0:	4602      	mov	r2, r0
 80080c2:	4b41      	ldr	r3, [pc, #260]	@ (80081c8 <__multiply+0x13c>)
 80080c4:	4841      	ldr	r0, [pc, #260]	@ (80081cc <__multiply+0x140>)
 80080c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080ca:	f000 fc7d 	bl	80089c8 <__assert_func>
 80080ce:	f100 0414 	add.w	r4, r0, #20
 80080d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80080d6:	4623      	mov	r3, r4
 80080d8:	2200      	movs	r2, #0
 80080da:	4573      	cmp	r3, lr
 80080dc:	d320      	bcc.n	8008120 <__multiply+0x94>
 80080de:	f107 0814 	add.w	r8, r7, #20
 80080e2:	f109 0114 	add.w	r1, r9, #20
 80080e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80080ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	1beb      	subs	r3, r5, r7
 80080f2:	3b15      	subs	r3, #21
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	3304      	adds	r3, #4
 80080fa:	3715      	adds	r7, #21
 80080fc:	42bd      	cmp	r5, r7
 80080fe:	bf38      	it	cc
 8008100:	2304      	movcc	r3, #4
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	9b02      	ldr	r3, [sp, #8]
 8008106:	9103      	str	r1, [sp, #12]
 8008108:	428b      	cmp	r3, r1
 800810a:	d80c      	bhi.n	8008126 <__multiply+0x9a>
 800810c:	2e00      	cmp	r6, #0
 800810e:	dd03      	ble.n	8008118 <__multiply+0x8c>
 8008110:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008114:	2b00      	cmp	r3, #0
 8008116:	d055      	beq.n	80081c4 <__multiply+0x138>
 8008118:	6106      	str	r6, [r0, #16]
 800811a:	b005      	add	sp, #20
 800811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008120:	f843 2b04 	str.w	r2, [r3], #4
 8008124:	e7d9      	b.n	80080da <__multiply+0x4e>
 8008126:	f8b1 a000 	ldrh.w	sl, [r1]
 800812a:	f1ba 0f00 	cmp.w	sl, #0
 800812e:	d01f      	beq.n	8008170 <__multiply+0xe4>
 8008130:	46c4      	mov	ip, r8
 8008132:	46a1      	mov	r9, r4
 8008134:	2700      	movs	r7, #0
 8008136:	f85c 2b04 	ldr.w	r2, [ip], #4
 800813a:	f8d9 3000 	ldr.w	r3, [r9]
 800813e:	fa1f fb82 	uxth.w	fp, r2
 8008142:	b29b      	uxth	r3, r3
 8008144:	fb0a 330b 	mla	r3, sl, fp, r3
 8008148:	443b      	add	r3, r7
 800814a:	f8d9 7000 	ldr.w	r7, [r9]
 800814e:	0c12      	lsrs	r2, r2, #16
 8008150:	0c3f      	lsrs	r7, r7, #16
 8008152:	fb0a 7202 	mla	r2, sl, r2, r7
 8008156:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008160:	4565      	cmp	r5, ip
 8008162:	f849 3b04 	str.w	r3, [r9], #4
 8008166:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800816a:	d8e4      	bhi.n	8008136 <__multiply+0xaa>
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	50e7      	str	r7, [r4, r3]
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008176:	3104      	adds	r1, #4
 8008178:	f1b9 0f00 	cmp.w	r9, #0
 800817c:	d020      	beq.n	80081c0 <__multiply+0x134>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	4647      	mov	r7, r8
 8008182:	46a4      	mov	ip, r4
 8008184:	f04f 0a00 	mov.w	sl, #0
 8008188:	f8b7 b000 	ldrh.w	fp, [r7]
 800818c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008190:	fb09 220b 	mla	r2, r9, fp, r2
 8008194:	4452      	add	r2, sl
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800819c:	f84c 3b04 	str.w	r3, [ip], #4
 80081a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80081a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80081ac:	fb09 330a 	mla	r3, r9, sl, r3
 80081b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80081b4:	42bd      	cmp	r5, r7
 80081b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081ba:	d8e5      	bhi.n	8008188 <__multiply+0xfc>
 80081bc:	9a01      	ldr	r2, [sp, #4]
 80081be:	50a3      	str	r3, [r4, r2]
 80081c0:	3404      	adds	r4, #4
 80081c2:	e79f      	b.n	8008104 <__multiply+0x78>
 80081c4:	3e01      	subs	r6, #1
 80081c6:	e7a1      	b.n	800810c <__multiply+0x80>
 80081c8:	080094ac 	.word	0x080094ac
 80081cc:	080094bd 	.word	0x080094bd

080081d0 <__pow5mult>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4615      	mov	r5, r2
 80081d6:	f012 0203 	ands.w	r2, r2, #3
 80081da:	4607      	mov	r7, r0
 80081dc:	460e      	mov	r6, r1
 80081de:	d007      	beq.n	80081f0 <__pow5mult+0x20>
 80081e0:	4c25      	ldr	r4, [pc, #148]	@ (8008278 <__pow5mult+0xa8>)
 80081e2:	3a01      	subs	r2, #1
 80081e4:	2300      	movs	r3, #0
 80081e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081ea:	f7ff fea7 	bl	8007f3c <__multadd>
 80081ee:	4606      	mov	r6, r0
 80081f0:	10ad      	asrs	r5, r5, #2
 80081f2:	d03d      	beq.n	8008270 <__pow5mult+0xa0>
 80081f4:	69fc      	ldr	r4, [r7, #28]
 80081f6:	b97c      	cbnz	r4, 8008218 <__pow5mult+0x48>
 80081f8:	2010      	movs	r0, #16
 80081fa:	f7ff fd87 	bl	8007d0c <malloc>
 80081fe:	4602      	mov	r2, r0
 8008200:	61f8      	str	r0, [r7, #28]
 8008202:	b928      	cbnz	r0, 8008210 <__pow5mult+0x40>
 8008204:	4b1d      	ldr	r3, [pc, #116]	@ (800827c <__pow5mult+0xac>)
 8008206:	481e      	ldr	r0, [pc, #120]	@ (8008280 <__pow5mult+0xb0>)
 8008208:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800820c:	f000 fbdc 	bl	80089c8 <__assert_func>
 8008210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008214:	6004      	str	r4, [r0, #0]
 8008216:	60c4      	str	r4, [r0, #12]
 8008218:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800821c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008220:	b94c      	cbnz	r4, 8008236 <__pow5mult+0x66>
 8008222:	f240 2171 	movw	r1, #625	@ 0x271
 8008226:	4638      	mov	r0, r7
 8008228:	f7ff ff1a 	bl	8008060 <__i2b>
 800822c:	2300      	movs	r3, #0
 800822e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008232:	4604      	mov	r4, r0
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	f04f 0900 	mov.w	r9, #0
 800823a:	07eb      	lsls	r3, r5, #31
 800823c:	d50a      	bpl.n	8008254 <__pow5mult+0x84>
 800823e:	4631      	mov	r1, r6
 8008240:	4622      	mov	r2, r4
 8008242:	4638      	mov	r0, r7
 8008244:	f7ff ff22 	bl	800808c <__multiply>
 8008248:	4631      	mov	r1, r6
 800824a:	4680      	mov	r8, r0
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff fe53 	bl	8007ef8 <_Bfree>
 8008252:	4646      	mov	r6, r8
 8008254:	106d      	asrs	r5, r5, #1
 8008256:	d00b      	beq.n	8008270 <__pow5mult+0xa0>
 8008258:	6820      	ldr	r0, [r4, #0]
 800825a:	b938      	cbnz	r0, 800826c <__pow5mult+0x9c>
 800825c:	4622      	mov	r2, r4
 800825e:	4621      	mov	r1, r4
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff ff13 	bl	800808c <__multiply>
 8008266:	6020      	str	r0, [r4, #0]
 8008268:	f8c0 9000 	str.w	r9, [r0]
 800826c:	4604      	mov	r4, r0
 800826e:	e7e4      	b.n	800823a <__pow5mult+0x6a>
 8008270:	4630      	mov	r0, r6
 8008272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008276:	bf00      	nop
 8008278:	08009570 	.word	0x08009570
 800827c:	0800943d 	.word	0x0800943d
 8008280:	080094bd 	.word	0x080094bd

08008284 <__lshift>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	6849      	ldr	r1, [r1, #4]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	4607      	mov	r7, r0
 8008296:	4691      	mov	r9, r2
 8008298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800829c:	f108 0601 	add.w	r6, r8, #1
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	db0b      	blt.n	80082bc <__lshift+0x38>
 80082a4:	4638      	mov	r0, r7
 80082a6:	f7ff fde7 	bl	8007e78 <_Balloc>
 80082aa:	4605      	mov	r5, r0
 80082ac:	b948      	cbnz	r0, 80082c2 <__lshift+0x3e>
 80082ae:	4602      	mov	r2, r0
 80082b0:	4b28      	ldr	r3, [pc, #160]	@ (8008354 <__lshift+0xd0>)
 80082b2:	4829      	ldr	r0, [pc, #164]	@ (8008358 <__lshift+0xd4>)
 80082b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082b8:	f000 fb86 	bl	80089c8 <__assert_func>
 80082bc:	3101      	adds	r1, #1
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	e7ee      	b.n	80082a0 <__lshift+0x1c>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f100 0114 	add.w	r1, r0, #20
 80082c8:	f100 0210 	add.w	r2, r0, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	4553      	cmp	r3, sl
 80082d0:	db33      	blt.n	800833a <__lshift+0xb6>
 80082d2:	6920      	ldr	r0, [r4, #16]
 80082d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082d8:	f104 0314 	add.w	r3, r4, #20
 80082dc:	f019 091f 	ands.w	r9, r9, #31
 80082e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082e8:	d02b      	beq.n	8008342 <__lshift+0xbe>
 80082ea:	f1c9 0e20 	rsb	lr, r9, #32
 80082ee:	468a      	mov	sl, r1
 80082f0:	2200      	movs	r2, #0
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	fa00 f009 	lsl.w	r0, r0, r9
 80082f8:	4310      	orrs	r0, r2
 80082fa:	f84a 0b04 	str.w	r0, [sl], #4
 80082fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008302:	459c      	cmp	ip, r3
 8008304:	fa22 f20e 	lsr.w	r2, r2, lr
 8008308:	d8f3      	bhi.n	80082f2 <__lshift+0x6e>
 800830a:	ebac 0304 	sub.w	r3, ip, r4
 800830e:	3b15      	subs	r3, #21
 8008310:	f023 0303 	bic.w	r3, r3, #3
 8008314:	3304      	adds	r3, #4
 8008316:	f104 0015 	add.w	r0, r4, #21
 800831a:	4560      	cmp	r0, ip
 800831c:	bf88      	it	hi
 800831e:	2304      	movhi	r3, #4
 8008320:	50ca      	str	r2, [r1, r3]
 8008322:	b10a      	cbz	r2, 8008328 <__lshift+0xa4>
 8008324:	f108 0602 	add.w	r6, r8, #2
 8008328:	3e01      	subs	r6, #1
 800832a:	4638      	mov	r0, r7
 800832c:	612e      	str	r6, [r5, #16]
 800832e:	4621      	mov	r1, r4
 8008330:	f7ff fde2 	bl	8007ef8 <_Bfree>
 8008334:	4628      	mov	r0, r5
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	f842 0f04 	str.w	r0, [r2, #4]!
 800833e:	3301      	adds	r3, #1
 8008340:	e7c5      	b.n	80082ce <__lshift+0x4a>
 8008342:	3904      	subs	r1, #4
 8008344:	f853 2b04 	ldr.w	r2, [r3], #4
 8008348:	f841 2f04 	str.w	r2, [r1, #4]!
 800834c:	459c      	cmp	ip, r3
 800834e:	d8f9      	bhi.n	8008344 <__lshift+0xc0>
 8008350:	e7ea      	b.n	8008328 <__lshift+0xa4>
 8008352:	bf00      	nop
 8008354:	080094ac 	.word	0x080094ac
 8008358:	080094bd 	.word	0x080094bd

0800835c <__mcmp>:
 800835c:	690a      	ldr	r2, [r1, #16]
 800835e:	4603      	mov	r3, r0
 8008360:	6900      	ldr	r0, [r0, #16]
 8008362:	1a80      	subs	r0, r0, r2
 8008364:	b530      	push	{r4, r5, lr}
 8008366:	d10e      	bne.n	8008386 <__mcmp+0x2a>
 8008368:	3314      	adds	r3, #20
 800836a:	3114      	adds	r1, #20
 800836c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008370:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008374:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008378:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800837c:	4295      	cmp	r5, r2
 800837e:	d003      	beq.n	8008388 <__mcmp+0x2c>
 8008380:	d205      	bcs.n	800838e <__mcmp+0x32>
 8008382:	f04f 30ff 	mov.w	r0, #4294967295
 8008386:	bd30      	pop	{r4, r5, pc}
 8008388:	42a3      	cmp	r3, r4
 800838a:	d3f3      	bcc.n	8008374 <__mcmp+0x18>
 800838c:	e7fb      	b.n	8008386 <__mcmp+0x2a>
 800838e:	2001      	movs	r0, #1
 8008390:	e7f9      	b.n	8008386 <__mcmp+0x2a>
	...

08008394 <__mdiff>:
 8008394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	4689      	mov	r9, r1
 800839a:	4606      	mov	r6, r0
 800839c:	4611      	mov	r1, r2
 800839e:	4648      	mov	r0, r9
 80083a0:	4614      	mov	r4, r2
 80083a2:	f7ff ffdb 	bl	800835c <__mcmp>
 80083a6:	1e05      	subs	r5, r0, #0
 80083a8:	d112      	bne.n	80083d0 <__mdiff+0x3c>
 80083aa:	4629      	mov	r1, r5
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff fd63 	bl	8007e78 <_Balloc>
 80083b2:	4602      	mov	r2, r0
 80083b4:	b928      	cbnz	r0, 80083c2 <__mdiff+0x2e>
 80083b6:	4b3f      	ldr	r3, [pc, #252]	@ (80084b4 <__mdiff+0x120>)
 80083b8:	f240 2137 	movw	r1, #567	@ 0x237
 80083bc:	483e      	ldr	r0, [pc, #248]	@ (80084b8 <__mdiff+0x124>)
 80083be:	f000 fb03 	bl	80089c8 <__assert_func>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083c8:	4610      	mov	r0, r2
 80083ca:	b003      	add	sp, #12
 80083cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d0:	bfbc      	itt	lt
 80083d2:	464b      	movlt	r3, r9
 80083d4:	46a1      	movlt	r9, r4
 80083d6:	4630      	mov	r0, r6
 80083d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083dc:	bfba      	itte	lt
 80083de:	461c      	movlt	r4, r3
 80083e0:	2501      	movlt	r5, #1
 80083e2:	2500      	movge	r5, #0
 80083e4:	f7ff fd48 	bl	8007e78 <_Balloc>
 80083e8:	4602      	mov	r2, r0
 80083ea:	b918      	cbnz	r0, 80083f4 <__mdiff+0x60>
 80083ec:	4b31      	ldr	r3, [pc, #196]	@ (80084b4 <__mdiff+0x120>)
 80083ee:	f240 2145 	movw	r1, #581	@ 0x245
 80083f2:	e7e3      	b.n	80083bc <__mdiff+0x28>
 80083f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083f8:	6926      	ldr	r6, [r4, #16]
 80083fa:	60c5      	str	r5, [r0, #12]
 80083fc:	f109 0310 	add.w	r3, r9, #16
 8008400:	f109 0514 	add.w	r5, r9, #20
 8008404:	f104 0e14 	add.w	lr, r4, #20
 8008408:	f100 0b14 	add.w	fp, r0, #20
 800840c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008410:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	46d9      	mov	r9, fp
 8008418:	f04f 0c00 	mov.w	ip, #0
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008422:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	fa1f f38a 	uxth.w	r3, sl
 800842c:	4619      	mov	r1, r3
 800842e:	b283      	uxth	r3, r0
 8008430:	1acb      	subs	r3, r1, r3
 8008432:	0c00      	lsrs	r0, r0, #16
 8008434:	4463      	add	r3, ip
 8008436:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800843a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800843e:	b29b      	uxth	r3, r3
 8008440:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008444:	4576      	cmp	r6, lr
 8008446:	f849 3b04 	str.w	r3, [r9], #4
 800844a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800844e:	d8e5      	bhi.n	800841c <__mdiff+0x88>
 8008450:	1b33      	subs	r3, r6, r4
 8008452:	3b15      	subs	r3, #21
 8008454:	f023 0303 	bic.w	r3, r3, #3
 8008458:	3415      	adds	r4, #21
 800845a:	3304      	adds	r3, #4
 800845c:	42a6      	cmp	r6, r4
 800845e:	bf38      	it	cc
 8008460:	2304      	movcc	r3, #4
 8008462:	441d      	add	r5, r3
 8008464:	445b      	add	r3, fp
 8008466:	461e      	mov	r6, r3
 8008468:	462c      	mov	r4, r5
 800846a:	4544      	cmp	r4, r8
 800846c:	d30e      	bcc.n	800848c <__mdiff+0xf8>
 800846e:	f108 0103 	add.w	r1, r8, #3
 8008472:	1b49      	subs	r1, r1, r5
 8008474:	f021 0103 	bic.w	r1, r1, #3
 8008478:	3d03      	subs	r5, #3
 800847a:	45a8      	cmp	r8, r5
 800847c:	bf38      	it	cc
 800847e:	2100      	movcc	r1, #0
 8008480:	440b      	add	r3, r1
 8008482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008486:	b191      	cbz	r1, 80084ae <__mdiff+0x11a>
 8008488:	6117      	str	r7, [r2, #16]
 800848a:	e79d      	b.n	80083c8 <__mdiff+0x34>
 800848c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008490:	46e6      	mov	lr, ip
 8008492:	0c08      	lsrs	r0, r1, #16
 8008494:	fa1c fc81 	uxtah	ip, ip, r1
 8008498:	4471      	add	r1, lr
 800849a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800849e:	b289      	uxth	r1, r1
 80084a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084a4:	f846 1b04 	str.w	r1, [r6], #4
 80084a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084ac:	e7dd      	b.n	800846a <__mdiff+0xd6>
 80084ae:	3f01      	subs	r7, #1
 80084b0:	e7e7      	b.n	8008482 <__mdiff+0xee>
 80084b2:	bf00      	nop
 80084b4:	080094ac 	.word	0x080094ac
 80084b8:	080094bd 	.word	0x080094bd

080084bc <__d2b>:
 80084bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084c0:	460f      	mov	r7, r1
 80084c2:	2101      	movs	r1, #1
 80084c4:	ec59 8b10 	vmov	r8, r9, d0
 80084c8:	4616      	mov	r6, r2
 80084ca:	f7ff fcd5 	bl	8007e78 <_Balloc>
 80084ce:	4604      	mov	r4, r0
 80084d0:	b930      	cbnz	r0, 80084e0 <__d2b+0x24>
 80084d2:	4602      	mov	r2, r0
 80084d4:	4b23      	ldr	r3, [pc, #140]	@ (8008564 <__d2b+0xa8>)
 80084d6:	4824      	ldr	r0, [pc, #144]	@ (8008568 <__d2b+0xac>)
 80084d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80084dc:	f000 fa74 	bl	80089c8 <__assert_func>
 80084e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084e8:	b10d      	cbz	r5, 80084ee <__d2b+0x32>
 80084ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	f1b8 0300 	subs.w	r3, r8, #0
 80084f4:	d023      	beq.n	800853e <__d2b+0x82>
 80084f6:	4668      	mov	r0, sp
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	f7ff fd84 	bl	8008006 <__lo0bits>
 80084fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008502:	b1d0      	cbz	r0, 800853a <__d2b+0x7e>
 8008504:	f1c0 0320 	rsb	r3, r0, #32
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	430b      	orrs	r3, r1
 800850e:	40c2      	lsrs	r2, r0
 8008510:	6163      	str	r3, [r4, #20]
 8008512:	9201      	str	r2, [sp, #4]
 8008514:	9b01      	ldr	r3, [sp, #4]
 8008516:	61a3      	str	r3, [r4, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	bf0c      	ite	eq
 800851c:	2201      	moveq	r2, #1
 800851e:	2202      	movne	r2, #2
 8008520:	6122      	str	r2, [r4, #16]
 8008522:	b1a5      	cbz	r5, 800854e <__d2b+0x92>
 8008524:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008528:	4405      	add	r5, r0
 800852a:	603d      	str	r5, [r7, #0]
 800852c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008530:	6030      	str	r0, [r6, #0]
 8008532:	4620      	mov	r0, r4
 8008534:	b003      	add	sp, #12
 8008536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800853a:	6161      	str	r1, [r4, #20]
 800853c:	e7ea      	b.n	8008514 <__d2b+0x58>
 800853e:	a801      	add	r0, sp, #4
 8008540:	f7ff fd61 	bl	8008006 <__lo0bits>
 8008544:	9b01      	ldr	r3, [sp, #4]
 8008546:	6163      	str	r3, [r4, #20]
 8008548:	3020      	adds	r0, #32
 800854a:	2201      	movs	r2, #1
 800854c:	e7e8      	b.n	8008520 <__d2b+0x64>
 800854e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008552:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008556:	6038      	str	r0, [r7, #0]
 8008558:	6918      	ldr	r0, [r3, #16]
 800855a:	f7ff fd35 	bl	8007fc8 <__hi0bits>
 800855e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008562:	e7e5      	b.n	8008530 <__d2b+0x74>
 8008564:	080094ac 	.word	0x080094ac
 8008568:	080094bd 	.word	0x080094bd

0800856c <__ssputs_r>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	688e      	ldr	r6, [r1, #8]
 8008572:	461f      	mov	r7, r3
 8008574:	42be      	cmp	r6, r7
 8008576:	680b      	ldr	r3, [r1, #0]
 8008578:	4682      	mov	sl, r0
 800857a:	460c      	mov	r4, r1
 800857c:	4690      	mov	r8, r2
 800857e:	d82d      	bhi.n	80085dc <__ssputs_r+0x70>
 8008580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008584:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008588:	d026      	beq.n	80085d8 <__ssputs_r+0x6c>
 800858a:	6965      	ldr	r5, [r4, #20]
 800858c:	6909      	ldr	r1, [r1, #16]
 800858e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008592:	eba3 0901 	sub.w	r9, r3, r1
 8008596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800859a:	1c7b      	adds	r3, r7, #1
 800859c:	444b      	add	r3, r9
 800859e:	106d      	asrs	r5, r5, #1
 80085a0:	429d      	cmp	r5, r3
 80085a2:	bf38      	it	cc
 80085a4:	461d      	movcc	r5, r3
 80085a6:	0553      	lsls	r3, r2, #21
 80085a8:	d527      	bpl.n	80085fa <__ssputs_r+0x8e>
 80085aa:	4629      	mov	r1, r5
 80085ac:	f7ff fbd8 	bl	8007d60 <_malloc_r>
 80085b0:	4606      	mov	r6, r0
 80085b2:	b360      	cbz	r0, 800860e <__ssputs_r+0xa2>
 80085b4:	6921      	ldr	r1, [r4, #16]
 80085b6:	464a      	mov	r2, r9
 80085b8:	f7fe fcf7 	bl	8006faa <memcpy>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	6126      	str	r6, [r4, #16]
 80085ca:	6165      	str	r5, [r4, #20]
 80085cc:	444e      	add	r6, r9
 80085ce:	eba5 0509 	sub.w	r5, r5, r9
 80085d2:	6026      	str	r6, [r4, #0]
 80085d4:	60a5      	str	r5, [r4, #8]
 80085d6:	463e      	mov	r6, r7
 80085d8:	42be      	cmp	r6, r7
 80085da:	d900      	bls.n	80085de <__ssputs_r+0x72>
 80085dc:	463e      	mov	r6, r7
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	4632      	mov	r2, r6
 80085e2:	4641      	mov	r1, r8
 80085e4:	f000 f9c6 	bl	8008974 <memmove>
 80085e8:	68a3      	ldr	r3, [r4, #8]
 80085ea:	1b9b      	subs	r3, r3, r6
 80085ec:	60a3      	str	r3, [r4, #8]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	4433      	add	r3, r6
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	2000      	movs	r0, #0
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	462a      	mov	r2, r5
 80085fc:	f000 fa28 	bl	8008a50 <_realloc_r>
 8008600:	4606      	mov	r6, r0
 8008602:	2800      	cmp	r0, #0
 8008604:	d1e0      	bne.n	80085c8 <__ssputs_r+0x5c>
 8008606:	6921      	ldr	r1, [r4, #16]
 8008608:	4650      	mov	r0, sl
 800860a:	f7ff fb35 	bl	8007c78 <_free_r>
 800860e:	230c      	movs	r3, #12
 8008610:	f8ca 3000 	str.w	r3, [sl]
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	f04f 30ff 	mov.w	r0, #4294967295
 8008620:	e7e9      	b.n	80085f6 <__ssputs_r+0x8a>
	...

08008624 <_svfiprintf_r>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	4698      	mov	r8, r3
 800862a:	898b      	ldrh	r3, [r1, #12]
 800862c:	061b      	lsls	r3, r3, #24
 800862e:	b09d      	sub	sp, #116	@ 0x74
 8008630:	4607      	mov	r7, r0
 8008632:	460d      	mov	r5, r1
 8008634:	4614      	mov	r4, r2
 8008636:	d510      	bpl.n	800865a <_svfiprintf_r+0x36>
 8008638:	690b      	ldr	r3, [r1, #16]
 800863a:	b973      	cbnz	r3, 800865a <_svfiprintf_r+0x36>
 800863c:	2140      	movs	r1, #64	@ 0x40
 800863e:	f7ff fb8f 	bl	8007d60 <_malloc_r>
 8008642:	6028      	str	r0, [r5, #0]
 8008644:	6128      	str	r0, [r5, #16]
 8008646:	b930      	cbnz	r0, 8008656 <_svfiprintf_r+0x32>
 8008648:	230c      	movs	r3, #12
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	b01d      	add	sp, #116	@ 0x74
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	2340      	movs	r3, #64	@ 0x40
 8008658:	616b      	str	r3, [r5, #20]
 800865a:	2300      	movs	r3, #0
 800865c:	9309      	str	r3, [sp, #36]	@ 0x24
 800865e:	2320      	movs	r3, #32
 8008660:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008664:	f8cd 800c 	str.w	r8, [sp, #12]
 8008668:	2330      	movs	r3, #48	@ 0x30
 800866a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008808 <_svfiprintf_r+0x1e4>
 800866e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008672:	f04f 0901 	mov.w	r9, #1
 8008676:	4623      	mov	r3, r4
 8008678:	469a      	mov	sl, r3
 800867a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800867e:	b10a      	cbz	r2, 8008684 <_svfiprintf_r+0x60>
 8008680:	2a25      	cmp	r2, #37	@ 0x25
 8008682:	d1f9      	bne.n	8008678 <_svfiprintf_r+0x54>
 8008684:	ebba 0b04 	subs.w	fp, sl, r4
 8008688:	d00b      	beq.n	80086a2 <_svfiprintf_r+0x7e>
 800868a:	465b      	mov	r3, fp
 800868c:	4622      	mov	r2, r4
 800868e:	4629      	mov	r1, r5
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ff6b 	bl	800856c <__ssputs_r>
 8008696:	3001      	adds	r0, #1
 8008698:	f000 80a7 	beq.w	80087ea <_svfiprintf_r+0x1c6>
 800869c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800869e:	445a      	add	r2, fp
 80086a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086a2:	f89a 3000 	ldrb.w	r3, [sl]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 809f 	beq.w	80087ea <_svfiprintf_r+0x1c6>
 80086ac:	2300      	movs	r3, #0
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b6:	f10a 0a01 	add.w	sl, sl, #1
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	9307      	str	r3, [sp, #28]
 80086be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086c4:	4654      	mov	r4, sl
 80086c6:	2205      	movs	r2, #5
 80086c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086cc:	484e      	ldr	r0, [pc, #312]	@ (8008808 <_svfiprintf_r+0x1e4>)
 80086ce:	f7f7 fd57 	bl	8000180 <memchr>
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	b9d8      	cbnz	r0, 800870e <_svfiprintf_r+0xea>
 80086d6:	06d0      	lsls	r0, r2, #27
 80086d8:	bf44      	itt	mi
 80086da:	2320      	movmi	r3, #32
 80086dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086e0:	0711      	lsls	r1, r2, #28
 80086e2:	bf44      	itt	mi
 80086e4:	232b      	movmi	r3, #43	@ 0x2b
 80086e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ea:	f89a 3000 	ldrb.w	r3, [sl]
 80086ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f0:	d015      	beq.n	800871e <_svfiprintf_r+0xfa>
 80086f2:	9a07      	ldr	r2, [sp, #28]
 80086f4:	4654      	mov	r4, sl
 80086f6:	2000      	movs	r0, #0
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	4621      	mov	r1, r4
 80086fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008702:	3b30      	subs	r3, #48	@ 0x30
 8008704:	2b09      	cmp	r3, #9
 8008706:	d94b      	bls.n	80087a0 <_svfiprintf_r+0x17c>
 8008708:	b1b0      	cbz	r0, 8008738 <_svfiprintf_r+0x114>
 800870a:	9207      	str	r2, [sp, #28]
 800870c:	e014      	b.n	8008738 <_svfiprintf_r+0x114>
 800870e:	eba0 0308 	sub.w	r3, r0, r8
 8008712:	fa09 f303 	lsl.w	r3, r9, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	46a2      	mov	sl, r4
 800871c:	e7d2      	b.n	80086c4 <_svfiprintf_r+0xa0>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9103      	str	r1, [sp, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfbb      	ittet	lt
 800872a:	425b      	neglt	r3, r3
 800872c:	f042 0202 	orrlt.w	r2, r2, #2
 8008730:	9307      	strge	r3, [sp, #28]
 8008732:	9307      	strlt	r3, [sp, #28]
 8008734:	bfb8      	it	lt
 8008736:	9204      	strlt	r2, [sp, #16]
 8008738:	7823      	ldrb	r3, [r4, #0]
 800873a:	2b2e      	cmp	r3, #46	@ 0x2e
 800873c:	d10a      	bne.n	8008754 <_svfiprintf_r+0x130>
 800873e:	7863      	ldrb	r3, [r4, #1]
 8008740:	2b2a      	cmp	r3, #42	@ 0x2a
 8008742:	d132      	bne.n	80087aa <_svfiprintf_r+0x186>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	9203      	str	r2, [sp, #12]
 800874c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008750:	3402      	adds	r4, #2
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008818 <_svfiprintf_r+0x1f4>
 8008758:	7821      	ldrb	r1, [r4, #0]
 800875a:	2203      	movs	r2, #3
 800875c:	4650      	mov	r0, sl
 800875e:	f7f7 fd0f 	bl	8000180 <memchr>
 8008762:	b138      	cbz	r0, 8008774 <_svfiprintf_r+0x150>
 8008764:	9b04      	ldr	r3, [sp, #16]
 8008766:	eba0 000a 	sub.w	r0, r0, sl
 800876a:	2240      	movs	r2, #64	@ 0x40
 800876c:	4082      	lsls	r2, r0
 800876e:	4313      	orrs	r3, r2
 8008770:	3401      	adds	r4, #1
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008778:	4824      	ldr	r0, [pc, #144]	@ (800880c <_svfiprintf_r+0x1e8>)
 800877a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800877e:	2206      	movs	r2, #6
 8008780:	f7f7 fcfe 	bl	8000180 <memchr>
 8008784:	2800      	cmp	r0, #0
 8008786:	d036      	beq.n	80087f6 <_svfiprintf_r+0x1d2>
 8008788:	4b21      	ldr	r3, [pc, #132]	@ (8008810 <_svfiprintf_r+0x1ec>)
 800878a:	bb1b      	cbnz	r3, 80087d4 <_svfiprintf_r+0x1b0>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	3307      	adds	r3, #7
 8008790:	f023 0307 	bic.w	r3, r3, #7
 8008794:	3308      	adds	r3, #8
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879a:	4433      	add	r3, r6
 800879c:	9309      	str	r3, [sp, #36]	@ 0x24
 800879e:	e76a      	b.n	8008676 <_svfiprintf_r+0x52>
 80087a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a4:	460c      	mov	r4, r1
 80087a6:	2001      	movs	r0, #1
 80087a8:	e7a8      	b.n	80086fc <_svfiprintf_r+0xd8>
 80087aa:	2300      	movs	r3, #0
 80087ac:	3401      	adds	r4, #1
 80087ae:	9305      	str	r3, [sp, #20]
 80087b0:	4619      	mov	r1, r3
 80087b2:	f04f 0c0a 	mov.w	ip, #10
 80087b6:	4620      	mov	r0, r4
 80087b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087bc:	3a30      	subs	r2, #48	@ 0x30
 80087be:	2a09      	cmp	r2, #9
 80087c0:	d903      	bls.n	80087ca <_svfiprintf_r+0x1a6>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0c6      	beq.n	8008754 <_svfiprintf_r+0x130>
 80087c6:	9105      	str	r1, [sp, #20]
 80087c8:	e7c4      	b.n	8008754 <_svfiprintf_r+0x130>
 80087ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ce:	4604      	mov	r4, r0
 80087d0:	2301      	movs	r3, #1
 80087d2:	e7f0      	b.n	80087b6 <_svfiprintf_r+0x192>
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	462a      	mov	r2, r5
 80087da:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <_svfiprintf_r+0x1f0>)
 80087dc:	a904      	add	r1, sp, #16
 80087de:	4638      	mov	r0, r7
 80087e0:	f7fd fe6c 	bl	80064bc <_printf_float>
 80087e4:	1c42      	adds	r2, r0, #1
 80087e6:	4606      	mov	r6, r0
 80087e8:	d1d6      	bne.n	8008798 <_svfiprintf_r+0x174>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	065b      	lsls	r3, r3, #25
 80087ee:	f53f af2d 	bmi.w	800864c <_svfiprintf_r+0x28>
 80087f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087f4:	e72c      	b.n	8008650 <_svfiprintf_r+0x2c>
 80087f6:	ab03      	add	r3, sp, #12
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	462a      	mov	r2, r5
 80087fc:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <_svfiprintf_r+0x1f0>)
 80087fe:	a904      	add	r1, sp, #16
 8008800:	4638      	mov	r0, r7
 8008802:	f7fe f8f3 	bl	80069ec <_printf_i>
 8008806:	e7ed      	b.n	80087e4 <_svfiprintf_r+0x1c0>
 8008808:	08009516 	.word	0x08009516
 800880c:	08009520 	.word	0x08009520
 8008810:	080064bd 	.word	0x080064bd
 8008814:	0800856d 	.word	0x0800856d
 8008818:	0800951c 	.word	0x0800951c

0800881c <__sflush_r>:
 800881c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	0716      	lsls	r6, r2, #28
 8008826:	4605      	mov	r5, r0
 8008828:	460c      	mov	r4, r1
 800882a:	d454      	bmi.n	80088d6 <__sflush_r+0xba>
 800882c:	684b      	ldr	r3, [r1, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	dc02      	bgt.n	8008838 <__sflush_r+0x1c>
 8008832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd48      	ble.n	80088ca <__sflush_r+0xae>
 8008838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800883a:	2e00      	cmp	r6, #0
 800883c:	d045      	beq.n	80088ca <__sflush_r+0xae>
 800883e:	2300      	movs	r3, #0
 8008840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008844:	682f      	ldr	r7, [r5, #0]
 8008846:	6a21      	ldr	r1, [r4, #32]
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	d030      	beq.n	80088ae <__sflush_r+0x92>
 800884c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	0759      	lsls	r1, r3, #29
 8008852:	d505      	bpl.n	8008860 <__sflush_r+0x44>
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800885a:	b10b      	cbz	r3, 8008860 <__sflush_r+0x44>
 800885c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	2300      	movs	r3, #0
 8008862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008864:	6a21      	ldr	r1, [r4, #32]
 8008866:	4628      	mov	r0, r5
 8008868:	47b0      	blx	r6
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	d106      	bne.n	800887e <__sflush_r+0x62>
 8008870:	6829      	ldr	r1, [r5, #0]
 8008872:	291d      	cmp	r1, #29
 8008874:	d82b      	bhi.n	80088ce <__sflush_r+0xb2>
 8008876:	4a2a      	ldr	r2, [pc, #168]	@ (8008920 <__sflush_r+0x104>)
 8008878:	40ca      	lsrs	r2, r1
 800887a:	07d6      	lsls	r6, r2, #31
 800887c:	d527      	bpl.n	80088ce <__sflush_r+0xb2>
 800887e:	2200      	movs	r2, #0
 8008880:	6062      	str	r2, [r4, #4]
 8008882:	04d9      	lsls	r1, r3, #19
 8008884:	6922      	ldr	r2, [r4, #16]
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	d504      	bpl.n	8008894 <__sflush_r+0x78>
 800888a:	1c42      	adds	r2, r0, #1
 800888c:	d101      	bne.n	8008892 <__sflush_r+0x76>
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	b903      	cbnz	r3, 8008894 <__sflush_r+0x78>
 8008892:	6560      	str	r0, [r4, #84]	@ 0x54
 8008894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008896:	602f      	str	r7, [r5, #0]
 8008898:	b1b9      	cbz	r1, 80088ca <__sflush_r+0xae>
 800889a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800889e:	4299      	cmp	r1, r3
 80088a0:	d002      	beq.n	80088a8 <__sflush_r+0x8c>
 80088a2:	4628      	mov	r0, r5
 80088a4:	f7ff f9e8 	bl	8007c78 <_free_r>
 80088a8:	2300      	movs	r3, #0
 80088aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ac:	e00d      	b.n	80088ca <__sflush_r+0xae>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b0      	blx	r6
 80088b4:	4602      	mov	r2, r0
 80088b6:	1c50      	adds	r0, r2, #1
 80088b8:	d1c9      	bne.n	800884e <__sflush_r+0x32>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0c6      	beq.n	800884e <__sflush_r+0x32>
 80088c0:	2b1d      	cmp	r3, #29
 80088c2:	d001      	beq.n	80088c8 <__sflush_r+0xac>
 80088c4:	2b16      	cmp	r3, #22
 80088c6:	d11e      	bne.n	8008906 <__sflush_r+0xea>
 80088c8:	602f      	str	r7, [r5, #0]
 80088ca:	2000      	movs	r0, #0
 80088cc:	e022      	b.n	8008914 <__sflush_r+0xf8>
 80088ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d2:	b21b      	sxth	r3, r3
 80088d4:	e01b      	b.n	800890e <__sflush_r+0xf2>
 80088d6:	690f      	ldr	r7, [r1, #16]
 80088d8:	2f00      	cmp	r7, #0
 80088da:	d0f6      	beq.n	80088ca <__sflush_r+0xae>
 80088dc:	0793      	lsls	r3, r2, #30
 80088de:	680e      	ldr	r6, [r1, #0]
 80088e0:	bf08      	it	eq
 80088e2:	694b      	ldreq	r3, [r1, #20]
 80088e4:	600f      	str	r7, [r1, #0]
 80088e6:	bf18      	it	ne
 80088e8:	2300      	movne	r3, #0
 80088ea:	eba6 0807 	sub.w	r8, r6, r7
 80088ee:	608b      	str	r3, [r1, #8]
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	dde9      	ble.n	80088ca <__sflush_r+0xae>
 80088f6:	6a21      	ldr	r1, [r4, #32]
 80088f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088fa:	4643      	mov	r3, r8
 80088fc:	463a      	mov	r2, r7
 80088fe:	4628      	mov	r0, r5
 8008900:	47b0      	blx	r6
 8008902:	2800      	cmp	r0, #0
 8008904:	dc08      	bgt.n	8008918 <__sflush_r+0xfc>
 8008906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	4407      	add	r7, r0
 800891a:	eba8 0800 	sub.w	r8, r8, r0
 800891e:	e7e7      	b.n	80088f0 <__sflush_r+0xd4>
 8008920:	20400001 	.word	0x20400001

08008924 <_fflush_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	690b      	ldr	r3, [r1, #16]
 8008928:	4605      	mov	r5, r0
 800892a:	460c      	mov	r4, r1
 800892c:	b913      	cbnz	r3, 8008934 <_fflush_r+0x10>
 800892e:	2500      	movs	r5, #0
 8008930:	4628      	mov	r0, r5
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	b118      	cbz	r0, 800893e <_fflush_r+0x1a>
 8008936:	6a03      	ldr	r3, [r0, #32]
 8008938:	b90b      	cbnz	r3, 800893e <_fflush_r+0x1a>
 800893a:	f7fe fa01 	bl	8006d40 <__sinit>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f3      	beq.n	800892e <_fflush_r+0xa>
 8008946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008948:	07d0      	lsls	r0, r2, #31
 800894a:	d404      	bmi.n	8008956 <_fflush_r+0x32>
 800894c:	0599      	lsls	r1, r3, #22
 800894e:	d402      	bmi.n	8008956 <_fflush_r+0x32>
 8008950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008952:	f7fe fb28 	bl	8006fa6 <__retarget_lock_acquire_recursive>
 8008956:	4628      	mov	r0, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7ff ff5f 	bl	800881c <__sflush_r>
 800895e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008960:	07da      	lsls	r2, r3, #31
 8008962:	4605      	mov	r5, r0
 8008964:	d4e4      	bmi.n	8008930 <_fflush_r+0xc>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	059b      	lsls	r3, r3, #22
 800896a:	d4e1      	bmi.n	8008930 <_fflush_r+0xc>
 800896c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800896e:	f7fe fb1b 	bl	8006fa8 <__retarget_lock_release_recursive>
 8008972:	e7dd      	b.n	8008930 <_fflush_r+0xc>

08008974 <memmove>:
 8008974:	4288      	cmp	r0, r1
 8008976:	b510      	push	{r4, lr}
 8008978:	eb01 0402 	add.w	r4, r1, r2
 800897c:	d902      	bls.n	8008984 <memmove+0x10>
 800897e:	4284      	cmp	r4, r0
 8008980:	4623      	mov	r3, r4
 8008982:	d807      	bhi.n	8008994 <memmove+0x20>
 8008984:	1e43      	subs	r3, r0, #1
 8008986:	42a1      	cmp	r1, r4
 8008988:	d008      	beq.n	800899c <memmove+0x28>
 800898a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800898e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008992:	e7f8      	b.n	8008986 <memmove+0x12>
 8008994:	4402      	add	r2, r0
 8008996:	4601      	mov	r1, r0
 8008998:	428a      	cmp	r2, r1
 800899a:	d100      	bne.n	800899e <memmove+0x2a>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089a6:	e7f7      	b.n	8008998 <memmove+0x24>

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	@ (80089c4 <_sbrk_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f9 fa6e 	bl	8001e94 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	200007ac 	.word	0x200007ac

080089c8 <__assert_func>:
 80089c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ca:	4614      	mov	r4, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <__assert_func+0x2c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4605      	mov	r5, r0
 80089d4:	68d8      	ldr	r0, [r3, #12]
 80089d6:	b14c      	cbz	r4, 80089ec <__assert_func+0x24>
 80089d8:	4b07      	ldr	r3, [pc, #28]	@ (80089f8 <__assert_func+0x30>)
 80089da:	9100      	str	r1, [sp, #0]
 80089dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089e0:	4906      	ldr	r1, [pc, #24]	@ (80089fc <__assert_func+0x34>)
 80089e2:	462b      	mov	r3, r5
 80089e4:	f000 f870 	bl	8008ac8 <fiprintf>
 80089e8:	f000 f880 	bl	8008aec <abort>
 80089ec:	4b04      	ldr	r3, [pc, #16]	@ (8008a00 <__assert_func+0x38>)
 80089ee:	461c      	mov	r4, r3
 80089f0:	e7f3      	b.n	80089da <__assert_func+0x12>
 80089f2:	bf00      	nop
 80089f4:	20000054 	.word	0x20000054
 80089f8:	08009531 	.word	0x08009531
 80089fc:	0800953e 	.word	0x0800953e
 8008a00:	0800956c 	.word	0x0800956c

08008a04 <_calloc_r>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	fba1 5402 	umull	r5, r4, r1, r2
 8008a0a:	b934      	cbnz	r4, 8008a1a <_calloc_r+0x16>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7ff f9a7 	bl	8007d60 <_malloc_r>
 8008a12:	4606      	mov	r6, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <_calloc_r+0x1e>
 8008a16:	4630      	mov	r0, r6
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	220c      	movs	r2, #12
 8008a1c:	6002      	str	r2, [r0, #0]
 8008a1e:	2600      	movs	r6, #0
 8008a20:	e7f9      	b.n	8008a16 <_calloc_r+0x12>
 8008a22:	462a      	mov	r2, r5
 8008a24:	4621      	mov	r1, r4
 8008a26:	f7fe fa41 	bl	8006eac <memset>
 8008a2a:	e7f4      	b.n	8008a16 <_calloc_r+0x12>

08008a2c <__ascii_mbtowc>:
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	b901      	cbnz	r1, 8008a32 <__ascii_mbtowc+0x6>
 8008a30:	a901      	add	r1, sp, #4
 8008a32:	b142      	cbz	r2, 8008a46 <__ascii_mbtowc+0x1a>
 8008a34:	b14b      	cbz	r3, 8008a4a <__ascii_mbtowc+0x1e>
 8008a36:	7813      	ldrb	r3, [r2, #0]
 8008a38:	600b      	str	r3, [r1, #0]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	1e10      	subs	r0, r2, #0
 8008a3e:	bf18      	it	ne
 8008a40:	2001      	movne	r0, #1
 8008a42:	b002      	add	sp, #8
 8008a44:	4770      	bx	lr
 8008a46:	4610      	mov	r0, r2
 8008a48:	e7fb      	b.n	8008a42 <__ascii_mbtowc+0x16>
 8008a4a:	f06f 0001 	mvn.w	r0, #1
 8008a4e:	e7f8      	b.n	8008a42 <__ascii_mbtowc+0x16>

08008a50 <_realloc_r>:
 8008a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a54:	4607      	mov	r7, r0
 8008a56:	4614      	mov	r4, r2
 8008a58:	460d      	mov	r5, r1
 8008a5a:	b921      	cbnz	r1, 8008a66 <_realloc_r+0x16>
 8008a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a60:	4611      	mov	r1, r2
 8008a62:	f7ff b97d 	b.w	8007d60 <_malloc_r>
 8008a66:	b92a      	cbnz	r2, 8008a74 <_realloc_r+0x24>
 8008a68:	f7ff f906 	bl	8007c78 <_free_r>
 8008a6c:	4625      	mov	r5, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a74:	f000 f841 	bl	8008afa <_malloc_usable_size_r>
 8008a78:	4284      	cmp	r4, r0
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	d802      	bhi.n	8008a84 <_realloc_r+0x34>
 8008a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a82:	d8f4      	bhi.n	8008a6e <_realloc_r+0x1e>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4638      	mov	r0, r7
 8008a88:	f7ff f96a 	bl	8007d60 <_malloc_r>
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	b908      	cbnz	r0, 8008a94 <_realloc_r+0x44>
 8008a90:	4645      	mov	r5, r8
 8008a92:	e7ec      	b.n	8008a6e <_realloc_r+0x1e>
 8008a94:	42b4      	cmp	r4, r6
 8008a96:	4622      	mov	r2, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	bf28      	it	cs
 8008a9c:	4632      	movcs	r2, r6
 8008a9e:	f7fe fa84 	bl	8006faa <memcpy>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f7ff f8e7 	bl	8007c78 <_free_r>
 8008aaa:	e7f1      	b.n	8008a90 <_realloc_r+0x40>

08008aac <__ascii_wctomb>:
 8008aac:	4603      	mov	r3, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	b141      	cbz	r1, 8008ac4 <__ascii_wctomb+0x18>
 8008ab2:	2aff      	cmp	r2, #255	@ 0xff
 8008ab4:	d904      	bls.n	8008ac0 <__ascii_wctomb+0x14>
 8008ab6:	228a      	movs	r2, #138	@ 0x8a
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	4770      	bx	lr
 8008ac0:	700a      	strb	r2, [r1, #0]
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	4770      	bx	lr
	...

08008ac8 <fiprintf>:
 8008ac8:	b40e      	push	{r1, r2, r3}
 8008aca:	b503      	push	{r0, r1, lr}
 8008acc:	4601      	mov	r1, r0
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	4805      	ldr	r0, [pc, #20]	@ (8008ae8 <fiprintf+0x20>)
 8008ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	f000 f83f 	bl	8008b5c <_vfiprintf_r>
 8008ade:	b002      	add	sp, #8
 8008ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae4:	b003      	add	sp, #12
 8008ae6:	4770      	bx	lr
 8008ae8:	20000054 	.word	0x20000054

08008aec <abort>:
 8008aec:	b508      	push	{r3, lr}
 8008aee:	2006      	movs	r0, #6
 8008af0:	f000 fa08 	bl	8008f04 <raise>
 8008af4:	2001      	movs	r0, #1
 8008af6:	f7f9 f955 	bl	8001da4 <_exit>

08008afa <_malloc_usable_size_r>:
 8008afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008afe:	1f18      	subs	r0, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfbc      	itt	lt
 8008b04:	580b      	ldrlt	r3, [r1, r0]
 8008b06:	18c0      	addlt	r0, r0, r3
 8008b08:	4770      	bx	lr

08008b0a <__sfputc_r>:
 8008b0a:	6893      	ldr	r3, [r2, #8]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	b410      	push	{r4}
 8008b12:	6093      	str	r3, [r2, #8]
 8008b14:	da08      	bge.n	8008b28 <__sfputc_r+0x1e>
 8008b16:	6994      	ldr	r4, [r2, #24]
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	db01      	blt.n	8008b20 <__sfputc_r+0x16>
 8008b1c:	290a      	cmp	r1, #10
 8008b1e:	d103      	bne.n	8008b28 <__sfputc_r+0x1e>
 8008b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b24:	f000 b932 	b.w	8008d8c <__swbuf_r>
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	1c58      	adds	r0, r3, #1
 8008b2c:	6010      	str	r0, [r2, #0]
 8008b2e:	7019      	strb	r1, [r3, #0]
 8008b30:	4608      	mov	r0, r1
 8008b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <__sfputs_r>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	4614      	mov	r4, r2
 8008b40:	18d5      	adds	r5, r2, r3
 8008b42:	42ac      	cmp	r4, r5
 8008b44:	d101      	bne.n	8008b4a <__sfputs_r+0x12>
 8008b46:	2000      	movs	r0, #0
 8008b48:	e007      	b.n	8008b5a <__sfputs_r+0x22>
 8008b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4e:	463a      	mov	r2, r7
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7ff ffda 	bl	8008b0a <__sfputc_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d1f3      	bne.n	8008b42 <__sfputs_r+0xa>
 8008b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b5c <_vfiprintf_r>:
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b60:	460d      	mov	r5, r1
 8008b62:	b09d      	sub	sp, #116	@ 0x74
 8008b64:	4614      	mov	r4, r2
 8008b66:	4698      	mov	r8, r3
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b118      	cbz	r0, 8008b74 <_vfiprintf_r+0x18>
 8008b6c:	6a03      	ldr	r3, [r0, #32]
 8008b6e:	b90b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x18>
 8008b70:	f7fe f8e6 	bl	8006d40 <__sinit>
 8008b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b76:	07d9      	lsls	r1, r3, #31
 8008b78:	d405      	bmi.n	8008b86 <_vfiprintf_r+0x2a>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	059a      	lsls	r2, r3, #22
 8008b7e:	d402      	bmi.n	8008b86 <_vfiprintf_r+0x2a>
 8008b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b82:	f7fe fa10 	bl	8006fa6 <__retarget_lock_acquire_recursive>
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	071b      	lsls	r3, r3, #28
 8008b8a:	d501      	bpl.n	8008b90 <_vfiprintf_r+0x34>
 8008b8c:	692b      	ldr	r3, [r5, #16]
 8008b8e:	b99b      	cbnz	r3, 8008bb8 <_vfiprintf_r+0x5c>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 f938 	bl	8008e08 <__swsetup_r>
 8008b98:	b170      	cbz	r0, 8008bb8 <_vfiprintf_r+0x5c>
 8008b9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b9c:	07dc      	lsls	r4, r3, #31
 8008b9e:	d504      	bpl.n	8008baa <_vfiprintf_r+0x4e>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	b01d      	add	sp, #116	@ 0x74
 8008ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	0598      	lsls	r0, r3, #22
 8008bae:	d4f7      	bmi.n	8008ba0 <_vfiprintf_r+0x44>
 8008bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bb2:	f7fe f9f9 	bl	8006fa8 <__retarget_lock_release_recursive>
 8008bb6:	e7f3      	b.n	8008ba0 <_vfiprintf_r+0x44>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc6:	2330      	movs	r3, #48	@ 0x30
 8008bc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d78 <_vfiprintf_r+0x21c>
 8008bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bd0:	f04f 0901 	mov.w	r9, #1
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	469a      	mov	sl, r3
 8008bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bdc:	b10a      	cbz	r2, 8008be2 <_vfiprintf_r+0x86>
 8008bde:	2a25      	cmp	r2, #37	@ 0x25
 8008be0:	d1f9      	bne.n	8008bd6 <_vfiprintf_r+0x7a>
 8008be2:	ebba 0b04 	subs.w	fp, sl, r4
 8008be6:	d00b      	beq.n	8008c00 <_vfiprintf_r+0xa4>
 8008be8:	465b      	mov	r3, fp
 8008bea:	4622      	mov	r2, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffa2 	bl	8008b38 <__sfputs_r>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f000 80a7 	beq.w	8008d48 <_vfiprintf_r+0x1ec>
 8008bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bfc:	445a      	add	r2, fp
 8008bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c00:	f89a 3000 	ldrb.w	r3, [sl]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 809f 	beq.w	8008d48 <_vfiprintf_r+0x1ec>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c14:	f10a 0a01 	add.w	sl, sl, #1
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c22:	4654      	mov	r4, sl
 8008c24:	2205      	movs	r2, #5
 8008c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2a:	4853      	ldr	r0, [pc, #332]	@ (8008d78 <_vfiprintf_r+0x21c>)
 8008c2c:	f7f7 faa8 	bl	8000180 <memchr>
 8008c30:	9a04      	ldr	r2, [sp, #16]
 8008c32:	b9d8      	cbnz	r0, 8008c6c <_vfiprintf_r+0x110>
 8008c34:	06d1      	lsls	r1, r2, #27
 8008c36:	bf44      	itt	mi
 8008c38:	2320      	movmi	r3, #32
 8008c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c3e:	0713      	lsls	r3, r2, #28
 8008c40:	bf44      	itt	mi
 8008c42:	232b      	movmi	r3, #43	@ 0x2b
 8008c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c48:	f89a 3000 	ldrb.w	r3, [sl]
 8008c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c4e:	d015      	beq.n	8008c7c <_vfiprintf_r+0x120>
 8008c50:	9a07      	ldr	r2, [sp, #28]
 8008c52:	4654      	mov	r4, sl
 8008c54:	2000      	movs	r0, #0
 8008c56:	f04f 0c0a 	mov.w	ip, #10
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c60:	3b30      	subs	r3, #48	@ 0x30
 8008c62:	2b09      	cmp	r3, #9
 8008c64:	d94b      	bls.n	8008cfe <_vfiprintf_r+0x1a2>
 8008c66:	b1b0      	cbz	r0, 8008c96 <_vfiprintf_r+0x13a>
 8008c68:	9207      	str	r2, [sp, #28]
 8008c6a:	e014      	b.n	8008c96 <_vfiprintf_r+0x13a>
 8008c6c:	eba0 0308 	sub.w	r3, r0, r8
 8008c70:	fa09 f303 	lsl.w	r3, r9, r3
 8008c74:	4313      	orrs	r3, r2
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	46a2      	mov	sl, r4
 8008c7a:	e7d2      	b.n	8008c22 <_vfiprintf_r+0xc6>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	1d19      	adds	r1, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	9103      	str	r1, [sp, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfbb      	ittet	lt
 8008c88:	425b      	neglt	r3, r3
 8008c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c8e:	9307      	strge	r3, [sp, #28]
 8008c90:	9307      	strlt	r3, [sp, #28]
 8008c92:	bfb8      	it	lt
 8008c94:	9204      	strlt	r2, [sp, #16]
 8008c96:	7823      	ldrb	r3, [r4, #0]
 8008c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c9a:	d10a      	bne.n	8008cb2 <_vfiprintf_r+0x156>
 8008c9c:	7863      	ldrb	r3, [r4, #1]
 8008c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca0:	d132      	bne.n	8008d08 <_vfiprintf_r+0x1ac>
 8008ca2:	9b03      	ldr	r3, [sp, #12]
 8008ca4:	1d1a      	adds	r2, r3, #4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	9203      	str	r2, [sp, #12]
 8008caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cae:	3402      	adds	r4, #2
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d88 <_vfiprintf_r+0x22c>
 8008cb6:	7821      	ldrb	r1, [r4, #0]
 8008cb8:	2203      	movs	r2, #3
 8008cba:	4650      	mov	r0, sl
 8008cbc:	f7f7 fa60 	bl	8000180 <memchr>
 8008cc0:	b138      	cbz	r0, 8008cd2 <_vfiprintf_r+0x176>
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	eba0 000a 	sub.w	r0, r0, sl
 8008cc8:	2240      	movs	r2, #64	@ 0x40
 8008cca:	4082      	lsls	r2, r0
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	3401      	adds	r4, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd6:	4829      	ldr	r0, [pc, #164]	@ (8008d7c <_vfiprintf_r+0x220>)
 8008cd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cdc:	2206      	movs	r2, #6
 8008cde:	f7f7 fa4f 	bl	8000180 <memchr>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d03f      	beq.n	8008d66 <_vfiprintf_r+0x20a>
 8008ce6:	4b26      	ldr	r3, [pc, #152]	@ (8008d80 <_vfiprintf_r+0x224>)
 8008ce8:	bb1b      	cbnz	r3, 8008d32 <_vfiprintf_r+0x1d6>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3307      	adds	r3, #7
 8008cee:	f023 0307 	bic.w	r3, r3, #7
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf8:	443b      	add	r3, r7
 8008cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfc:	e76a      	b.n	8008bd4 <_vfiprintf_r+0x78>
 8008cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d02:	460c      	mov	r4, r1
 8008d04:	2001      	movs	r0, #1
 8008d06:	e7a8      	b.n	8008c5a <_vfiprintf_r+0xfe>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f04f 0c0a 	mov.w	ip, #10
 8008d14:	4620      	mov	r0, r4
 8008d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d1a:	3a30      	subs	r2, #48	@ 0x30
 8008d1c:	2a09      	cmp	r2, #9
 8008d1e:	d903      	bls.n	8008d28 <_vfiprintf_r+0x1cc>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0c6      	beq.n	8008cb2 <_vfiprintf_r+0x156>
 8008d24:	9105      	str	r1, [sp, #20]
 8008d26:	e7c4      	b.n	8008cb2 <_vfiprintf_r+0x156>
 8008d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7f0      	b.n	8008d14 <_vfiprintf_r+0x1b8>
 8008d32:	ab03      	add	r3, sp, #12
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	462a      	mov	r2, r5
 8008d38:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <_vfiprintf_r+0x228>)
 8008d3a:	a904      	add	r1, sp, #16
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7fd fbbd 	bl	80064bc <_printf_float>
 8008d42:	4607      	mov	r7, r0
 8008d44:	1c78      	adds	r0, r7, #1
 8008d46:	d1d6      	bne.n	8008cf6 <_vfiprintf_r+0x19a>
 8008d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d4a:	07d9      	lsls	r1, r3, #31
 8008d4c:	d405      	bmi.n	8008d5a <_vfiprintf_r+0x1fe>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_vfiprintf_r+0x1fe>
 8008d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d56:	f7fe f927 	bl	8006fa8 <__retarget_lock_release_recursive>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	065b      	lsls	r3, r3, #25
 8008d5e:	f53f af1f 	bmi.w	8008ba0 <_vfiprintf_r+0x44>
 8008d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d64:	e71e      	b.n	8008ba4 <_vfiprintf_r+0x48>
 8008d66:	ab03      	add	r3, sp, #12
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <_vfiprintf_r+0x228>)
 8008d6e:	a904      	add	r1, sp, #16
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7fd fe3b 	bl	80069ec <_printf_i>
 8008d76:	e7e4      	b.n	8008d42 <_vfiprintf_r+0x1e6>
 8008d78:	08009516 	.word	0x08009516
 8008d7c:	08009520 	.word	0x08009520
 8008d80:	080064bd 	.word	0x080064bd
 8008d84:	08008b39 	.word	0x08008b39
 8008d88:	0800951c 	.word	0x0800951c

08008d8c <__swbuf_r>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	460e      	mov	r6, r1
 8008d90:	4614      	mov	r4, r2
 8008d92:	4605      	mov	r5, r0
 8008d94:	b118      	cbz	r0, 8008d9e <__swbuf_r+0x12>
 8008d96:	6a03      	ldr	r3, [r0, #32]
 8008d98:	b90b      	cbnz	r3, 8008d9e <__swbuf_r+0x12>
 8008d9a:	f7fd ffd1 	bl	8006d40 <__sinit>
 8008d9e:	69a3      	ldr	r3, [r4, #24]
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	071a      	lsls	r2, r3, #28
 8008da6:	d501      	bpl.n	8008dac <__swbuf_r+0x20>
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	b943      	cbnz	r3, 8008dbe <__swbuf_r+0x32>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f82a 	bl	8008e08 <__swsetup_r>
 8008db4:	b118      	cbz	r0, 8008dbe <__swbuf_r+0x32>
 8008db6:	f04f 37ff 	mov.w	r7, #4294967295
 8008dba:	4638      	mov	r0, r7
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	6922      	ldr	r2, [r4, #16]
 8008dc2:	1a98      	subs	r0, r3, r2
 8008dc4:	6963      	ldr	r3, [r4, #20]
 8008dc6:	b2f6      	uxtb	r6, r6
 8008dc8:	4283      	cmp	r3, r0
 8008dca:	4637      	mov	r7, r6
 8008dcc:	dc05      	bgt.n	8008dda <__swbuf_r+0x4e>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7ff fda7 	bl	8008924 <_fflush_r>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d1ed      	bne.n	8008db6 <__swbuf_r+0x2a>
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	60a3      	str	r3, [r4, #8]
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	6022      	str	r2, [r4, #0]
 8008de6:	701e      	strb	r6, [r3, #0]
 8008de8:	6962      	ldr	r2, [r4, #20]
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d004      	beq.n	8008dfa <__swbuf_r+0x6e>
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	07db      	lsls	r3, r3, #31
 8008df4:	d5e1      	bpl.n	8008dba <__swbuf_r+0x2e>
 8008df6:	2e0a      	cmp	r6, #10
 8008df8:	d1df      	bne.n	8008dba <__swbuf_r+0x2e>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f7ff fd91 	bl	8008924 <_fflush_r>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d0d9      	beq.n	8008dba <__swbuf_r+0x2e>
 8008e06:	e7d6      	b.n	8008db6 <__swbuf_r+0x2a>

08008e08 <__swsetup_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4b29      	ldr	r3, [pc, #164]	@ (8008eb0 <__swsetup_r+0xa8>)
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	460c      	mov	r4, r1
 8008e12:	b118      	cbz	r0, 8008e1c <__swsetup_r+0x14>
 8008e14:	6a03      	ldr	r3, [r0, #32]
 8008e16:	b90b      	cbnz	r3, 8008e1c <__swsetup_r+0x14>
 8008e18:	f7fd ff92 	bl	8006d40 <__sinit>
 8008e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e20:	0719      	lsls	r1, r3, #28
 8008e22:	d422      	bmi.n	8008e6a <__swsetup_r+0x62>
 8008e24:	06da      	lsls	r2, r3, #27
 8008e26:	d407      	bmi.n	8008e38 <__swsetup_r+0x30>
 8008e28:	2209      	movs	r2, #9
 8008e2a:	602a      	str	r2, [r5, #0]
 8008e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e30:	81a3      	strh	r3, [r4, #12]
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
 8008e36:	e033      	b.n	8008ea0 <__swsetup_r+0x98>
 8008e38:	0758      	lsls	r0, r3, #29
 8008e3a:	d512      	bpl.n	8008e62 <__swsetup_r+0x5a>
 8008e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e3e:	b141      	cbz	r1, 8008e52 <__swsetup_r+0x4a>
 8008e40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e44:	4299      	cmp	r1, r3
 8008e46:	d002      	beq.n	8008e4e <__swsetup_r+0x46>
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f7fe ff15 	bl	8007c78 <_free_r>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6063      	str	r3, [r4, #4]
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f043 0308 	orr.w	r3, r3, #8
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	b94b      	cbnz	r3, 8008e82 <__swsetup_r+0x7a>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e78:	d003      	beq.n	8008e82 <__swsetup_r+0x7a>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f000 f883 	bl	8008f88 <__smakebuf_r>
 8008e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e86:	f013 0201 	ands.w	r2, r3, #1
 8008e8a:	d00a      	beq.n	8008ea2 <__swsetup_r+0x9a>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	60a2      	str	r2, [r4, #8]
 8008e90:	6962      	ldr	r2, [r4, #20]
 8008e92:	4252      	negs	r2, r2
 8008e94:	61a2      	str	r2, [r4, #24]
 8008e96:	6922      	ldr	r2, [r4, #16]
 8008e98:	b942      	cbnz	r2, 8008eac <__swsetup_r+0xa4>
 8008e9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e9e:	d1c5      	bne.n	8008e2c <__swsetup_r+0x24>
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	0799      	lsls	r1, r3, #30
 8008ea4:	bf58      	it	pl
 8008ea6:	6962      	ldrpl	r2, [r4, #20]
 8008ea8:	60a2      	str	r2, [r4, #8]
 8008eaa:	e7f4      	b.n	8008e96 <__swsetup_r+0x8e>
 8008eac:	2000      	movs	r0, #0
 8008eae:	e7f7      	b.n	8008ea0 <__swsetup_r+0x98>
 8008eb0:	20000054 	.word	0x20000054

08008eb4 <_raise_r>:
 8008eb4:	291f      	cmp	r1, #31
 8008eb6:	b538      	push	{r3, r4, r5, lr}
 8008eb8:	4605      	mov	r5, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	d904      	bls.n	8008ec8 <_raise_r+0x14>
 8008ebe:	2316      	movs	r3, #22
 8008ec0:	6003      	str	r3, [r0, #0]
 8008ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008eca:	b112      	cbz	r2, 8008ed2 <_raise_r+0x1e>
 8008ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ed0:	b94b      	cbnz	r3, 8008ee6 <_raise_r+0x32>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f000 f830 	bl	8008f38 <_getpid_r>
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4601      	mov	r1, r0
 8008edc:	4628      	mov	r0, r5
 8008ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee2:	f000 b817 	b.w	8008f14 <_kill_r>
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d00a      	beq.n	8008f00 <_raise_r+0x4c>
 8008eea:	1c59      	adds	r1, r3, #1
 8008eec:	d103      	bne.n	8008ef6 <_raise_r+0x42>
 8008eee:	2316      	movs	r3, #22
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	2001      	movs	r0, #1
 8008ef4:	e7e7      	b.n	8008ec6 <_raise_r+0x12>
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008efc:	4620      	mov	r0, r4
 8008efe:	4798      	blx	r3
 8008f00:	2000      	movs	r0, #0
 8008f02:	e7e0      	b.n	8008ec6 <_raise_r+0x12>

08008f04 <raise>:
 8008f04:	4b02      	ldr	r3, [pc, #8]	@ (8008f10 <raise+0xc>)
 8008f06:	4601      	mov	r1, r0
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	f7ff bfd3 	b.w	8008eb4 <_raise_r>
 8008f0e:	bf00      	nop
 8008f10:	20000054 	.word	0x20000054

08008f14 <_kill_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	@ (8008f34 <_kill_r+0x20>)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	4611      	mov	r1, r2
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	f7f8 ff2f 	bl	8001d84 <_kill>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	d102      	bne.n	8008f30 <_kill_r+0x1c>
 8008f2a:	682b      	ldr	r3, [r5, #0]
 8008f2c:	b103      	cbz	r3, 8008f30 <_kill_r+0x1c>
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	bf00      	nop
 8008f34:	200007ac 	.word	0x200007ac

08008f38 <_getpid_r>:
 8008f38:	f7f8 bf1c 	b.w	8001d74 <_getpid>

08008f3c <__swhatbuf_r>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	460c      	mov	r4, r1
 8008f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	b096      	sub	sp, #88	@ 0x58
 8008f48:	4615      	mov	r5, r2
 8008f4a:	461e      	mov	r6, r3
 8008f4c:	da0d      	bge.n	8008f6a <__swhatbuf_r+0x2e>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f54:	f04f 0100 	mov.w	r1, #0
 8008f58:	bf14      	ite	ne
 8008f5a:	2340      	movne	r3, #64	@ 0x40
 8008f5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f60:	2000      	movs	r0, #0
 8008f62:	6031      	str	r1, [r6, #0]
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	b016      	add	sp, #88	@ 0x58
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	466a      	mov	r2, sp
 8008f6c:	f000 f848 	bl	8009000 <_fstat_r>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	dbec      	blt.n	8008f4e <__swhatbuf_r+0x12>
 8008f74:	9901      	ldr	r1, [sp, #4]
 8008f76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f7e:	4259      	negs	r1, r3
 8008f80:	4159      	adcs	r1, r3
 8008f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f86:	e7eb      	b.n	8008f60 <__swhatbuf_r+0x24>

08008f88 <__smakebuf_r>:
 8008f88:	898b      	ldrh	r3, [r1, #12]
 8008f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f8c:	079d      	lsls	r5, r3, #30
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460c      	mov	r4, r1
 8008f92:	d507      	bpl.n	8008fa4 <__smakebuf_r+0x1c>
 8008f94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	6163      	str	r3, [r4, #20]
 8008fa0:	b003      	add	sp, #12
 8008fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa4:	ab01      	add	r3, sp, #4
 8008fa6:	466a      	mov	r2, sp
 8008fa8:	f7ff ffc8 	bl	8008f3c <__swhatbuf_r>
 8008fac:	9f00      	ldr	r7, [sp, #0]
 8008fae:	4605      	mov	r5, r0
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7fe fed4 	bl	8007d60 <_malloc_r>
 8008fb8:	b948      	cbnz	r0, 8008fce <__smakebuf_r+0x46>
 8008fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fbe:	059a      	lsls	r2, r3, #22
 8008fc0:	d4ee      	bmi.n	8008fa0 <__smakebuf_r+0x18>
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	f043 0302 	orr.w	r3, r3, #2
 8008fca:	81a3      	strh	r3, [r4, #12]
 8008fcc:	e7e2      	b.n	8008f94 <__smakebuf_r+0xc>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	6020      	str	r0, [r4, #0]
 8008fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fde:	b15b      	cbz	r3, 8008ff8 <__smakebuf_r+0x70>
 8008fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f000 f81d 	bl	8009024 <_isatty_r>
 8008fea:	b128      	cbz	r0, 8008ff8 <__smakebuf_r+0x70>
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	f043 0301 	orr.w	r3, r3, #1
 8008ff6:	81a3      	strh	r3, [r4, #12]
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	431d      	orrs	r5, r3
 8008ffc:	81a5      	strh	r5, [r4, #12]
 8008ffe:	e7cf      	b.n	8008fa0 <__smakebuf_r+0x18>

08009000 <_fstat_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	@ (8009020 <_fstat_r+0x20>)
 8009004:	2300      	movs	r3, #0
 8009006:	4604      	mov	r4, r0
 8009008:	4608      	mov	r0, r1
 800900a:	4611      	mov	r1, r2
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	f7f8 ff19 	bl	8001e44 <_fstat>
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	d102      	bne.n	800901c <_fstat_r+0x1c>
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	b103      	cbz	r3, 800901c <_fstat_r+0x1c>
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	bd38      	pop	{r3, r4, r5, pc}
 800901e:	bf00      	nop
 8009020:	200007ac 	.word	0x200007ac

08009024 <_isatty_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d06      	ldr	r5, [pc, #24]	@ (8009040 <_isatty_r+0x1c>)
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	f7f8 ff18 	bl	8001e64 <_isatty>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_isatty_r+0x1a>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_isatty_r+0x1a>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	200007ac 	.word	0x200007ac

08009044 <_init>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr

08009050 <_fini>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr
 800905c:	0000      	movs	r0, r0
	...

08009060 <__FLASH_Program_Fast_veneer>:
 8009060:	f85f f000 	ldr.w	pc, [pc]	@ 8009064 <__FLASH_Program_Fast_veneer+0x4>
 8009064:	20000211 	.word	0x20000211

Disassembly of section .data:

20000008 <detected_color>:
20000008:	00000009                                ....

2000000c <color_names.0>:
2000000c:	08009274 08009278 08009280 08009288     t...x...........
2000001c:	08009290 08009298 080092a0 080092ac     ................
2000002c:	080092b8 080092c0 080092c8 080092d0     ................

2000003c <SystemCoreClock>:
2000003c:	003d0900                                ..=.

20000040 <uwTickPrio>:
20000040:	00000010                                ....

20000044 <uwTickFreq>:
20000044:	00000001                                ....

20000048 <__sglue>:
20000048:	00000000 00000003 20000670              ........p.. 

20000054 <_impure_ptr>:
20000054:	20000058                                X.. 

20000058 <_impure_data>:
20000058:	00000000 20000670 200006d8 20000740     ....p.. ... @.. 
	...

200000a4 <__global_locale>:
200000a4:	00000043 00000000 00000000 00000000     C...............
	...
200000c4:	00000043 00000000 00000000 00000000     C...............
	...
200000e4:	00000043 00000000 00000000 00000000     C...............
	...
20000104:	00000043 00000000 00000000 00000000     C...............
	...
20000124:	00000043 00000000 00000000 00000000     C...............
	...
20000144:	00000043 00000000 00000000 00000000     C...............
	...
20000164:	00000043 00000000 00000000 00000000     C...............
	...
20000184:	08008aad 08008a2d 00000000 08009670     ....-.......p...
20000194:	0800952f 0800956c 0800956c 0800956c     /...l...l...l...
200001a4:	0800956c 0800956c 0800956c 0800956c     l...l...l...l...
200001b4:	0800956c 0800956c ffffffff ffffffff     l...l...........
200001c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200001ec:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000210 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000210:	b480      	push	{r7}
20000212:	b089      	sub	sp, #36	@ 0x24
20000214:	af00      	add	r7, sp, #0
20000216:	6078      	str	r0, [r7, #4]
20000218:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000021a:	2380      	movs	r3, #128	@ 0x80
2000021c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
2000021e:	687b      	ldr	r3, [r7, #4]
20000220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000222:	683b      	ldr	r3, [r7, #0]
20000224:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000226:	4b18      	ldr	r3, [pc, #96]	@ (20000288 <FLASH_Program_Fast+0x78>)
20000228:	695b      	ldr	r3, [r3, #20]
2000022a:	4a17      	ldr	r2, [pc, #92]	@ (20000288 <FLASH_Program_Fast+0x78>)
2000022c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20000230:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000232:	f3ef 8310 	mrs	r3, PRIMASK
20000236:	60fb      	str	r3, [r7, #12]
  return(result);
20000238:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000023a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000023c:	b672      	cpsid	i
}
2000023e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000240:	697b      	ldr	r3, [r7, #20]
20000242:	681a      	ldr	r2, [r3, #0]
20000244:	69bb      	ldr	r3, [r7, #24]
20000246:	601a      	str	r2, [r3, #0]
    dest_addr++;
20000248:	69bb      	ldr	r3, [r7, #24]
2000024a:	3304      	adds	r3, #4
2000024c:	61bb      	str	r3, [r7, #24]
    src_addr++;
2000024e:	697b      	ldr	r3, [r7, #20]
20000250:	3304      	adds	r3, #4
20000252:	617b      	str	r3, [r7, #20]
    row_index--;
20000254:	7ffb      	ldrb	r3, [r7, #31]
20000256:	3b01      	subs	r3, #1
20000258:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000025a:	7ffb      	ldrb	r3, [r7, #31]
2000025c:	2b00      	cmp	r3, #0
2000025e:	d1ef      	bne.n	20000240 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
20000260:	bf00      	nop
20000262:	4b09      	ldr	r3, [pc, #36]	@ (20000288 <FLASH_Program_Fast+0x78>)
20000264:	691b      	ldr	r3, [r3, #16]
20000266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2000026a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2000026e:	d0f8      	beq.n	20000262 <FLASH_Program_Fast+0x52>
20000270:	693b      	ldr	r3, [r7, #16]
20000272:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000274:	68bb      	ldr	r3, [r7, #8]
20000276:	f383 8810 	msr	PRIMASK, r3
}
2000027a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000027c:	bf00      	nop
2000027e:	3724      	adds	r7, #36	@ 0x24
20000280:	46bd      	mov	sp, r7
20000282:	f85d 7b04 	ldr.w	r7, [sp], #4
20000286:	4770      	bx	lr
20000288:	58004000 	.word	0x58004000
