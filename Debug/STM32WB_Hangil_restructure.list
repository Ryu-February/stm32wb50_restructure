
STM32WB_Hangil_restructure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800314c  0800314c  0000414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003234  08003234  00004234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003238  08003238  00004238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000024  20000008  0800323c  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000108  2000002c  08003260  0000502c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000134  08003260  00005134  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010a83  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002498  00000000  00000000  00015adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010d8  00000000  00000000  00017f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ce9  00000000  00000000  00019050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001cf8e  00000000  00000000  00019d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012a5d  00000000  00000000  00036cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000b387c  00000000  00000000  00049724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000fcfa0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044f8  00000000  00000000  000fcfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000067  00000000  00000000  001014dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000002c 	.word	0x2000002c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003134 	.word	0x08003134

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000030 	.word	0x20000030
 8000178:	08003134 	.word	0x08003134

0800017c <ap_init>:
#include "ap.h"



void ap_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	led_on(_DEF_CH_1);
 8000180:	2000      	movs	r0, #0
 8000182:	f000 f819 	bl	80001b8 <led_on>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}

0800018a <ap_main>:


void ap_main(void)
{
 800018a:	b580      	push	{r7, lr}
 800018c:	af00      	add	r7, sp, #0
	while(1)
	{
		led_toggle(_DEF_CH_1);
 800018e:	2000      	movs	r0, #0
 8000190:	f000 f836 	bl	8000200 <led_toggle>
		delay_ms(500);
 8000194:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000198:	f000 f802 	bl	80001a0 <delay_ms>
		led_toggle(_DEF_CH_1);
 800019c:	bf00      	nop
 800019e:	e7f6      	b.n	800018e <ap_main+0x4>

080001a0 <delay_ms>:




void delay_ms(uint32_t ms)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f000 fbd7 	bl	800095c <HAL_Delay>
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <led_on>:
			break;
	}
}

void led_on(uint8_t ch)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
	if(ch >= _LED_MAX_CH)
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2b02      	cmp	r3, #2
 80001c6:	d814      	bhi.n	80001f2 <led_on+0x3a>
		return;

	switch (ch)
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d112      	bne.n	80001f4 <led_on+0x3c>
	{
		case _DEF_CH_1 :
			HAL_GPIO_WritePin(led_table[ch].port, led_table[ch].pin, led_table[ch].on_state);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	@ (80001fc <led_on+0x44>)
 80001d2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	4a08      	ldr	r2, [pc, #32]	@ (80001fc <led_on+0x44>)
 80001da:	00db      	lsls	r3, r3, #3
 80001dc:	4413      	add	r3, r2
 80001de:	8899      	ldrh	r1, [r3, #4]
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a06      	ldr	r2, [pc, #24]	@ (80001fc <led_on+0x44>)
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	4413      	add	r3, r2
 80001e8:	799b      	ldrb	r3, [r3, #6]
 80001ea:	461a      	mov	r2, r3
 80001ec:	f000 fe26 	bl	8000e3c <HAL_GPIO_WritePin>
			break;
 80001f0:	e000      	b.n	80001f4 <led_on+0x3c>
		return;
 80001f2:	bf00      	nop
	}
}
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000008 	.word	0x20000008

08000200 <led_toggle>:
	}
}


void led_toggle(uint8_t ch)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
	if(ch >= _LED_MAX_CH)
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d810      	bhi.n	8000232 <led_toggle+0x32>
		return;

	switch (ch)
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10e      	bne.n	8000234 <led_toggle+0x34>
	{
		case _DEF_CH_1 :
			HAL_GPIO_TogglePin(led_table[ch].port, led_table[ch].pin);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4a08      	ldr	r2, [pc, #32]	@ (800023c <led_toggle+0x3c>)
 800021a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4906      	ldr	r1, [pc, #24]	@ (800023c <led_toggle+0x3c>)
 8000222:	00db      	lsls	r3, r3, #3
 8000224:	440b      	add	r3, r1
 8000226:	889b      	ldrh	r3, [r3, #4]
 8000228:	4619      	mov	r1, r3
 800022a:	4610      	mov	r0, r2
 800022c:	f000 fe1e 	bl	8000e6c <HAL_GPIO_TogglePin>
			break;
 8000230:	e000      	b.n	8000234 <led_toggle+0x34>
		return;
 8000232:	bf00      	nop
	}
}
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000008 	.word	0x20000008

08000240 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800024c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800024e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4313      	orrs	r3, r2
 8000256:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800025c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4013      	ands	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000264:	68fb      	ldr	r3, [r7, #12]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 faeb 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f80c 	bl	8000296 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f8eb 	bl	8000458 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000282:	f000 f85d 	bl	8000340 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000286:	f000 f89b 	bl	80003c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ap_init();
 800028a:	f7ff ff77 	bl	800017c <ap_init>
  ap_main();
 800028e:	f7ff ff7c 	bl	800018a <ap_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000292:	bf00      	nop
 8000294:	e7fd      	b.n	8000292 <main+0x20>

08000296 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b09a      	sub	sp, #104	@ 0x68
 800029a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	f107 0320 	add.w	r3, r7, #32
 80002a0:	2248      	movs	r2, #72	@ 0x48
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ff19 	bl	80030dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	615a      	str	r2, [r3, #20]
 80002ba:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002bc:	2303      	movs	r3, #3
 80002be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	2340      	movs	r3, #64	@ 0x40
 80002ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	2303      	movs	r3, #3
 80002d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002d8:	2310      	movs	r3, #16
 80002da:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002dc:	2308      	movs	r3, #8
 80002de:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80002e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80002ea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80002f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fa7e 	bl	80017f8 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000302:	f000 f901 	bl	8000508 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000306:	236f      	movs	r3, #111	@ 0x6f
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800031a:	2380      	movs	r3, #128	@ 0x80
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2103      	movs	r1, #3
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fdd0 	bl	8001ecc <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000332:	f000 f8e9 	bl	8000508 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3768      	adds	r7, #104	@ 0x68
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	@ (80003b8 <MX_I2C1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800034a:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <MX_I2C1_Init+0x7c>)
 800034e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000356:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037a:	480e      	ldr	r0, [pc, #56]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800037c:	f000 fd90 	bl	8000ea0 <HAL_I2C_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000386:	f000 f8bf 	bl	8000508 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038a:	2100      	movs	r1, #0
 800038c:	4809      	ldr	r0, [pc, #36]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800038e:	f000 fe22 	bl	8000fd6 <HAL_I2CEx_ConfigAnalogFilter>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000398:	f000 f8b6 	bl	8000508 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800039c:	2100      	movs	r1, #0
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_I2C1_Init+0x74>)
 80003a0:	f000 fe64 	bl	800106c <HAL_I2CEx_ConfigDigitalFilter>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f8ad 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000048 	.word	0x20000048
 80003b8:	40005400 	.word	0x40005400
 80003bc:	10b17db5 	.word	0x10b17db5

080003c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003c6:	4a23      	ldr	r2, [pc, #140]	@ (8000454 <MX_USART1_UART_Init+0x94>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ca:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003de:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b19      	ldr	r3, [pc, #100]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80003fc:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000402:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 8000404:	2200      	movs	r2, #0
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000408:	4811      	ldr	r0, [pc, #68]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 800040a:	f002 f9b8 	bl	800277e <HAL_UART_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000414:	f000 f878 	bl	8000508 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000418:	2100      	movs	r1, #0
 800041a:	480d      	ldr	r0, [pc, #52]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 800041c:	f002 fd94 	bl	8002f48 <HAL_UARTEx_SetTxFifoThreshold>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000426:	f000 f86f 	bl	8000508 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800042a:	2100      	movs	r1, #0
 800042c:	4808      	ldr	r0, [pc, #32]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 800042e:	f002 fdc9 	bl	8002fc4 <HAL_UARTEx_SetRxFifoThreshold>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000438:	f000 f866 	bl	8000508 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800043c:	4804      	ldr	r0, [pc, #16]	@ (8000450 <MX_USART1_UART_Init+0x90>)
 800043e:	f002 fd4a 	bl	8002ed6 <HAL_UARTEx_DisableFifoMode>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000448:	f000 f85e 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000009c 	.word	0x2000009c
 8000454:	40013800 	.word	0x40013800

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	2002      	movs	r0, #2
 800046e:	f7ff fee7 	bl	8000240 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	2001      	movs	r0, #1
 8000474:	f7ff fee4 	bl	8000240 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000478:	2201      	movs	r2, #1
 800047a:	217f      	movs	r1, #127	@ 0x7f
 800047c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000480:	f000 fcdc 	bl	8000e3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_1, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2106      	movs	r1, #6
 8000488:	481e      	ldr	r0, [pc, #120]	@ (8000504 <MX_GPIO_Init+0xac>)
 800048a:	f000 fcd7 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	21f0      	movs	r1, #240	@ 0xf0
 8000492:	481c      	ldr	r0, [pc, #112]	@ (8000504 <MX_GPIO_Init+0xac>)
 8000494:	f000 fcd2 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000498:	237f      	movs	r3, #127	@ 0x7f
 800049a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b0:	f000 fb5c 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b8:	2303      	movs	r3, #3
 80004ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c8:	f000 fb50 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80004cc:	23f6      	movs	r3, #246	@ 0xf6
 80004ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4619      	mov	r1, r3
 80004e0:	4808      	ldr	r0, [pc, #32]	@ (8000504 <MX_GPIO_Init+0xac>)
 80004e2:	f000 fb43 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004e6:	2301      	movs	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4619      	mov	r1, r3
 80004f6:	4803      	ldr	r0, [pc, #12]	@ (8000504 <MX_GPIO_Init+0xac>)
 80004f8:	f000 fb38 	bl	8000b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004fc:	bf00      	nop
 80004fe:	3718      	adds	r7, #24
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	48000400 	.word	0x48000400

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <Error_Handler+0x8>

08000514 <LL_AHB2_GRP1_EnableClock>:
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000520:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000546:	b480      	push	{r7}
 8000548:	b085      	sub	sp, #20
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800054e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000552:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800055e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000562:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4013      	ands	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800056a:	68fb      	ldr	r3, [r7, #12]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000584:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000586:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000594:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4013      	ands	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	@ 0x40
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2224      	movs	r2, #36	@ 0x24
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 fd7f 	bl	80030dc <memset>
  if(hi2c->Instance==I2C1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <HAL_I2C_MspInit+0x88>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d126      	bne.n	8000636 <HAL_I2C_MspInit+0x7e>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005e8:	2304      	movs	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ec:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80005f0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 ffd6 	bl	80025a8 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000602:	f7ff ff81 	bl	8000508 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	2002      	movs	r0, #2
 8000608:	f7ff ff84 	bl	8000514 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800060c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000610:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000612:	2312      	movs	r3, #18
 8000614:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800061e:	2304      	movs	r3, #4
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000626:	4619      	mov	r1, r3
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <HAL_I2C_MspInit+0x8c>)
 800062a:	f000 fa9f 	bl	8000b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800062e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000632:	f7ff ff88 	bl	8000546 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000636:	bf00      	nop
 8000638:	3740      	adds	r7, #64	@ 0x40
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40005400 	.word	0x40005400
 8000644:	48000400 	.word	0x48000400

08000648 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	@ 0x40
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2224      	movs	r2, #36	@ 0x24
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fd37 	bl	80030dc <memset>
  if(huart->Instance==USART1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <HAL_UART_MspInit+0x88>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d126      	bne.n	80006c6 <HAL_UART_MspInit+0x7e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000678:	2301      	movs	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4618      	mov	r0, r3
 8000686:	f001 ff8f 	bl	80025a8 <HAL_RCCEx_PeriphCLKConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000690:	f7ff ff3a 	bl	8000508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000694:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000698:	f7ff ff6e 	bl	8000578 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff39 	bl	8000514 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006b4:	2307      	movs	r3, #7
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006bc:	4619      	mov	r1, r3
 80006be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c2:	f000 fa53 	bl	8000b6c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80006c6:	bf00      	nop
 80006c8:	3740      	adds	r7, #64	@ 0x40
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40013800 	.word	0x40013800

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <NMI_Handler+0x4>

080006dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <MemManage_Handler+0x4>

080006ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072a:	f000 f8eb 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemInit+0x90>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800073e:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <SystemInit+0x90>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800075c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000760:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <SystemInit+0x94>)
 800076e:	4013      	ands	r3, r2
 8000770:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800077a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800077e:	f023 0305 	bic.w	r3, r3, #5
 8000782:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800078a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800078e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000792:	f023 0301 	bic.w	r3, r3, #1
 8000796:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800079a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800079e:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <SystemInit+0x98>)
 80007a0:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00
 80007c8:	faf6fefb 	.word	0xfaf6fefb
 80007cc:	22041000 	.word	0x22041000

080007d0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80007d0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d4:	3304      	adds	r3, #4

080007d6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80007da:	d3f9      	bcc.n	80007d0 <CopyDataInit>
  bx lr
 80007dc:	4770      	bx	lr

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80007de:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80007e0:	3004      	adds	r0, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80007e2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>
  bx lr
 80007e6:	4770      	bx	lr

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480f      	ldr	r0, [pc, #60]	@ (8000828 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f7ff ffa2 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80007f0:	480e      	ldr	r0, [pc, #56]	@ (800082c <LoopForever+0x8>)
 80007f2:	490f      	ldr	r1, [pc, #60]	@ (8000830 <LoopForever+0xc>)
 80007f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000834 <LoopForever+0x10>)
 80007f6:	2300      	movs	r3, #0
 80007f8:	f7ff ffed 	bl	80007d6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80007fc:	480e      	ldr	r0, [pc, #56]	@ (8000838 <LoopForever+0x14>)
 80007fe:	490f      	ldr	r1, [pc, #60]	@ (800083c <LoopForever+0x18>)
 8000800:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <LoopForever+0x1c>)
 8000802:	2300      	movs	r3, #0
 8000804:	f7ff ffe7 	bl	80007d6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000808:	480e      	ldr	r0, [pc, #56]	@ (8000844 <LoopForever+0x20>)
 800080a:	490f      	ldr	r1, [pc, #60]	@ (8000848 <LoopForever+0x24>)
 800080c:	2300      	movs	r3, #0
 800080e:	f7ff ffe8 	bl	80007e2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000812:	4809      	ldr	r0, [pc, #36]	@ (8000838 <LoopForever+0x14>)
 8000814:	4909      	ldr	r1, [pc, #36]	@ (800083c <LoopForever+0x18>)
 8000816:	2300      	movs	r3, #0
 8000818:	f7ff ffe3 	bl	80007e2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081c:	f002 fc66 	bl	80030ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000820:	f7ff fd27 	bl	8000272 <main>

08000824 <LoopForever>:

LoopForever:
  b LoopForever
 8000824:	e7fe      	b.n	8000824 <LoopForever>
 8000826:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000828:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 800082c:	20000008 	.word	0x20000008
 8000830:	2000002c 	.word	0x2000002c
 8000834:	0800323c 	.word	0x0800323c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000838:	20030000 	.word	0x20030000
 800083c:	20030000 	.word	0x20030000
 8000840:	08003260 	.word	0x08003260
  INIT_BSS _sbss, _ebss
 8000844:	2000002c 	.word	0x2000002c
 8000848:	20000134 	.word	0x20000134

0800084c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_IRQHandler>
	...

08000850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_Init+0x3c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <HAL_Init+0x3c>)
 8000860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000864:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000866:	2003      	movs	r0, #3
 8000868:	f000 f94e 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086c:	200f      	movs	r0, #15
 800086e:	f000 f80f 	bl	8000890 <HAL_InitTick>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	e001      	b.n	8000882 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087e:	f7ff fe94 	bl	80005aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000882:	79fb      	ldrb	r3, [r7, #7]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58004000 	.word	0x58004000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <HAL_InitTick+0x6c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d024      	beq.n	80008ee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a4:	f001 fcbe 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 80008a8:	4602      	mov	r2, r0
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_InitTick+0x6c>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f948 	bl	8000b52 <HAL_SYSTICK_Config>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10f      	bne.n	80008e8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b0f      	cmp	r3, #15
 80008cc:	d809      	bhi.n	80008e2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ce:	2200      	movs	r2, #0
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	f04f 30ff 	mov.w	r0, #4294967295
 80008d6:	f000 f922 	bl	8000b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008da:	4a09      	ldr	r2, [pc, #36]	@ (8000900 <HAL_InitTick+0x70>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	e007      	b.n	80008f2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e004      	b.n	80008f2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	e001      	b.n	80008f2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000028 	.word	0x20000028
 8000900:	20000024 	.word	0x20000024

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000028 	.word	0x20000028
 8000928:	20000130 	.word	0x20000130

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000130 	.word	0x20000130

08000944 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000948:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <HAL_GetTickPrio+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000024 	.word	0x20000024

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffe2 	bl	800092c <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffd2 	bl	800092c <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	@ (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	@ (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	@ 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ff8e 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff47 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff5e 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff90 	bl	8000a5c <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5f 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffb2 	bl	8000ac4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	e146      	b.n	8000e0a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 8138 	beq.w	8000e04 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x40>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	f003 0201 	and.w	r2, r3, #1
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d017      	beq.n	8000c4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d123      	bne.n	8000c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3208      	adds	r2, #8
 8000c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	6939      	ldr	r1, [r7, #16]
 8000c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0203 	and.w	r2, r3, #3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8092 	beq.w	8000e04 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce0:	4a51      	ldr	r2, [pc, #324]	@ (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d0a:	d013      	beq.n	8000d34 <HAL_GPIO_Init+0x1c8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a47      	ldr	r2, [pc, #284]	@ (8000e2c <HAL_GPIO_Init+0x2c0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d00d      	beq.n	8000d30 <HAL_GPIO_Init+0x1c4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a46      	ldr	r2, [pc, #280]	@ (8000e30 <HAL_GPIO_Init+0x2c4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d007      	beq.n	8000d2c <HAL_GPIO_Init+0x1c0>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a45      	ldr	r2, [pc, #276]	@ (8000e34 <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d101      	bne.n	8000d28 <HAL_GPIO_Init+0x1bc>
 8000d24:	2304      	movs	r3, #4
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1ca>
 8000d28:	2307      	movs	r3, #7
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x1ca>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x1ca>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x1ca>
 8000d34:	2300      	movs	r3, #0
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d46:	4938      	ldr	r1, [pc, #224]	@ (8000e28 <HAL_GPIO_Init+0x2bc>)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d54:	4b38      	ldr	r3, [pc, #224]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d78:	4a2f      	ldr	r2, [pc, #188]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da2:	4a25      	ldr	r2, [pc, #148]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000da8:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dce:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	@ (8000e38 <HAL_GPIO_Init+0x2cc>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa22 f303 	lsr.w	r3, r2, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f47f aeb1 	bne.w	8000b7c <HAL_GPIO_Init+0x10>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48001000 	.word	0x48001000
 8000e38:	58000800 	.word	0x58000800

08000e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4c:	787b      	ldrb	r3, [r7, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4013      	ands	r3, r2
 8000e84:	041a      	lsls	r2, r3, #16
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43d9      	mvns	r1, r3
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	400b      	ands	r3, r1
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e08d      	b.n	8000fce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d106      	bne.n	8000ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fb76 	bl	80005b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2224      	movs	r2, #36	@ 0x24
 8000ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d107      	bne.n	8000f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	e006      	b.n	8000f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d108      	bne.n	8000f42 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	e007      	b.n	8000f52 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69d9      	ldr	r1, [r3, #28]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2220      	movs	r2, #32
 8000fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b20      	cmp	r3, #32
 8000fea:	d138      	bne.n	800105e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e032      	b.n	8001060 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2224      	movs	r2, #36	@ 0x24
 8001006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0201 	bic.w	r2, r2, #1
 8001018:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001028:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6819      	ldr	r1, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2220      	movs	r2, #32
 800104e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800105e:	2302      	movs	r3, #2
  }
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b20      	cmp	r3, #32
 8001080:	d139      	bne.n	80010f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800108c:	2302      	movs	r3, #2
 800108e:	e033      	b.n	80010f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2224      	movs	r2, #36	@ 0x24
 800109c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0201 	bic.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80010be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2220      	movs	r2, #32
 80010e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80010f6:	2302      	movs	r3, #2
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	58000400 	.word	0x58000400

08001124 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001136:	d101      	bne.n	800113c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001178:	6013      	str	r3, [r2, #0]
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001196:	d101      	bne.n	800119c <LL_RCC_HSE_IsReady+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_RCC_HSE_IsReady+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f6:	d101      	bne.n	80011fc <LL_RCC_HSI_IsReady+0x18>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_RCC_HSI_IsReady+0x1a>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001260:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b02      	cmp	r3, #2
 8001288:	d101      	bne.n	800128e <LL_RCC_HSI48_IsReady+0x18>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_RCC_HSI48_IsReady+0x1a>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800129e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800130c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d101      	bne.n	800133a <LL_RCC_LSE_IsReady+0x18>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <LL_RCC_LSE_IsReady+0x1a>
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d101      	bne.n	80013a2 <LL_RCC_LSI1_IsReady+0x18>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <LL_RCC_LSI1_IsReady+0x1a>
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80013f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b08      	cmp	r3, #8
 8001404:	d101      	bne.n	800140a <LL_RCC_LSI2_IsReady+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_RCC_LSI2_IsReady+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001426:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001432:	4313      	orrs	r3, r2
 8001434:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b02      	cmp	r3, #2
 8001490:	d101      	bne.n	8001496 <LL_RCC_MSI_IsReady+0x16>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_RCC_MSI_IsReady+0x18>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014da:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2bb0      	cmp	r3, #176	@ 0xb0
 80014e0:	d901      	bls.n	80014e6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80014e2:	23b0      	movs	r3, #176	@ 0xb0
 80014e4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80014e6:	687b      	ldr	r3, [r7, #4]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 0203 	bic.w	r2, r3, #3
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4313      	orrs	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001592:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001596:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80015c2:	f023 020f 	bic.w	r2, r3, #15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800161a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001650:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800168a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016ca:	d101      	bne.n	80016d0 <LL_RCC_PLL_IsReady+0x18>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <LL_RCC_PLL_IsReady+0x1a>
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0303 	and.w	r3, r3, #3
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800174c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001750:	d101      	bne.n	8001756 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001776:	d101      	bne.n	800177c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001790:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179c:	d101      	bne.n	80017a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017c0:	d101      	bne.n	80017c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017e4:	d101      	bne.n	80017ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b08d      	sub	sp, #52	@ 0x34
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e35c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 808d 	beq.w	8001932 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001818:	f7ff fe95 	bl	8001546 <LL_RCC_GetSysClkSource>
 800181c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181e:	f7ff ff82 	bl	8001726 <LL_RCC_PLL_GetMainSource>
 8001822:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x3e>
 800182a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d147      	bne.n	80018c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001832:	2b01      	cmp	r3, #1
 8001834:	d144      	bne.n	80018c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e340      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001846:	f7ff fe40 	bl	80014ca <LL_RCC_MSI_GetRange>
 800184a:	4603      	mov	r3, r0
 800184c:	429c      	cmp	r4, r3
 800184e:	d914      	bls.n	800187a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fd0f 	bl	8002278 <RCC_SetFlashLatencyFromMSIRange>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e32f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fe1a 	bl	80014a2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fe3e 	bl	80014f4 <LL_RCC_MSI_SetCalibTrimming>
 8001878:	e013      	b.n	80018a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fe0f 	bl	80014a2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fe33 	bl	80014f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fcf0 	bl	8002278 <RCC_SetFlashLatencyFromMSIRange>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e310      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018a2:	f000 fcbf 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4aa4      	ldr	r2, [pc, #656]	@ (8001b3c <HAL_RCC_OscConfig+0x344>)
 80018aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001b40 <HAL_RCC_OscConfig+0x348>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe ffed 	bl	8000890 <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d039      	beq.n	8001930 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e301      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01e      	beq.n	8001906 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018c8:	f7ff fdbc 	bl	8001444 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018cc:	f7ff f82e 	bl	800092c <HAL_GetTick>
 80018d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d4:	f7ff f82a 	bl	800092c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e2ee      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() == 0U)
 80018e6:	f7ff fdcb 	bl	8001480 <LL_RCC_MSI_IsReady>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f1      	beq.n	80018d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fdd4 	bl	80014a2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fdf8 	bl	80014f4 <LL_RCC_MSI_SetCalibTrimming>
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001906:	f7ff fdac 	bl	8001462 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190a:	f7ff f80f 	bl	800092c <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001912:	f7ff f80b 	bl	800092c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e2cf      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001924:	f7ff fdac 	bl	8001480 <LL_RCC_MSI_IsReady>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f1      	bne.n	8001912 <HAL_RCC_OscConfig+0x11a>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001930:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d047      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	f7ff fe02 	bl	8001546 <LL_RCC_GetSysClkSource>
 8001942:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001944:	f7ff feef 	bl	8001726 <LL_RCC_PLL_GetMainSource>
 8001948:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x164>
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d108      	bne.n	8001968 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d134      	bne.n	80019ce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2ad      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0x180>
 8001972:	f7ff fbe9 	bl	8001148 <LL_RCC_HSE_Enable>
 8001976:	e001      	b.n	800197c <HAL_RCC_OscConfig+0x184>
 8001978:	f7ff fbf5 	bl	8001166 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d012      	beq.n	80019aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7fe ffd2 	bl	800092c <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7fe ffce 	bl	800092c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e292      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() == 0U)
 800199e:	f7ff fbf1 	bl	8001184 <LL_RCC_HSE_IsReady>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f1      	beq.n	800198c <HAL_RCC_OscConfig+0x194>
 80019a8:	e011      	b.n	80019ce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7fe ffbf 	bl	800092c <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b2:	f7fe ffbb 	bl	800092c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	@ 0x64
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e27f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019c4:	f7ff fbde 	bl	8001184 <LL_RCC_HSE_IsReady>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f1      	bne.n	80019b2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d04c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019da:	f7ff fdb4 	bl	8001546 <LL_RCC_GetSysClkSource>
 80019de:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e0:	f7ff fea1 	bl	8001726 <LL_RCC_PLL_GetMainSource>
 80019e4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_OscConfig+0x200>
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d10e      	bne.n	8001a10 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d10b      	bne.n	8001a10 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e25f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fbfd 	bl	8001208 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a0e:	e031      	b.n	8001a74 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	f7ff fbc6 	bl	80011a8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7fe ff86 	bl	800092c <HAL_GetTick>
 8001a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7fe ff82 	bl	800092c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e246      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a36:	f7ff fbd5 	bl	80011e4 <LL_RCC_HSI_IsReady>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f1      	beq.n	8001a24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fbdf 	bl	8001208 <LL_RCC_HSI_SetCalibTrimming>
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4c:	f7ff fbbb 	bl	80011c6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7fe ff6c 	bl	800092c <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7fe ff68 	bl	800092c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e22c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a6a:	f7ff fbbb 	bl	80011e4 <LL_RCC_HSI_IsReady>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f1      	bne.n	8001a58 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a3 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d076      	beq.n	8001b84 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d046      	beq.n	8001b30 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001aa2:	f7ff fc72 	bl	800138a <LL_RCC_LSI1_IsReady>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d113      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001aac:	f7ff fc4b 	bl	8001346 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab0:	f7fe ff3c 	bl	800092c <HAL_GetTick>
 8001ab4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ab8:	f7fe ff38 	bl	800092c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1fc      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001aca:	f7ff fc5e 	bl	800138a <LL_RCC_LSI1_IsReady>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f1      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001ad4:	f7ff fc6b 	bl	80013ae <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7fe ff28 	bl	800092c <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001ae0:	f7fe ff24 	bl	800092c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1e8      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001af2:	f7ff fc7e 	bl	80013f2 <LL_RCC_LSI2_IsReady>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f1      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fc88 	bl	8001416 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001b06:	f7ff fc2f 	bl	8001368 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7fe ff0f 	bl	800092c <HAL_GetTick>
 8001b0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b12:	f7fe ff0b 	bl	800092c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1cf      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001b24:	f7ff fc31 	bl	800138a <LL_RCC_LSI1_IsReady>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f1      	bne.n	8001b12 <HAL_RCC_OscConfig+0x31a>
 8001b2e:	e051      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001b30:	f7ff fc09 	bl	8001346 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7fe fefa 	bl	800092c <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001b3a:	e00c      	b.n	8001b56 <HAL_RCC_OscConfig+0x35e>
 8001b3c:	20000020 	.word	0x20000020
 8001b40:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001b44:	f7fe fef2 	bl	800092c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1b6      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001b56:	f7ff fc18 	bl	800138a <LL_RCC_LSI1_IsReady>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f1      	beq.n	8001b44 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001b60:	f7ff fc36 	bl	80013d0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b66:	f7fe fee1 	bl	800092c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1a5      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001b78:	f7ff fc3b 	bl	80013f2 <LL_RCC_LSI2_IsReady>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f1      	bne.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b82:	e027      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001b84:	f7ff fc24 	bl	80013d0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7fe fed0 	bl	800092c <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001b90:	f7fe fecc 	bl	800092c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e190      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ba2:	f7ff fc26 	bl	80013f2 <LL_RCC_LSI2_IsReady>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f1      	bne.n	8001b90 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001bac:	f7ff fbdc 	bl	8001368 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7fe febc 	bl	800092c <HAL_GetTick>
 8001bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001bb8:	f7fe feb8 	bl	800092c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e17c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001bca:	f7ff fbde 	bl	800138a <LL_RCC_LSI1_IsReady>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f1      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d05b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be0:	4ba7      	ldr	r3, [pc, #668]	@ (8001e80 <HAL_RCC_OscConfig+0x688>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d114      	bne.n	8001c16 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001bec:	f7ff fa8a 	bl	8001104 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf0:	f7fe fe9c 	bl	800092c <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7fe fe98 	bl	800092c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e15c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0a:	4b9d      	ldr	r3, [pc, #628]	@ (8001e80 <HAL_RCC_OscConfig+0x688>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x42c>
 8001c1e:	f7ff fb3c 	bl	800129a <LL_RCC_LSE_Enable>
 8001c22:	e00c      	b.n	8001c3e <HAL_RCC_OscConfig+0x446>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d104      	bne.n	8001c36 <HAL_RCC_OscConfig+0x43e>
 8001c2c:	f7ff fb57 	bl	80012de <LL_RCC_LSE_EnableBypass>
 8001c30:	f7ff fb33 	bl	800129a <LL_RCC_LSE_Enable>
 8001c34:	e003      	b.n	8001c3e <HAL_RCC_OscConfig+0x446>
 8001c36:	f7ff fb41 	bl	80012bc <LL_RCC_LSE_Disable>
 8001c3a:	f7ff fb61 	bl	8001300 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d014      	beq.n	8001c70 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7fe fe71 	bl	800092c <HAL_GetTick>
 8001c4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7fe fe6d 	bl	800092c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e12f      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c64:	f7ff fb5d 	bl	8001322 <LL_RCC_LSE_IsReady>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0ef      	beq.n	8001c4e <HAL_RCC_OscConfig+0x456>
 8001c6e:	e013      	b.n	8001c98 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c70:	f7fe fe5c 	bl	800092c <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7fe fe58 	bl	800092c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e11a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c8e:	f7ff fb48 	bl	8001322 <LL_RCC_LSE_IsReady>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ef      	bne.n	8001c78 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cac:	f7ff fac1 	bl	8001232 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7fe fe3c 	bl	800092c <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb8:	f7fe fe38 	bl	800092c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0fc      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001cca:	f7ff fad4 	bl	8001276 <LL_RCC_HSI48_IsReady>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f1      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4c0>
 8001cd4:	e013      	b.n	8001cfe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd6:	f7ff fabd 	bl	8001254 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7fe fe27 	bl	800092c <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7fe fe23 	bl	800092c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0e7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001cf4:	f7ff fabf 	bl	8001276 <LL_RCC_HSI48_IsReady>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f1      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80dd 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x6ca>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d08:	f7ff fc1d 	bl	8001546 <LL_RCC_GetSysClkSource>
 8001d0c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	f040 80a6 	bne.w	8001e6c <HAL_RCC_OscConfig+0x674>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0203 	and.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d123      	bne.n	8001d76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d11c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d114      	bne.n	8001d76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d10d      	bne.n	8001d76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d054      	beq.n	8001e20 <HAL_RCC_OscConfig+0x628>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d04f      	beq.n	8001e1c <HAL_RCC_OscConfig+0x624>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d7c:	f7ff fc8d 	bl	800169a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d80:	f7fe fdd4 	bl	800092c <HAL_GetTick>
 8001d84:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x5a2>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe fdd0 	bl	800092c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x5a2>
              {
                return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e094      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ef      	bne.n	8001d88 <HAL_RCC_OscConfig+0x590>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <HAL_RCC_OscConfig+0x68c>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dc0:	0212      	lsls	r2, r2, #8
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dde:	f7ff fc4d 	bl	800167c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df2:	f7fe fd9b 	bl	800092c <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x614>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fd97 	bl	800092c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x614>
              {
                return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e05b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ef      	beq.n	8001dfa <HAL_RCC_OscConfig+0x602>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1a:	e052      	b.n	8001ec2 <HAL_RCC_OscConfig+0x6ca>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e051      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d149      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x6ca>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e2e:	f7ff fc25 	bl	800167c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e42:	f7fe fd73 	bl	800092c <HAL_GetTick>
 8001e46:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x664>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fd6f 	bl	800092c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x664>
            {
              return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e033      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ef      	beq.n	8001e4a <HAL_RCC_OscConfig+0x652>
 8001e6a:	e02a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d025      	beq.n	8001ebe <HAL_RCC_OscConfig+0x6c6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	f7ff fc12 	bl	800169a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7fe fd59 	bl	800092c <HAL_GetTick>
 8001e7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7c:	e00d      	b.n	8001e9a <HAL_RCC_OscConfig+0x6a2>
 8001e7e:	bf00      	nop
 8001e80:	58000400 	.word	0x58000400
 8001e84:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe fd50 	bl	800092c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e014      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1ef      	bne.n	8001e88 <HAL_RCC_OscConfig+0x690>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	60d3      	str	r3, [r2, #12]
 8001ebc:	e001      	b.n	8001ec2 <HAL_RCC_OscConfig+0x6ca>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x6cc>
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3734      	adds	r7, #52	@ 0x34
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e12d      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b98      	ldr	r3, [pc, #608]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d91b      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b95      	ldr	r3, [pc, #596]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4993      	ldr	r1, [pc, #588]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001efe:	f7fe fd15 	bl	800092c <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f06:	f7fe fd11 	bl	800092c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e111      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f18:	4b8a      	ldr	r3, [pc, #552]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d1ef      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fb11 	bl	800155e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f3c:	f7fe fcf6 	bl	800092c <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f44:	f7fe fcf2 	bl	800092c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0f2      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f56:	f7ff fbf2 	bl	800173e <LL_RCC_IsActiveFlag_HPRE>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f1      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fb08 	bl	8001586 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f76:	f7fe fcd9 	bl	800092c <HAL_GetTick>
 8001f7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f7e:	f7fe fcd5 	bl	800092c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0d5      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f90:	f7ff fbe7 	bl	8001762 <LL_RCC_IsActiveFlag_C2HPRE>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f1      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d016      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb01 	bl	80015b2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fcbc 	bl	800092c <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fb8:	f7fe fcb8 	bl	800092c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0b8      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fca:	f7ff fbdd 	bl	8001788 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f1      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d016      	beq.n	800200e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fafb 	bl	80015e0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fea:	f7fe fc9f 	bl	800092c <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ff2:	f7fe fc9b 	bl	800092c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e09b      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002004:	f7ff fbd3 	bl	80017ae <LL_RCC_IsActiveFlag_PPRE1>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f1      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d017      	beq.n	800204a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff faf1 	bl	8001608 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002026:	f7fe fc81 	bl	800092c <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800202e:	f7fe fc7d 	bl	800092c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e07d      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002040:	f7ff fbc7 	bl	80017d2 <LL_RCC_IsActiveFlag_PPRE2>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f1      	beq.n	800202e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d043      	beq.n	80020de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d106      	bne.n	800206c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800205e:	f7ff f891 	bl	8001184 <LL_RCC_HSE_IsReady>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d11e      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e067      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d106      	bne.n	8002082 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002074:	f7ff fb20 	bl	80016b8 <LL_RCC_PLL_IsReady>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d113      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e05c      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800208a:	f7ff f9f9 	bl	8001480 <LL_RCC_MSI_IsReady>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e051      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002098:	f7ff f8a4 	bl	80011e4 <LL_RCC_HSI_IsReady>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e04a      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fa37 	bl	800151e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7fe fc3c 	bl	800092c <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7fe fc38 	bl	800092c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e036      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	f7ff fa3a 	bl	8001546 <LL_RCC_GetSysClkSource>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	429a      	cmp	r2, r3
 80020dc:	d1ec      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020de:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d21b      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0207 	bic.w	r2, r3, #7
 80020f4:	4913      	ldr	r1, [pc, #76]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fc:	f7fe fc16 	bl	800092c <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	e008      	b.n	8002116 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002104:	f7fe fc12 	bl	800092c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e012      	b.n	800213c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_RCC_ClockConfig+0x278>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d1ef      	bne.n	8002104 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002124:	f000 f87e 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002128:	4603      	mov	r3, r0
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <HAL_RCC_ClockConfig+0x27c>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800212e:	f7fe fc09 	bl	8000944 <HAL_GetTickPrio>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fbab 	bl	8000890 <HAL_InitTick>
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58004000 	.word	0x58004000
 8002148:	20000020 	.word	0x20000020

0800214c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002152:	f7ff f9f8 	bl	8001546 <LL_RCC_GetSysClkSource>
 8002156:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800215e:	f7ff f9b4 	bl	80014ca <LL_RCC_MSI_GetRange>
 8002162:	4603      	mov	r3, r0
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	4a2b      	ldr	r2, [pc, #172]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xcc>)
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	e04b      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b04      	cmp	r3, #4
 8002178:	d102      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800217a:	4b28      	ldr	r3, [pc, #160]	@ (800221c <HAL_RCC_GetSysClockFreq+0xd0>)
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e045      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b08      	cmp	r3, #8
 8002184:	d10a      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002186:	f7fe ffcd 	bl	8001124 <LL_RCC_HSE_IsEnabledDiv2>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002190:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e03a      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e037      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800219c:	f7ff fac3 	bl	8001726 <LL_RCC_PLL_GetMainSource>
 80021a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d003      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x64>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80021ae:	e00d      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <HAL_RCC_GetSysClockFreq+0xd0>)
 80021b2:	60bb      	str	r3, [r7, #8]
        break;
 80021b4:	e015      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021b6:	f7fe ffb5 	bl	8001124 <LL_RCC_HSE_IsEnabledDiv2>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_RCC_GetSysClockFreq+0xd0>)
 80021c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021c4:	e00d      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_RCC_GetSysClockFreq+0xd4>)
 80021c8:	60bb      	str	r3, [r7, #8]
        break;
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80021cc:	f7ff f97d 	bl	80014ca <LL_RCC_MSI_GetRange>
 80021d0:	4603      	mov	r3, r0
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_RCC_GetSysClockFreq+0xcc>)
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	60bb      	str	r3, [r7, #8]
        break;
 80021e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80021e2:	f7ff fa7b 	bl	80016dc <LL_RCC_PLL_GetN>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	fb03 f402 	mul.w	r4, r3, r2
 80021ee:	f7ff fa8e 	bl	800170e <LL_RCC_PLL_GetDivider>
 80021f2:	4603      	mov	r3, r0
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	3301      	adds	r3, #1
 80021f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80021fc:	f7ff fa7b 	bl	80016f6 <LL_RCC_PLL_GetR>
 8002200:	4603      	mov	r3, r0
 8002202:	0f5b      	lsrs	r3, r3, #29
 8002204:	3301      	adds	r3, #1
 8002206:	fbb4 f3f3 	udiv	r3, r4, r3
 800220a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800220c:	68fb      	ldr	r3, [r7, #12]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	080031cc 	.word	0x080031cc
 800221c:	00f42400 	.word	0x00f42400
 8002220:	01e84800 	.word	0x01e84800

08002224 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b598      	push	{r3, r4, r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002228:	f7ff ff90 	bl	800214c <HAL_RCC_GetSysClockFreq>
 800222c:	4604      	mov	r4, r0
 800222e:	f7ff f9ff 	bl	8001630 <LL_RCC_GetAHBPrescaler>
 8002232:	4603      	mov	r3, r0
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a03      	ldr	r2, [pc, #12]	@ (8002248 <HAL_RCC_GetHCLKFreq+0x24>)
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd98      	pop	{r3, r4, r7, pc}
 8002248:	0800316c 	.word	0x0800316c

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b598      	push	{r3, r4, r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002250:	f7ff ffe8 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002254:	4604      	mov	r4, r0
 8002256:	f7ff fa05 	bl	8001664 <LL_RCC_GetAPB2Prescaler>
 800225a:	4603      	mov	r3, r0
 800225c:	0adb      	lsrs	r3, r3, #11
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd98      	pop	{r3, r4, r7, pc}
 8002274:	080031ac 	.word	0x080031ac

08002278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2bb0      	cmp	r3, #176	@ 0xb0
 8002284:	d903      	bls.n	800228e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e007      	b.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a10      	ldr	r2, [pc, #64]	@ (80022d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800229e:	f7ff f9d3 	bl	8001648 <LL_RCC_GetAHB4Prescaler>
 80022a2:	4603      	mov	r3, r0
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4a0c      	ldr	r2, [pc, #48]	@ (80022dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80022ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4a09      	ldr	r2, [pc, #36]	@ (80022e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f80c 	bl	80022e4 <RCC_SetFlashLatency>
 80022cc:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	080031cc 	.word	0x080031cc
 80022dc:	0800316c 	.word	0x0800316c
 80022e0:	431bde83 	.word	0x431bde83

080022e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b08f      	sub	sp, #60	@ 0x3c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80022ee:	4b24      	ldr	r3, [pc, #144]	@ (8002380 <RCC_SetFlashLatency+0x9c>)
 80022f0:	f107 041c 	add.w	r4, r7, #28
 80022f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80022fa:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <RCC_SetFlashLatency+0xa0>)
 80022fc:	f107 040c 	add.w	r4, r7, #12
 8002300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
 800230e:	e013      	b.n	8002338 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	3338      	adds	r3, #56	@ 0x38
 8002316:	443b      	add	r3, r7
 8002318:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d807      	bhi.n	8002332 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	3338      	adds	r3, #56	@ 0x38
 8002328:	443b      	add	r3, r7
 800232a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800232e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8002330:	e005      	b.n	800233e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	3301      	adds	r3, #1
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	2b03      	cmp	r3, #3
 800233c:	d9e8      	bls.n	8002310 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <RCC_SetFlashLatency+0xa4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4910      	ldr	r1, [pc, #64]	@ (8002388 <RCC_SetFlashLatency+0xa4>)
 8002348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800234e:	f7fe faed 	bl	800092c <HAL_GetTick>
 8002352:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002354:	e008      	b.n	8002368 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002356:	f7fe fae9 	bl	800092c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e007      	b.n	8002378 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002368:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <RCC_SetFlashLatency+0xa4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002372:	429a      	cmp	r2, r3
 8002374:	d1ef      	bne.n	8002356 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	373c      	adds	r7, #60	@ 0x3c
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	0800314c 	.word	0x0800314c
 8002384:	0800315c 	.word	0x0800315c
 8002388:	58004000 	.word	0x58004000

0800238c <LL_RCC_LSE_IsEnabled>:
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <LL_RCC_LSE_IsEnabled+0x18>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_RCC_LSE_IsReady>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d101      	bne.n	80023c8 <LL_RCC_LSE_IsReady+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_RCC_LSE_IsReady+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_RCC_SetRFWKPClockSource>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_RCC_SetUSARTClockSource>:
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f023 0203 	bic.w	r2, r3, #3
 8002414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_RCC_SetI2CClockSource>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002438:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_RCC_SetLPTIMClockSource>:
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002472:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_RCC_SetRNGClockSource>:
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80024ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_RCC_SetCLK48ClockSource>:
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_SetADCClockSource>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_RCC_SetRTCClockSource>:
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_RCC_GetRTCClockSource>:
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_RCC_ForceBackupDomainReset>:
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d046      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80025c4:	f7ff ffc1 	bl	800254a <LL_RCC_GetRTCClockSource>
 80025c8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d03c      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80025d4:	f7fe fd96 	bl	8001104 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff9b 	bl	800251e <LL_RCC_SetRTCClockSource>
 80025e8:	e02e      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80025f4:	f7ff ffb6 	bl	8002564 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80025f8:	f7ff ffc5 	bl	8002586 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002614:	f7ff feba 	bl	800238c <LL_RCC_LSE_IsEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	2b01      	cmp	r3, #1
 800261c:	d114      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800261e:	f7fe f985 	bl	800092c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002624:	e00b      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe f981 	bl	800092c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d902      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	77fb      	strb	r3, [r7, #31]
              break;
 800263c:	e004      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800263e:	f7ff feb7 	bl	80023b0 <LL_RCC_LSE_IsReady>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d1ee      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
 800264a:	77bb      	strb	r3, [r7, #30]
 800264c:	e001      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fecc 	bl	8002400 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fef4 	bl	8002466 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fee9 	bl	8002466 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fec1 	bl	800242c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02b      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026be:	d008      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026c8:	d003      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fedf 	bl	800249a <LL_RCC_SetRNGClockSource>
 80026dc:	e00a      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff fed6 	bl	800249a <LL_RCC_SetRNGClockSource>
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff fee9 	bl	80024c6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80026fc:	d107      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002708:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fee7 	bl	80024f2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800272c:	d107      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273c:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fe40 	bl	80023d4 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002754:	7fbb      	ldrb	r3, [r7, #30]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <LL_RCC_GetUSARTClockSource>:
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4013      	ands	r3, r2
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e042      	b.n	8002816 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fd ff50 	bl	8000648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2224      	movs	r2, #36	@ 0x24
 80027ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f965 	bl	8002a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f826 	bl	8002820 <UART_SetConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e01b      	b.n	8002816 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9e4 	bl	8002bdc <UART_CheckIdleState>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a88 <UART_SetConfig+0x268>)
 800284c:	4013      	ands	r3, r2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	6979      	ldr	r1, [r7, #20]
 8002854:	430b      	orrs	r3, r1
 8002856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002888:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	6979      	ldr	r1, [r7, #20]
 8002892:	430b      	orrs	r3, r1
 8002894:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	f023 010f 	bic.w	r1, r3, #15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a76      	ldr	r2, [pc, #472]	@ (8002a8c <UART_SetConfig+0x26c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d11f      	bne.n	80028f6 <UART_SetConfig+0xd6>
 80028b6:	2003      	movs	r0, #3
 80028b8:	f7ff ff51 	bl	800275e <LL_RCC_GetUSARTClockSource>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d816      	bhi.n	80028f0 <UART_SetConfig+0xd0>
 80028c2:	a201      	add	r2, pc, #4	@ (adr r2, 80028c8 <UART_SetConfig+0xa8>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028e5 	.word	0x080028e5
 80028d0:	080028df 	.word	0x080028df
 80028d4:	080028eb 	.word	0x080028eb
 80028d8:	2301      	movs	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e00d      	b.n	80028fa <UART_SetConfig+0xda>
 80028de:	2302      	movs	r3, #2
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e00a      	b.n	80028fa <UART_SetConfig+0xda>
 80028e4:	2304      	movs	r3, #4
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e007      	b.n	80028fa <UART_SetConfig+0xda>
 80028ea:	2308      	movs	r3, #8
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e004      	b.n	80028fa <UART_SetConfig+0xda>
 80028f0:	2310      	movs	r3, #16
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e001      	b.n	80028fa <UART_SetConfig+0xda>
 80028f6:	2310      	movs	r3, #16
 80028f8:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002902:	d15e      	bne.n	80029c2 <UART_SetConfig+0x1a2>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8002904:	7ffb      	ldrb	r3, [r7, #31]
 8002906:	3b01      	subs	r3, #1
 8002908:	2b07      	cmp	r3, #7
 800290a:	d822      	bhi.n	8002952 <UART_SetConfig+0x132>
 800290c:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <UART_SetConfig+0xf4>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002935 	.word	0x08002935
 8002918:	0800293d 	.word	0x0800293d
 800291c:	08002953 	.word	0x08002953
 8002920:	08002943 	.word	0x08002943
 8002924:	08002953 	.word	0x08002953
 8002928:	08002953 	.word	0x08002953
 800292c:	08002953 	.word	0x08002953
 8002930:	0800294b 	.word	0x0800294b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002934:	f7ff fc8a 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8002938:	61b8      	str	r0, [r7, #24]
        break;
 800293a:	e00f      	b.n	800295c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800293c:	4b54      	ldr	r3, [pc, #336]	@ (8002a90 <UART_SetConfig+0x270>)
 800293e:	61bb      	str	r3, [r7, #24]
        break;
 8002940:	e00c      	b.n	800295c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002942:	f7ff fc03 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8002946:	61b8      	str	r0, [r7, #24]
        break;
 8002948:	e008      	b.n	800295c <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800294a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294e:	61bb      	str	r3, [r7, #24]
        break;
 8002950:	e004      	b.n	800295c <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	77bb      	strb	r3, [r7, #30]
        break;
 800295a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d07e      	beq.n	8002a60 <UART_SetConfig+0x240>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	4a4b      	ldr	r2, [pc, #300]	@ (8002a94 <UART_SetConfig+0x274>)
 8002968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800296c:	461a      	mov	r2, r3
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	fbb3 f3f2 	udiv	r3, r3, r2
 8002974:	005a      	lsls	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d916      	bls.n	80029bc <UART_SetConfig+0x19c>
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d212      	bcs.n	80029bc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f023 030f 	bic.w	r3, r3, #15
 800299e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	89fa      	ldrh	r2, [r7, #14]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	e051      	b.n	8002a60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	77bb      	strb	r3, [r7, #30]
 80029c0:	e04e      	b.n	8002a60 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029c2:	7ffb      	ldrb	r3, [r7, #31]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	2b07      	cmp	r3, #7
 80029c8:	d821      	bhi.n	8002a0e <UART_SetConfig+0x1ee>
 80029ca:	a201      	add	r2, pc, #4	@ (adr r2, 80029d0 <UART_SetConfig+0x1b0>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029f1 	.word	0x080029f1
 80029d4:	080029f9 	.word	0x080029f9
 80029d8:	08002a0f 	.word	0x08002a0f
 80029dc:	080029ff 	.word	0x080029ff
 80029e0:	08002a0f 	.word	0x08002a0f
 80029e4:	08002a0f 	.word	0x08002a0f
 80029e8:	08002a0f 	.word	0x08002a0f
 80029ec:	08002a07 	.word	0x08002a07
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029f0:	f7ff fc2c 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 80029f4:	61b8      	str	r0, [r7, #24]
        break;
 80029f6:	e00f      	b.n	8002a18 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f8:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <UART_SetConfig+0x270>)
 80029fa:	61bb      	str	r3, [r7, #24]
        break;
 80029fc:	e00c      	b.n	8002a18 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029fe:	f7ff fba5 	bl	800214c <HAL_RCC_GetSysClockFreq>
 8002a02:	61b8      	str	r0, [r7, #24]
        break;
 8002a04:	e008      	b.n	8002a18 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a0a:	61bb      	str	r3, [r7, #24]
        break;
 8002a0c:	e004      	b.n	8002a18 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	77bb      	strb	r3, [r7, #30]
        break;
 8002a16:	bf00      	nop
    }

    if (pclk != 0U)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d020      	beq.n	8002a60 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	4a1c      	ldr	r2, [pc, #112]	@ (8002a94 <UART_SetConfig+0x274>)
 8002a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	441a      	add	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d909      	bls.n	8002a5c <UART_SetConfig+0x23c>
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4e:	d205      	bcs.n	8002a5c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60da      	str	r2, [r3, #12]
 8002a5a:	e001      	b.n	8002a60 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002a7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	cfff69f3 	.word	0xcfff69f3
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	00f42400 	.word	0x00f42400
 8002a94:	0800320c 	.word	0x0800320c

08002a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01a      	beq.n	8002bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b96:	d10a      	bne.n	8002bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b098      	sub	sp, #96	@ 0x60
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bec:	f7fd fe9e 	bl	800092c <HAL_GetTick>
 8002bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d12f      	bne.n	8002c60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f88e 	bl	8002d30 <UART_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d022      	beq.n	8002c60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e6      	bne.n	8002c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e063      	b.n	8002d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d149      	bne.n	8002d02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f857 	bl	8002d30 <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d03c      	beq.n	8002d02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	623b      	str	r3, [r7, #32]
   return(result);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e6      	bne.n	8002c88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f023 0301 	bic.w	r3, r3, #1
 8002cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cda:	61fa      	str	r2, [r7, #28]
 8002cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e5      	bne.n	8002cba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e012      	b.n	8002d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3758      	adds	r7, #88	@ 0x58
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d40:	e04f      	b.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d04b      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fd fdef 	bl	800092c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e04e      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d037      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b80      	cmp	r3, #128	@ 0x80
 8002d76:	d034      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b40      	cmp	r3, #64	@ 0x40
 8002d7c:	d031      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d110      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f838 	bl	8002e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e029      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dbc:	d111      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f81e 	bl	8002e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e00f      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d0a0      	beq.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b095      	sub	sp, #84	@ 0x54
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e38:	e841 2300 	strex	r3, r2, [r1]
 8002e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1e6      	bne.n	8002e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	e853 3f00 	ldrex	r3, [r3]
 8002e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3308      	adds	r3, #8
 8002e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e70:	e841 2300 	strex	r3, r2, [r1]
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e3      	bne.n	8002e44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d118      	bne.n	8002eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f023 0310 	bic.w	r3, r3, #16
 8002e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea2:	61bb      	str	r3, [r7, #24]
 8002ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e6      	bne.n	8002e84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002eca:	bf00      	nop
 8002ecc:	3754      	adds	r7, #84	@ 0x54
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_UARTEx_DisableFifoMode+0x16>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e027      	b.n	8002f3c <HAL_UARTEx_DisableFifoMode+0x66>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	@ 0x24
 8002ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002f1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e02d      	b.n	8002fbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f84f 	bl	8003040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e02d      	b.n	8003038 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f811 	bl	8003040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800304c:	2b00      	cmp	r3, #0
 800304e:	d108      	bne.n	8003062 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003060:	e031      	b.n	80030c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003062:	2308      	movs	r3, #8
 8003064:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003066:	2308      	movs	r3, #8
 8003068:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	0e5b      	lsrs	r3, r3, #25
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	0f5b      	lsrs	r3, r3, #29
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	7b3a      	ldrb	r2, [r7, #12]
 800308e:	4911      	ldr	r1, [pc, #68]	@ (80030d4 <UARTEx_SetNbDataToProcess+0x94>)
 8003090:	5c8a      	ldrb	r2, [r1, r2]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003096:	7b3a      	ldrb	r2, [r7, #12]
 8003098:	490f      	ldr	r1, [pc, #60]	@ (80030d8 <UARTEx_SetNbDataToProcess+0x98>)
 800309a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800309c:	fb93 f3f2 	sdiv	r3, r3, r2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	7b7a      	ldrb	r2, [r7, #13]
 80030ac:	4909      	ldr	r1, [pc, #36]	@ (80030d4 <UARTEx_SetNbDataToProcess+0x94>)
 80030ae:	5c8a      	ldrb	r2, [r1, r2]
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80030b4:	7b7a      	ldrb	r2, [r7, #13]
 80030b6:	4908      	ldr	r1, [pc, #32]	@ (80030d8 <UARTEx_SetNbDataToProcess+0x98>)
 80030b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	08003224 	.word	0x08003224
 80030d8:	0800322c 	.word	0x0800322c

080030dc <memset>:
 80030dc:	4402      	add	r2, r0
 80030de:	4603      	mov	r3, r0
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d100      	bne.n	80030e6 <memset+0xa>
 80030e4:	4770      	bx	lr
 80030e6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ea:	e7f9      	b.n	80030e0 <memset+0x4>

080030ec <__libc_init_array>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003124 <__libc_init_array+0x38>)
 80030f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003128 <__libc_init_array+0x3c>)
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	2600      	movs	r6, #0
 80030f8:	42a6      	cmp	r6, r4
 80030fa:	d109      	bne.n	8003110 <__libc_init_array+0x24>
 80030fc:	4d0b      	ldr	r5, [pc, #44]	@ (800312c <__libc_init_array+0x40>)
 80030fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003130 <__libc_init_array+0x44>)
 8003100:	f000 f818 	bl	8003134 <_init>
 8003104:	1b64      	subs	r4, r4, r5
 8003106:	10a4      	asrs	r4, r4, #2
 8003108:	2600      	movs	r6, #0
 800310a:	42a6      	cmp	r6, r4
 800310c:	d105      	bne.n	800311a <__libc_init_array+0x2e>
 800310e:	bd70      	pop	{r4, r5, r6, pc}
 8003110:	f855 3b04 	ldr.w	r3, [r5], #4
 8003114:	4798      	blx	r3
 8003116:	3601      	adds	r6, #1
 8003118:	e7ee      	b.n	80030f8 <__libc_init_array+0xc>
 800311a:	f855 3b04 	ldr.w	r3, [r5], #4
 800311e:	4798      	blx	r3
 8003120:	3601      	adds	r6, #1
 8003122:	e7f2      	b.n	800310a <__libc_init_array+0x1e>
 8003124:	08003234 	.word	0x08003234
 8003128:	08003234 	.word	0x08003234
 800312c:	08003234 	.word	0x08003234
 8003130:	08003238 	.word	0x08003238

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
